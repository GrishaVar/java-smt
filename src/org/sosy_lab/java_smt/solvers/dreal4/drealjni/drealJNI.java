/*
 *  JavaSMT is an API wrapper for a collection of SMT solvers.
 *  This file is part of JavaSMT.
 *
 *  Copyright (C) 2007-2016  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;

public class drealJNI {
  public final static native void FormulaSet_Iterator_incrementUnchecked(long jarg1, FormulaSet.Iterator jarg1_);
  public final static native long FormulaSet_Iterator_derefUnchecked(long jarg1, FormulaSet.Iterator jarg1_);
  public final static native boolean FormulaSet_Iterator_isNot(long jarg1, FormulaSet.Iterator jarg1_, long jarg2, FormulaSet.Iterator jarg2_);
  public final static native void delete_FormulaSet_Iterator(long jarg1);
  public final static native long new_FormulaSet__SWIG_0();
  public final static native long new_FormulaSet__SWIG_1(long jarg1, FormulaSet jarg1_);
  public final static native boolean FormulaSet_isEmpty(long jarg1, FormulaSet jarg1_);
  public final static native void FormulaSet_clear(long jarg1, FormulaSet jarg1_);
  public final static native long FormulaSet_begin(long jarg1, FormulaSet jarg1_);
  public final static native long FormulaSet_end(long jarg1, FormulaSet jarg1_);
  public final static native boolean FormulaSet_addImpl(long jarg1, FormulaSet jarg1_, long jarg2, Formula jarg2_);
  public final static native boolean FormulaSet_containsImpl(long jarg1, FormulaSet jarg1_, long jarg2, Formula jarg2_);
  public final static native boolean FormulaSet_removeImpl(long jarg1, FormulaSet jarg1_, long jarg2, Formula jarg2_);
  public final static native int FormulaSet_sizeImpl(long jarg1, FormulaSet jarg1_);
  public final static native boolean FormulaSet_hasNextImpl(long jarg1, FormulaSet jarg1_, long jarg2, FormulaSet.Iterator jarg2_);
  public final static native void delete_FormulaSet(long jarg1);
  public final static native long new_FormulaVector__SWIG_0();
  public final static native long new_FormulaVector__SWIG_1(long jarg1, FormulaVector jarg1_);
  public final static native long FormulaVector_capacity(long jarg1, FormulaVector jarg1_);
  public final static native void FormulaVector_reserve(long jarg1, FormulaVector jarg1_, long jarg2);
  public final static native boolean FormulaVector_isEmpty(long jarg1, FormulaVector jarg1_);
  public final static native void FormulaVector_clear(long jarg1, FormulaVector jarg1_);
  public final static native long new_FormulaVector__SWIG_2(int jarg1, long jarg2, Formula jarg2_);
  public final static native int FormulaVector_doSize(long jarg1, FormulaVector jarg1_);
  public final static native void FormulaVector_doAdd__SWIG_0(long jarg1, FormulaVector jarg1_, long jarg2, Formula jarg2_);
  public final static native void FormulaVector_doAdd__SWIG_1(long jarg1, FormulaVector jarg1_, int jarg2, long jarg3, Formula jarg3_);
  public final static native long FormulaVector_doRemove(long jarg1, FormulaVector jarg1_, int jarg2);
  public final static native long FormulaVector_doGet(long jarg1, FormulaVector jarg1_, int jarg2);
  public final static native long FormulaVector_doSet(long jarg1, FormulaVector jarg1_, int jarg2, long jarg3, Formula jarg3_);
  public final static native void FormulaVector_doRemoveRange(long jarg1, FormulaVector jarg1_, int jarg2, int jarg3);
  public final static native void delete_FormulaVector(long jarg1);
  public final static native long new_VariableVector__SWIG_0();
  public final static native long new_VariableVector__SWIG_1(long jarg1, VariableVector jarg1_);
  public final static native long VariableVector_capacity(long jarg1, VariableVector jarg1_);
  public final static native void VariableVector_reserve(long jarg1, VariableVector jarg1_, long jarg2);
  public final static native boolean VariableVector_isEmpty(long jarg1, VariableVector jarg1_);
  public final static native void VariableVector_clear(long jarg1, VariableVector jarg1_);
  public final static native long new_VariableVector__SWIG_2(int jarg1, long jarg2, Variable jarg2_);
  public final static native int VariableVector_doSize(long jarg1, VariableVector jarg1_);
  public final static native void VariableVector_doAdd__SWIG_0(long jarg1, VariableVector jarg1_, long jarg2, Variable jarg2_);
  public final static native void VariableVector_doAdd__SWIG_1(long jarg1, VariableVector jarg1_, int jarg2, long jarg3, Variable jarg3_);
  public final static native long VariableVector_doRemove(long jarg1, VariableVector jarg1_, int jarg2);
  public final static native long VariableVector_doGet(long jarg1, VariableVector jarg1_, int jarg2);
  public final static native long VariableVector_doSet(long jarg1, VariableVector jarg1_, int jarg2, long jarg3, Variable jarg3_);
  public final static native void VariableVector_doRemoveRange(long jarg1, VariableVector jarg1_, int jarg2, int jarg3);
  public final static native void delete_VariableVector(long jarg1);
  public final static native long new_ExpressionVector__SWIG_0();
  public final static native long new_ExpressionVector__SWIG_1(long jarg1, ExpressionVector jarg1_);
  public final static native long ExpressionVector_capacity(long jarg1, ExpressionVector jarg1_);
  public final static native void ExpressionVector_reserve(long jarg1, ExpressionVector jarg1_, long jarg2);
  public final static native boolean ExpressionVector_isEmpty(long jarg1, ExpressionVector jarg1_);
  public final static native void ExpressionVector_clear(long jarg1, ExpressionVector jarg1_);
  public final static native long new_ExpressionVector__SWIG_2(int jarg1, long jarg2, Expression jarg2_);
  public final static native int ExpressionVector_doSize(long jarg1, ExpressionVector jarg1_);
  public final static native void ExpressionVector_doAdd__SWIG_0(long jarg1, ExpressionVector jarg1_, long jarg2, Expression jarg2_);
  public final static native void ExpressionVector_doAdd__SWIG_1(long jarg1, ExpressionVector jarg1_, int jarg2, long jarg3, Expression jarg3_);
  public final static native long ExpressionVector_doRemove(long jarg1, ExpressionVector jarg1_, int jarg2);
  public final static native long ExpressionVector_doGet(long jarg1, ExpressionVector jarg1_, int jarg2);
  public final static native long ExpressionVector_doSet(long jarg1, ExpressionVector jarg1_, int jarg2, long jarg3, Expression jarg3_);
  public final static native void ExpressionVector_doRemoveRange(long jarg1, ExpressionVector jarg1_, int jarg2, int jarg3);
  public final static native void delete_ExpressionVector(long jarg1);
  public final static native long new_ExpressionDoubleMap__SWIG_0();
  public final static native long new_ExpressionDoubleMap__SWIG_1(long jarg1, ExpressionDoubleMap jarg1_);
  public final static native long ExpressionDoubleMap_Iterator_getNextUnchecked(long jarg1, ExpressionDoubleMap.Iterator jarg1_);
  public final static native boolean ExpressionDoubleMap_Iterator_isNot(long jarg1, ExpressionDoubleMap.Iterator jarg1_, long jarg2, ExpressionDoubleMap.Iterator jarg2_);
  public final static native long ExpressionDoubleMap_Iterator_getKey(long jarg1, ExpressionDoubleMap.Iterator jarg1_);
  public final static native double ExpressionDoubleMap_Iterator_getValue(long jarg1, ExpressionDoubleMap.Iterator jarg1_);
  public final static native void ExpressionDoubleMap_Iterator_setValue(long jarg1, ExpressionDoubleMap.Iterator jarg1_, double jarg2);
  public final static native void delete_ExpressionDoubleMap_Iterator(long jarg1);
  public final static native boolean ExpressionDoubleMap_isEmpty(long jarg1, ExpressionDoubleMap jarg1_);
  public final static native void ExpressionDoubleMap_clear(long jarg1, ExpressionDoubleMap jarg1_);
  public final static native long ExpressionDoubleMap_find(long jarg1, ExpressionDoubleMap jarg1_, long jarg2, Expression jarg2_);
  public final static native long ExpressionDoubleMap_begin(long jarg1, ExpressionDoubleMap jarg1_);
  public final static native long ExpressionDoubleMap_end(long jarg1, ExpressionDoubleMap jarg1_);
  public final static native int ExpressionDoubleMap_sizeImpl(long jarg1, ExpressionDoubleMap jarg1_);
  public final static native boolean ExpressionDoubleMap_containsImpl(long jarg1, ExpressionDoubleMap jarg1_, long jarg2, Expression jarg2_);
  public final static native void ExpressionDoubleMap_putUnchecked(long jarg1, ExpressionDoubleMap jarg1_, long jarg2, Expression jarg2_, double jarg3);
  public final static native void ExpressionDoubleMap_removeUnchecked(long jarg1, ExpressionDoubleMap jarg1_, long jarg2, ExpressionDoubleMap.Iterator jarg2_);
  public final static native void delete_ExpressionDoubleMap(long jarg1);
  public final static native long new_ExpressionExpressionMap__SWIG_0();
  public final static native long new_ExpressionExpressionMap__SWIG_1(long jarg1, ExpressionExpressionMap jarg1_);
  public final static native long ExpressionExpressionMap_Iterator_getNextUnchecked(long jarg1, ExpressionExpressionMap.Iterator jarg1_);
  public final static native boolean ExpressionExpressionMap_Iterator_isNot(long jarg1, ExpressionExpressionMap.Iterator jarg1_, long jarg2, ExpressionExpressionMap.Iterator jarg2_);
  public final static native long ExpressionExpressionMap_Iterator_getKey(long jarg1, ExpressionExpressionMap.Iterator jarg1_);
  public final static native long ExpressionExpressionMap_Iterator_getValue(long jarg1, ExpressionExpressionMap.Iterator jarg1_);
  public final static native void ExpressionExpressionMap_Iterator_setValue(long jarg1, ExpressionExpressionMap.Iterator jarg1_, long jarg2, Expression jarg2_);
  public final static native void delete_ExpressionExpressionMap_Iterator(long jarg1);
  public final static native boolean ExpressionExpressionMap_isEmpty(long jarg1, ExpressionExpressionMap jarg1_);
  public final static native void ExpressionExpressionMap_clear(long jarg1, ExpressionExpressionMap jarg1_);
  public final static native long ExpressionExpressionMap_find(long jarg1, ExpressionExpressionMap jarg1_, long jarg2, Expression jarg2_);
  public final static native long ExpressionExpressionMap_begin(long jarg1, ExpressionExpressionMap jarg1_);
  public final static native long ExpressionExpressionMap_end(long jarg1, ExpressionExpressionMap jarg1_);
  public final static native int ExpressionExpressionMap_sizeImpl(long jarg1, ExpressionExpressionMap jarg1_);
  public final static native boolean ExpressionExpressionMap_containsImpl(long jarg1, ExpressionExpressionMap jarg1_, long jarg2, Expression jarg2_);
  public final static native void ExpressionExpressionMap_putUnchecked(long jarg1, ExpressionExpressionMap jarg1_, long jarg2, Expression jarg2_, long jarg3, Expression jarg3_);
  public final static native void ExpressionExpressionMap_removeUnchecked(long jarg1, ExpressionExpressionMap jarg1_, long jarg2, ExpressionExpressionMap.Iterator jarg2_);
  public final static native void delete_ExpressionExpressionMap(long jarg1);
  public final static native long new_DoubleIntPair__SWIG_0();
  public final static native long new_DoubleIntPair__SWIG_1(double jarg1, int jarg2);
  public final static native long new_DoubleIntPair__SWIG_2(long jarg1, DoubleIntPair jarg1_);
  public final static native void DoubleIntPair_first_set(long jarg1, DoubleIntPair jarg1_, double jarg2);
  public final static native double DoubleIntPair_first_get(long jarg1, DoubleIntPair jarg1_);
  public final static native void DoubleIntPair_second_set(long jarg1, DoubleIntPair jarg1_, int jarg2);
  public final static native int DoubleIntPair_second_get(long jarg1, DoubleIntPair jarg1_);
  public final static native void delete_DoubleIntPair(long jarg1);
  public final static native long new_BoxBoxPair__SWIG_0();
  public final static native long new_BoxBoxPair__SWIG_1(long jarg1, Box jarg1_, long jarg2, Box jarg2_);
  public final static native long new_BoxBoxPair__SWIG_2(long jarg1, BoxBoxPair jarg1_);
  public final static native void BoxBoxPair_first_set(long jarg1, BoxBoxPair jarg1_, long jarg2, Box jarg2_);
  public final static native long BoxBoxPair_first_get(long jarg1, BoxBoxPair jarg1_);
  public final static native void BoxBoxPair_second_set(long jarg1, BoxBoxPair jarg1_, long jarg2, Box jarg2_);
  public final static native long BoxBoxPair_second_get(long jarg1, BoxBoxPair jarg1_);
  public final static native void delete_BoxBoxPair(long jarg1);
  public final static native long new_VaribaleIntUnorderedMap__SWIG_0();
  public final static native long new_VaribaleIntUnorderedMap__SWIG_1(long jarg1, VaribaleIntUnorderedMap jarg1_);
  public final static native long VaribaleIntUnorderedMap_Iterator_getNextUnchecked(long jarg1, VaribaleIntUnorderedMap.Iterator jarg1_);
  public final static native boolean VaribaleIntUnorderedMap_Iterator_isNot(long jarg1, VaribaleIntUnorderedMap.Iterator jarg1_, long jarg2, VaribaleIntUnorderedMap.Iterator jarg2_);
  public final static native long VaribaleIntUnorderedMap_Iterator_getKey(long jarg1, VaribaleIntUnorderedMap.Iterator jarg1_);
  public final static native int VaribaleIntUnorderedMap_Iterator_getValue(long jarg1, VaribaleIntUnorderedMap.Iterator jarg1_);
  public final static native void VaribaleIntUnorderedMap_Iterator_setValue(long jarg1, VaribaleIntUnorderedMap.Iterator jarg1_, int jarg2);
  public final static native void delete_VaribaleIntUnorderedMap_Iterator(long jarg1);
  public final static native boolean VaribaleIntUnorderedMap_isEmpty(long jarg1, VaribaleIntUnorderedMap jarg1_);
  public final static native void VaribaleIntUnorderedMap_clear(long jarg1, VaribaleIntUnorderedMap jarg1_);
  public final static native long VaribaleIntUnorderedMap_find(long jarg1, VaribaleIntUnorderedMap jarg1_, long jarg2, Variable jarg2_);
  public final static native long VaribaleIntUnorderedMap_begin(long jarg1, VaribaleIntUnorderedMap jarg1_);
  public final static native long VaribaleIntUnorderedMap_end(long jarg1, VaribaleIntUnorderedMap jarg1_);
  public final static native int VaribaleIntUnorderedMap_sizeImpl(long jarg1, VaribaleIntUnorderedMap jarg1_);
  public final static native boolean VaribaleIntUnorderedMap_containsImpl(long jarg1, VaribaleIntUnorderedMap jarg1_, long jarg2, Variable jarg2_);
  public final static native void VaribaleIntUnorderedMap_putUnchecked(long jarg1, VaribaleIntUnorderedMap jarg1_, long jarg2, Variable jarg2_, int jarg3);
  public final static native void VaribaleIntUnorderedMap_removeUnchecked(long jarg1, VaribaleIntUnorderedMap jarg1_, long jarg2, VaribaleIntUnorderedMap.Iterator jarg2_);
  public final static native void delete_VaribaleIntUnorderedMap(long jarg1);
  public final static native long new_SharedPointerToVector();
  public final static native void delete_SharedPointerToVector(long jarg1);
  public final static native long new_SharedPointerToUnorderedMapWithHashValue();
  public final static native void delete_SharedPointerToUnorderedMapWithHashValue(long jarg1);
  public final static native long new_SharedPointerToUnorderedMap();
  public final static native void delete_SharedPointerToUnorderedMap(long jarg1);
  public final static native long new_Variable__SWIG_0(long jarg1, Variable jarg1_);
  public final static native long Variable_AssignOperator__SWIG_0(long jarg1, Variable jarg1_, long jarg2, Variable jarg2_);
  public final static native long new_Variable__SWIG_1();
  public final static native void delete_Variable(long jarg1);
  public final static native long new_Variable__SWIG_2(String jarg1, int jarg2);
  public final static native long new_Variable__SWIG_3(String jarg1);
  public final static native long new_Variable__SWIG_4(String jarg1, int jarg2, boolean jarg3);
  public final static native boolean Variable_is_dummy(long jarg1, Variable jarg1_);
  public final static native long Variable_get_id(long jarg1, Variable jarg1_);
  public final static native int Variable_get_type(long jarg1, Variable jarg1_);
  public final static native long Variable_get_hash(long jarg1, Variable jarg1_);
  public final static native String Variable_get_name(long jarg1, Variable jarg1_);
  public final static native String Variable_to_string(long jarg1, Variable jarg1_);
  public final static native boolean Variable_equal_to(long jarg1, Variable jarg1_, long jarg2, Variable jarg2_);
  public final static native boolean Variable_less(long jarg1, Variable jarg1_, long jarg2, Variable jarg2_);
  public final static native long InsertOperator__SWIG_0(long jarg1, long jarg2, Variable jarg2_);
  public final static native long InsertOperator__SWIG_1(long jarg1, int jarg2);
  public final static native long new_Variables__SWIG_0(long jarg1, Variables jarg1_);
  public final static native long Variables_AssignOperator__SWIG_0(long jarg1, Variables jarg1_, long jarg2, Variables jarg2_);
  public final static native long new_Variables__SWIG_1();
  public final static native void delete_Variables(long jarg1);
  public final static native long new_Variables__SWIG_2(long jarg1);
  public final static native long Variables_get_hash(long jarg1, Variables jarg1_);
  public final static native long Variables_size(long jarg1, Variables jarg1_);
  public final static native boolean Variables_empty(long jarg1, Variables jarg1_);
  public final static native String Variables_to_string(long jarg1, Variables jarg1_);
  public final static native long Variables_begin__SWIG_0(long jarg1, Variables jarg1_);
  public final static native long Variables_end__SWIG_0(long jarg1, Variables jarg1_);
  public final static native long Variables_cbegin(long jarg1, Variables jarg1_);
  public final static native long Variables_cend(long jarg1, Variables jarg1_);
  public final static native long Variables_rbegin__SWIG_0(long jarg1, Variables jarg1_);
  public final static native long Variables_rend__SWIG_0(long jarg1, Variables jarg1_);
  public final static native long Variables_crbegin(long jarg1, Variables jarg1_);
  public final static native long Variables_crend(long jarg1, Variables jarg1_);
  public final static native void Variables_insert__SWIG_0(long jarg1, Variables jarg1_, long jarg2, Variable jarg2_);
  public final static native void Variables_insert__SWIG_2(long jarg1, Variables jarg1_, long jarg2, Variables jarg2_);
  public final static native long Variables_erase__SWIG_0(long jarg1, Variables jarg1_, long jarg2, Variable jarg2_);
  public final static native long Variables_erase__SWIG_1(long jarg1, Variables jarg1_, long jarg2, Variables jarg2_);
  public final static native long Variables_find__SWIG_0(long jarg1, Variables jarg1_, long jarg2, Variable jarg2_);
  public final static native boolean Variables_include(long jarg1, Variables jarg1_, long jarg2, Variable jarg2_);
  public final static native boolean Variables_IsSubsetOf(long jarg1, Variables jarg1_, long jarg2, Variables jarg2_);
  public final static native boolean Variables_IsSupersetOf(long jarg1, Variables jarg1_, long jarg2, Variables jarg2_);
  public final static native boolean Variables_IsStrictSubsetOf(long jarg1, Variables jarg1_, long jarg2, Variables jarg2_);
  public final static native boolean Variables_IsStrictSupersetOf(long jarg1, Variables jarg1_, long jarg2, Variables jarg2_);
  public final static native boolean Equal__SWIG_0(long jarg1, Variables jarg1_, long jarg2, Variables jarg2_);
  public final static native boolean Less__SWIG_0(long jarg1, Variables jarg1_, long jarg2, Variables jarg2_);
  public final static native long InsertOperator__SWIG_2(long jarg1, long jarg2, Variables jarg2_);
  public final static native long intersect(long jarg1, Variables jarg1_, long jarg2, Variables jarg2_);
  public final static native long AddEqual__SWIG_0(long jarg1, Variables jarg1_, long jarg2, Variables jarg2_);
  public final static native long AddEqual__SWIG_1(long jarg1, Variables jarg1_, long jarg2, Variable jarg2_);
  public final static native long Add__SWIG_0(long jarg1, Variables jarg1_, long jarg2, Variables jarg2_);
  public final static native long Add__SWIG_1(long jarg1, Variables jarg1_, long jarg2, Variable jarg2_);
  public final static native long Add__SWIG_2(long jarg1, Variable jarg1_, long jarg2, Variables jarg2_);
  public final static native long SubstractEqual__SWIG_0(long jarg1, Variables jarg1_, long jarg2, Variables jarg2_);
  public final static native long SubstractEqual__SWIG_1(long jarg1, Variables jarg1_, long jarg2, Variable jarg2_);
  public final static native long Substract__SWIG_0(long jarg1, Variables jarg1_, long jarg2, Variables jarg2_);
  public final static native long Substract__SWIG_1(long jarg1, Variables jarg1_, long jarg2, Variable jarg2_);
  public final static native long new_Environment__SWIG_0(long jarg1, Environment jarg1_);
  public final static native long Environment_AssignOperator__SWIG_0(long jarg1, Environment jarg1_, long jarg2, Environment jarg2_);
  public final static native long new_Environment__SWIG_1();
  public final static native void delete_Environment(long jarg1);
  public final static native long new_Environment__SWIG_2(long jarg1);
  public final static native long new_Environment__SWIG_3(long jarg1);
  public final static native long new_Environment__SWIG_4(long jarg1);
  public final static native long Environment_begin__SWIG_0(long jarg1, Environment jarg1_);
  public final static native long Environment_end__SWIG_0(long jarg1, Environment jarg1_);
  public final static native long Environment_cbegin(long jarg1, Environment jarg1_);
  public final static native long Environment_cend(long jarg1, Environment jarg1_);
  public final static native void Environment_insert(long jarg1, Environment jarg1_, long jarg2, Variable jarg2_, double jarg3);
  public final static native boolean Environment_empty(long jarg1, Environment jarg1_);
  public final static native long Environment_size(long jarg1, Environment jarg1_);
  public final static native long Environment_find__SWIG_0(long jarg1, Environment jarg1_, long jarg2, Variable jarg2_);
  public final static native long Environment_domain(long jarg1, Environment jarg1_);
  public final static native String Environment_to_string(long jarg1, Environment jarg1_);
  public final static native long Environment_Indexing__SWIG_0(long jarg1, Environment jarg1_, long jarg2, Variable jarg2_);
  public final static native long InsertOperator__SWIG_3(long jarg1, long jarg2, Environment jarg2_);
  public final static native boolean Less__SWIG_1(int jarg1, int jarg2);
  public final static native long new_Expression__SWIG_0(long jarg1, Expression jarg1_);
  public final static native long Expression_AssignOperator__SWIG_0(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native void delete_Expression(long jarg1);
  public final static native long new_Expression__SWIG_1();
  public final static native long new_Expression__SWIG_2(double jarg1);
  public final static native long new_Expression__SWIG_3(long jarg1, Variable jarg1_);
  public final static native int Expression_get_kind(long jarg1, Expression jarg1_);
  public final static native long Expression_get_hash(long jarg1, Expression jarg1_);
  public final static native long Expression_GetVariables(long jarg1, Expression jarg1_);
  public final static native boolean Expression_EqualTo(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native boolean Expression_Less(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native boolean Expression_is_polynomial(long jarg1, Expression jarg1_);
  public final static native boolean Expression_include_ite(long jarg1, Expression jarg1_);
  public final static native double Expression_Evaluate__SWIG_0(long jarg1, Expression jarg1_, long jarg2, Environment jarg2_);
  public final static native double Expression_Evaluate__SWIG_1(long jarg1, Expression jarg1_);
  public final static native long Expression_EvaluatePartial(long jarg1, Expression jarg1_, long jarg2, Environment jarg2_);
  public final static native long Expression_Expand(long jarg1, Expression jarg1_);
  public final static native long Expression_Substitute__SWIG_0(long jarg1, Expression jarg1_, long jarg2, Variable jarg2_, long jarg3, Expression jarg3_);
  public final static native long Expression_Substitute__SWIG_1(long jarg1, Expression jarg1_, long jarg2, long jarg3);
  public final static native long Expression_Substitute__SWIG_2(long jarg1, Expression jarg1_, long jarg2);
  public final static native long Expression_Substitute__SWIG_3(long jarg1, Expression jarg1_, long jarg2);
  public final static native long Expression_Differentiate(long jarg1, Expression jarg1_, long jarg2, Variable jarg2_);
  public final static native String Expression_to_string(long jarg1, Expression jarg1_);
  public final static native long Expression_Zero();
  public final static native long Expression_One();
  public final static native long Expression_Pi();
  public final static native long Expression_E();
  public final static native long Expression_NaN();
  public final static native long Add__SWIG_3(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long AddEqual__SWIG_2(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long Expression_Increment__SWIG_0(long jarg1, Expression jarg1_);
  public final static native long Expression_Increment__SWIG_1(long jarg1, Expression jarg1_, int jarg2);
  public final static native long Substract__SWIG_2(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long SubstractEqual__SWIG_2(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long Add__SWIG_7(long jarg1, Expression jarg1_);
  public final static native long Substract__SWIG_6(long jarg1, Expression jarg1_);
  public final static native long Expression_Decrement__SWIG_0(long jarg1, Expression jarg1_);
  public final static native long Expression_Decrement__SWIG_1(long jarg1, Expression jarg1_, int jarg2);
  public final static native long Multiply__SWIG_0(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long MultiplyEqual(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long Divide(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long DivideEqual(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long real_constant(double jarg1, double jarg2, boolean jarg3);
  public final static native long log(long jarg1, Expression jarg1_);
  public final static native long abs(long jarg1, Expression jarg1_);
  public final static native long exp(long jarg1, Expression jarg1_);
  public final static native long sqrt(long jarg1, Expression jarg1_);
  public final static native long pow(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long sin(long jarg1, Expression jarg1_);
  public final static native long cos(long jarg1, Expression jarg1_);
  public final static native long tan(long jarg1, Expression jarg1_);
  public final static native long asin(long jarg1, Expression jarg1_);
  public final static native long acos(long jarg1, Expression jarg1_);
  public final static native long atan(long jarg1, Expression jarg1_);
  public final static native long atan2(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long sinh(long jarg1, Expression jarg1_);
  public final static native long cosh(long jarg1, Expression jarg1_);
  public final static native long tanh(long jarg1, Expression jarg1_);
  public final static native long min(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long max(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long if_then_else(long jarg1, Formula jarg1_, long jarg2, Expression jarg2_, long jarg3, Expression jarg3_);
  public final static native long uninterpreted_function(String jarg1, long jarg2, Variables jarg2_);
  public final static native long InsertOperator__SWIG_4(long jarg1, long jarg2, Expression jarg2_);
  public final static native boolean is_constant__SWIG_0(long jarg1, Expression jarg1_);
  public final static native boolean is_real_constant(long jarg1, Expression jarg1_);
  public final static native boolean is_variable__SWIG_0(long jarg1, Expression jarg1_);
  public final static native boolean is_addition(long jarg1, Expression jarg1_);
  public final static native boolean is_multiplication(long jarg1, Expression jarg1_);
  public final static native boolean is_division(long jarg1, Expression jarg1_);
  public final static native boolean is_log(long jarg1, Expression jarg1_);
  public final static native boolean is_abs(long jarg1, Expression jarg1_);
  public final static native boolean is_exp(long jarg1, Expression jarg1_);
  public final static native boolean is_sqrt(long jarg1, Expression jarg1_);
  public final static native boolean is_pow(long jarg1, Expression jarg1_);
  public final static native boolean is_sin(long jarg1, Expression jarg1_);
  public final static native boolean is_cos(long jarg1, Expression jarg1_);
  public final static native boolean is_tan(long jarg1, Expression jarg1_);
  public final static native boolean is_asin(long jarg1, Expression jarg1_);
  public final static native boolean is_acos(long jarg1, Expression jarg1_);
  public final static native boolean is_atan(long jarg1, Expression jarg1_);
  public final static native boolean is_atan2(long jarg1, Expression jarg1_);
  public final static native boolean is_sinh(long jarg1, Expression jarg1_);
  public final static native boolean is_cosh(long jarg1, Expression jarg1_);
  public final static native boolean is_tanh(long jarg1, Expression jarg1_);
  public final static native boolean is_min(long jarg1, Expression jarg1_);
  public final static native boolean is_max(long jarg1, Expression jarg1_);
  public final static native boolean is_if_then_else(long jarg1, Expression jarg1_);
  public final static native boolean is_uninterpreted_function(long jarg1, Expression jarg1_);
  public final static native long Sum(long jarg1, ExpressionVector jarg1_);
  public final static native long Prod(long jarg1, ExpressionVector jarg1_);
  public final static native void swap(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native boolean is_constant__SWIG_1(long jarg1, Expression jarg1_, double jarg2);
  public final static native boolean is_zero(long jarg1, Expression jarg1_);
  public final static native boolean is_one(long jarg1, Expression jarg1_);
  public final static native boolean is_neg_one(long jarg1, Expression jarg1_);
  public final static native boolean is_two(long jarg1, Expression jarg1_);
  public final static native boolean is_nan(long jarg1, Expression jarg1_);
  public final static native double get_constant_value(long jarg1, Expression jarg1_);
  public final static native double get_lb_of_real_constant(long jarg1, Expression jarg1_);
  public final static native double get_ub_of_real_constant(long jarg1, Expression jarg1_);
  public final static native long get_variable__SWIG_0(long jarg1, Expression jarg1_);
  public final static native long get_argument(long jarg1, Expression jarg1_);
  public final static native long get_first_argument(long jarg1, Expression jarg1_);
  public final static native long get_second_argument(long jarg1, Expression jarg1_);
  public final static native double get_constant_in_addition(long jarg1, Expression jarg1_);
  public final static native long get_expr_to_coeff_map_in_addition(long jarg1, Expression jarg1_);
  public final static native double get_constant_in_multiplication(long jarg1, Expression jarg1_);
  public final static native long get_base_to_exponent_map_in_multiplication(long jarg1, Expression jarg1_);
  public final static native long get_conditional_formula(long jarg1, Expression jarg1_);
  public final static native long get_then_expression(long jarg1, Expression jarg1_);
  public final static native long get_else_expression(long jarg1, Expression jarg1_);
  public final static native String get_uninterpreted_function_name(long jarg1, Expression jarg1_);
  public final static native long Add__SWIG_8(long jarg1, Variable jarg1_);
  public final static native long Substract__SWIG_8(long jarg1, Variable jarg1_);
  public final static native boolean Less__SWIG_2(int jarg1, int jarg2);
  public final static native long new_Formula__SWIG_0();
  public final static native long new_Formula__SWIG_1(long jarg1, Formula jarg1_);
  public final static native long Formula_AssignOperator__SWIG_0(long jarg1, Formula jarg1_, long jarg2, Formula jarg2_);
  public final static native void delete_Formula(long jarg1);
  public final static native long new_Formula__SWIG_2(long jarg1, Variable jarg1_);
  public final static native int Formula_get_kind(long jarg1, Formula jarg1_);
  public final static native long Formula_get_hash(long jarg1, Formula jarg1_);
  public final static native long Formula_GetFreeVariables(long jarg1, Formula jarg1_);
  public final static native boolean Formula_EqualTo(long jarg1, Formula jarg1_, long jarg2, Formula jarg2_);
  public final static native boolean Formula_Less(long jarg1, Formula jarg1_, long jarg2, Formula jarg2_);
  public final static native boolean Formula_Evaluate__SWIG_0(long jarg1, Formula jarg1_, long jarg2, Environment jarg2_);
  public final static native boolean Formula_Evaluate__SWIG_1(long jarg1, Formula jarg1_);
  public final static native long Formula_Substitute__SWIG_0(long jarg1, Formula jarg1_, long jarg2, Variable jarg2_, long jarg3, Expression jarg3_);
  public final static native long Formula_Substitute__SWIG_1(long jarg1, Formula jarg1_, long jarg2, Variable jarg2_, long jarg3, Formula jarg3_);
  public final static native long Formula_Substitute__SWIG_2(long jarg1, Formula jarg1_, long jarg2, long jarg3);
  public final static native long Formula_Substitute__SWIG_3(long jarg1, Formula jarg1_, long jarg2);
  public final static native long Formula_Substitute__SWIG_4(long jarg1, Formula jarg1_, long jarg2);
  public final static native String Formula_to_string(long jarg1, Formula jarg1_);
  public final static native long Formula_True();
  public final static native long Formula_False();
  public final static native boolean Formula_BoolOperator(long jarg1, Formula jarg1_);
  public final static native long InsertOperator__SWIG_5(long jarg1, long jarg2, Formula jarg2_);
  public final static native boolean is_false(long jarg1, Formula jarg1_);
  public final static native boolean is_true(long jarg1, Formula jarg1_);
  public final static native boolean is_variable__SWIG_1(long jarg1, Formula jarg1_);
  public final static native boolean is_equal_to(long jarg1, Formula jarg1_);
  public final static native boolean is_not_equal_to(long jarg1, Formula jarg1_);
  public final static native boolean is_greater_than(long jarg1, Formula jarg1_);
  public final static native boolean is_greater_than_or_equal_to(long jarg1, Formula jarg1_);
  public final static native boolean is_less_than(long jarg1, Formula jarg1_);
  public final static native boolean is_less_than_or_equal_to(long jarg1, Formula jarg1_);
  public final static native boolean is_relational(long jarg1, Formula jarg1_);
  public final static native boolean is_conjunction(long jarg1, Formula jarg1_);
  public final static native boolean is_disjunction(long jarg1, Formula jarg1_);
  public final static native boolean is_negation(long jarg1, Formula jarg1_);
  public final static native boolean is_forall(long jarg1, Formula jarg1_);
  public final static native long Formula_make_conjunction(long jarg1, Formula jarg1_, long jarg2, Formula jarg2_);
  public final static native long Formula_make_disjunction(long jarg1, Formula jarg1_, long jarg2, Formula jarg2_);
  public final static native long Not__SWIG_0(long jarg1, Formula jarg1_);
  public final static native long Equal__SWIG_1(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long NotEqual__SWIG_0(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long Less__SWIG_3(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long LessEqual(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long Grater(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native long GraterEqual(long jarg1, Expression jarg1_, long jarg2, Expression jarg2_);
  public final static native boolean Formula_include_ite(long jarg1, Formula jarg1_);
  public final static native long forall(long jarg1, Variables jarg1_, long jarg2, Formula jarg2_);
  public final static native long And__SWIG_0(long jarg1, Formula jarg1_, long jarg2, Formula jarg2_);
  public final static native long And__SWIG_4(long jarg1, Variable jarg1_, long jarg2, Formula jarg2_);
  public final static native long And__SWIG_6(long jarg1, Formula jarg1_, long jarg2, Variable jarg2_);
  public final static native long And__SWIG_8(long jarg1, Variable jarg1_, long jarg2, Variable jarg2_);
  public final static native long Or__SWIG_0(long jarg1, Formula jarg1_, long jarg2, Formula jarg2_);
  public final static native long Or__SWIG_4(long jarg1, Variable jarg1_, long jarg2, Formula jarg2_);
  public final static native long Or__SWIG_6(long jarg1, Formula jarg1_, long jarg2, Variable jarg2_);
  public final static native long Or__SWIG_8(long jarg1, Variable jarg1_, long jarg2, Variable jarg2_);
  public final static native long Not__SWIG_1(long jarg1, Variable jarg1_);
  public final static native long Equal__SWIG_2(long jarg1, Variable jarg1_, long jarg2, Variable jarg2_);
  public final static native long Equal__SWIG_3(long jarg1, Formula jarg1_, long jarg2, Formula jarg2_);
  public final static native long Equal__SWIG_4(long jarg1, Variable jarg1_, long jarg2, Formula jarg2_);
  public final static native long Equal__SWIG_5(long jarg1, Formula jarg1_, long jarg2, Variable jarg2_);
  public final static native long NotEqual__SWIG_1(long jarg1, Variable jarg1_, long jarg2, Variable jarg2_);
  public final static native long NotEqual__SWIG_2(long jarg1, Formula jarg1_, long jarg2, Formula jarg2_);
  public final static native long NotEqual__SWIG_3(long jarg1, Variable jarg1_, long jarg2, Formula jarg2_);
  public final static native long NotEqual__SWIG_4(long jarg1, Formula jarg1_, long jarg2, Variable jarg2_);
  public final static native boolean is_nary(long jarg1, Formula jarg1_);
  public final static native long get_variable__SWIG_1(long jarg1, Formula jarg1_);
  public final static native long get_lhs_expression(long jarg1, Formula jarg1_);
  public final static native long get_rhs_expression(long jarg1, Formula jarg1_);
  public final static native long get_operands(long jarg1, Formula jarg1_);
  public final static native long get_operand(long jarg1, Formula jarg1_);
  public final static native long get_quantified_variables(long jarg1, Formula jarg1_);
  public final static native long get_quantified_formula(long jarg1, Formula jarg1_);
  public final static native long logic_and(long jarg1, Formula jarg1_, long jarg2, Formula jarg2_);
  public final static native long imply__SWIG_0(long jarg1, Formula jarg1_, long jarg2, Formula jarg2_);
  public final static native long imply__SWIG_1(long jarg1, Variable jarg1_, long jarg2, Formula jarg2_);
  public final static native long imply__SWIG_2(long jarg1, Formula jarg1_, long jarg2, Variable jarg2_);
  public final static native long imply__SWIG_3(long jarg1, Variable jarg1_, long jarg2, Variable jarg2_);
  public final static native long iff__SWIG_0(long jarg1, Formula jarg1_, long jarg2, Formula jarg2_);
  public final static native long iff__SWIG_1(long jarg1, Variable jarg1_, long jarg2, Formula jarg2_);
  public final static native long iff__SWIG_2(long jarg1, Formula jarg1_, long jarg2, Variable jarg2_);
  public final static native long iff__SWIG_3(long jarg1, Variable jarg1_, long jarg2, Variable jarg2_);
  public final static native long map(long jarg1, FormulaSet jarg1_, long jarg2);
  public final static native boolean is_atomic(long jarg1, Formula jarg1_);
  public final static native boolean is_clause(long jarg1, Formula jarg1_);
  public final static native long get_clauses(long jarg1, Formula jarg1_);
  public final static native boolean is_cnf(long jarg1, Formula jarg1_);
  public final static native boolean HaveIntersection(long jarg1, Variables jarg1_, long jarg2, Variables jarg2_);
  public final static native long DeltaStrengthen(long jarg1, Formula jarg1_, double jarg2);
  public final static native long DeltaWeaken(long jarg1, Formula jarg1_, double jarg2);
  public final static native boolean IsDifferentiable__SWIG_0(long jarg1, Formula jarg1_);
  public final static native boolean IsDifferentiable__SWIG_1(long jarg1, Expression jarg1_);
  public final static native long make_conjunction(long jarg1, FormulaVector jarg1_);
  public final static native long make_disjunction(long jarg1, FormulaVector jarg1_);
  public final static native long CreateVector__SWIG_0(String jarg1, int jarg2, int jarg3);
  public final static native long CreateVector__SWIG_1(String jarg1, int jarg2);
  public final static native int Not(int jarg1);
  public final static native long InsertOperator__SWIG_6(long jarg1, int jarg2);
  public final static native int parse_logic(String jarg1);
  public final static native long InsertOperator__SWIG_7(long jarg1, int jarg2);
  public final static native long new_Box__SWIG_0();
  public final static native long new_Box__SWIG_1(long jarg1, VariableVector jarg1_);
  public final static native long new_Box__SWIG_2(long jarg1, Box jarg1_);
  public final static native long Box_AssignOperator__SWIG_0(long jarg1, Box jarg1_, long jarg2, Box jarg2_);
  public final static native void delete_Box(long jarg1);
  public final static native void Box_Add__SWIG_0(long jarg1, Box jarg1_, long jarg2, Variable jarg2_);
  public final static native void Box_Add__SWIG_1(long jarg1, Box jarg1_, long jarg2, Variable jarg2_, double jarg3, double jarg4);
  public final static native boolean Box_empty(long jarg1, Box jarg1_);
  public final static native void Box_set_empty(long jarg1, Box jarg1_);
  public final static native int Box_size(long jarg1, Box jarg1_);
  public final static native long Box_Indexing__SWIG_0(long jarg1, Box jarg1_, int jarg2);
  public final static native long Box_Indexing__SWIG_1(long jarg1, Box jarg1_, long jarg2, Variable jarg2_);
  public final static native long Box_variables(long jarg1, Box jarg1_);
  public final static native long Box_variable(long jarg1, Box jarg1_, int jarg2);
  public final static native boolean Box_has_variable(long jarg1, Box jarg1_, long jarg2, Variable jarg2_);
  public final static native long Box_interval_vector(long jarg1, Box jarg1_);
  public final static native long Box_mutable_interval_vector(long jarg1, Box jarg1_);
  public final static native int Box_index(long jarg1, Box jarg1_, long jarg2, Variable jarg2_);
  public final static native long Box_MaxDiam(long jarg1, Box jarg1_);
  public final static native long Box_bisect__SWIG_0(long jarg1, Box jarg1_, int jarg2);
  public final static native long Box_bisect__SWIG_1(long jarg1, Box jarg1_, long jarg2, Variable jarg2_);
  public final static native long Box_InplaceUnion(long jarg1, Box jarg1_, long jarg2, Box jarg2_);
  public final static native long InsertOperator__SWIG_8(long jarg1, long jarg2, Box jarg2_);
  public final static native boolean Equal(long jarg1, Box jarg1_, long jarg2, Box jarg2_);
  public final static native boolean NotEqual(long jarg1, Box jarg1_, long jarg2, Box jarg2_);
  public final static native long DisplayDiff(long jarg1, long jarg2, VariableVector jarg2_, long jarg3, long jarg4);
  public final static native long new_OptionValueBool__SWIG_0(boolean jarg1);
  public final static native long new_OptionValueBool__SWIG_1(long jarg1, OptionValueBool jarg1_);
  public final static native long OptionValueBool_AssignOperator__SWIG_0(long jarg1, OptionValueBool jarg1_, long jarg2, OptionValueBool jarg2_);
  public final static native void delete_OptionValueBool(long jarg1);
  public final static native long OptionValueBool_AssignOperator__SWIG_2(long jarg1, OptionValueBool jarg1_, boolean jarg2);
  public final static native long OptionValueBool_AssignOperator__SWIG_3(long jarg1, OptionValueBool jarg1_, long jarg2);
  public final static native boolean OptionValueBool_get(long jarg1, OptionValueBool jarg1_);
  public final static native void OptionValueBool_set_from_command_line(long jarg1, OptionValueBool jarg1_, boolean jarg2);
  public final static native void OptionValueBool_set_from_file(long jarg1, OptionValueBool jarg1_, boolean jarg2);
  public final static native long new_OptionValueInt__SWIG_0(int jarg1);
  public final static native long new_OptionValueInt__SWIG_1(long jarg1, OptionValueInt jarg1_);
  public final static native long OptionValueInt_AssignOperator__SWIG_0(long jarg1, OptionValueInt jarg1_, long jarg2, OptionValueInt jarg2_);
  public final static native void delete_OptionValueInt(long jarg1);
  public final static native long OptionValueInt_AssignOperator__SWIG_2(long jarg1, OptionValueInt jarg1_, int jarg2);
  public final static native long OptionValueInt_AssignOperator__SWIG_3(long jarg1, OptionValueInt jarg1_, long jarg2);
  public final static native int OptionValueInt_get(long jarg1, OptionValueInt jarg1_);
  public final static native void OptionValueInt_set_from_command_line(long jarg1, OptionValueInt jarg1_, int jarg2);
  public final static native void OptionValueInt_set_from_file(long jarg1, OptionValueInt jarg1_, int jarg2);
  public final static native long new_OptionValueDouble__SWIG_0(double jarg1);
  public final static native long new_OptionValueDouble__SWIG_1(long jarg1, OptionValueDouble jarg1_);
  public final static native long OptionValueDouble_AssignOperator__SWIG_0(long jarg1, OptionValueDouble jarg1_, long jarg2, OptionValueDouble jarg2_);
  public final static native void delete_OptionValueDouble(long jarg1);
  public final static native long OptionValueDouble_AssignOperator__SWIG_2(long jarg1, OptionValueDouble jarg1_, double jarg2);
  public final static native long OptionValueDouble_AssignOperator__SWIG_3(long jarg1, OptionValueDouble jarg1_, long jarg2);
  public final static native double OptionValueDouble_get(long jarg1, OptionValueDouble jarg1_);
  public final static native void OptionValueDouble_set_from_command_line(long jarg1, OptionValueDouble jarg1_, double jarg2);
  public final static native void OptionValueDouble_set_from_file(long jarg1, OptionValueDouble jarg1_, double jarg2);
  public final static native long new_OptionValueUnsignedInt__SWIG_0(long jarg1);
  public final static native long new_OptionValueUnsignedInt__SWIG_1(long jarg1, OptionValueUnsignedInt jarg1_);
  public final static native long OptionValueUnsignedInt_AssignOperator__SWIG_0(long jarg1, OptionValueUnsignedInt jarg1_, long jarg2, OptionValueUnsignedInt jarg2_);
  public final static native void delete_OptionValueUnsignedInt(long jarg1);
  public final static native long OptionValueUnsignedInt_AssignOperator__SWIG_2(long jarg1, OptionValueUnsignedInt jarg1_, long jarg2);
  public final static native long OptionValueUnsignedInt_get(long jarg1, OptionValueUnsignedInt jarg1_);
  public final static native void OptionValueUnsignedInt_set_from_command_line(long jarg1, OptionValueUnsignedInt jarg1_, long jarg2);
  public final static native void OptionValueUnsignedInt_set_from_file(long jarg1, OptionValueUnsignedInt jarg1_, long jarg2);
  public final static native long new_Config__SWIG_0();
  public final static native long new_Config__SWIG_1(long jarg1, Config jarg1_);
  public final static native long Config_AssignOperator__SWIG_0(long jarg1, Config jarg1_, long jarg2, Config jarg2_);
  public final static native void delete_Config(long jarg1);
  public final static native double Config_precision(long jarg1, Config jarg1_);
  public final static native long Config_mutable_precision(long jarg1, Config jarg1_);
  public final static native boolean Config_produce_models(long jarg1, Config jarg1_);
  public final static native long Config_mutable_produce_models(long jarg1, Config jarg1_);
  public final static native boolean Config_use_polytope(long jarg1, Config jarg1_);
  public final static native long Config_mutable_use_polytope(long jarg1, Config jarg1_);
  public final static native boolean Config_use_polytope_in_forall(long jarg1, Config jarg1_);
  public final static native long Config_mutable_use_polytope_in_forall(long jarg1, Config jarg1_);
  public final static native boolean Config_use_worklist_fixpoint(long jarg1, Config jarg1_);
  public final static native long Config_mutable_use_worklist_fixpoint(long jarg1, Config jarg1_);
  public final static native boolean Config_use_local_optimization(long jarg1, Config jarg1_);
  public final static native long Config_mutable_use_local_optimization(long jarg1, Config jarg1_);
  public final static native boolean Config_dump_theory_literals(long jarg1, Config jarg1_);
  public final static native long Config_mutable_dump_theory_literals(long jarg1, Config jarg1_);
  public final static native int Config_number_of_jobs(long jarg1, Config jarg1_);
  public final static native long Config_mutable_number_of_jobs(long jarg1, Config jarg1_);
  public final static native boolean Config_stack_left_box_first(long jarg1, Config jarg1_);
  public final static native long Config_mutable_stack_left_box_first(long jarg1, Config jarg1_);
  public final static native long Config_brancher(long jarg1, Config jarg1_);
  public final static native long Config_mutable_brancher(long jarg1, Config jarg1_);
  public final static native double Config_nlopt_ftol_rel(long jarg1, Config jarg1_);
  public final static native long Config_mutable_nlopt_ftol_rel(long jarg1, Config jarg1_);
  public final static native double Config_nlopt_ftol_abs(long jarg1, Config jarg1_);
  public final static native long Config_mutable_nlopt_ftol_abs(long jarg1, Config jarg1_);
  public final static native int Config_nlopt_maxeval(long jarg1, Config jarg1_);
  public final static native long Config_mutable_nlopt_maxeval(long jarg1, Config jarg1_);
  public final static native double Config_nlopt_maxtime(long jarg1, Config jarg1_);
  public final static native long Config_mutable_nlopt_maxtime(long jarg1, Config jarg1_);
  public final static native int Config_SatDefaultPhase_False_get();
  public final static native int Config_SatDefaultPhase_True_get();
  public final static native int Config_SatDefaultPhase_JeroslowWang_get();
  public final static native int Config_SatDefaultPhase_RandomInitialPhase_get();
  public final static native int Config_sat_default_phase(long jarg1, Config jarg1_);
  public final static native long Config_mutable_sat_default_phase(long jarg1, Config jarg1_);
  public final static native long Config_random_seed(long jarg1, Config jarg1_);
  public final static native long Config_mutable_random_seed(long jarg1, Config jarg1_);
  public final static native boolean Config_smtlib2_compliant(long jarg1, Config jarg1_);
  public final static native long Config_mutable_smtlib2_compliant(long jarg1, Config jarg1_);
  public final static native double Config_kDefaultPrecision_get();
  public final static native double Config_kDefaultNloptFtolRel_get();
  public final static native double Config_kDefaultNloptFtolAbs_get();
  public final static native int Config_kDefaultNloptMaxEval_get();
  public final static native double Config_kDefaultNloptMaxTime_get();
  public final static native long InsertOperator__SWIG_9(long jarg1, int jarg2);
  public final static native long InsertOperator__SWIG_22(long jarg1, long jarg2, Config jarg2_);
  public final static native boolean CheckSatisfiability__SWIG_0(long jarg1, Formula jarg1_, double jarg2, long jarg3, Box jarg3_);
  public final static native boolean CheckSatisfiability__SWIG_1(long jarg1, Formula jarg1_, long jarg2, Config jarg2_, long jarg3, Box jarg3_);
  public final static native boolean Minimize__SWIG_0(long jarg1, Expression jarg1_, long jarg2, Formula jarg2_, double jarg3, long jarg4, Box jarg4_);
  public final static native boolean Minimize__SWIG_1(long jarg1, Expression jarg1_, long jarg2, Formula jarg2_, long jarg3, Config jarg3_, long jarg4, Box jarg4_);
  public final static native long new_Context__SWIG_0();
  public final static native long new_Context__SWIG_1(long jarg1, Context jarg1_);
  public final static native void delete_Context(long jarg1);
  public final static native long new_Context__SWIG_2(long jarg1, Config jarg1_);
  public final static native void Context_Assert(long jarg1, Context jarg1_, long jarg2, Formula jarg2_);
  public final static native long Context_CheckSat(long jarg1, Context jarg1_);
  public final static native void Context_DeclareVariable__SWIG_0(long jarg1, Context jarg1_, long jarg2, Variable jarg2_, boolean jarg3);
  public final static native void Context_DeclareVariable__SWIG_1(long jarg1, Context jarg1_, long jarg2, Variable jarg2_);
  public final static native void Context_DeclareVariable__SWIG_2(long jarg1, Context jarg1_, long jarg2, Variable jarg2_, long jarg3, Expression jarg3_, long jarg4, Expression jarg4_, boolean jarg5);
  public final static native void Context_DeclareVariable__SWIG_3(long jarg1, Context jarg1_, long jarg2, Variable jarg2_, long jarg3, Expression jarg3_, long jarg4, Expression jarg4_);
  public final static native void Context_Exit();
  public final static native void Context_Minimize__SWIG_0(long jarg1, Context jarg1_, long jarg2, Expression jarg2_);
  public final static native void Context_Minimize__SWIG_1(long jarg1, Context jarg1_, long jarg2, ExpressionVector jarg2_);
  public final static native void Context_Maximize(long jarg1, Context jarg1_, long jarg2, Expression jarg2_);
  public final static native void Context_Pop(long jarg1, Context jarg1_, int jarg2);
  public final static native void Context_Push(long jarg1, Context jarg1_, int jarg2);
  public final static native void Context_SetInfo__SWIG_0(long jarg1, Context jarg1_, String jarg2, double jarg3);
  public final static native void Context_SetInfo__SWIG_1(long jarg1, Context jarg1_, String jarg2, String jarg3);
  public final static native void Context_SetInterval(long jarg1, Context jarg1_, long jarg2, Variable jarg2_, double jarg3, double jarg4);
  public final static native void Context_SetLogic(long jarg1, Context jarg1_, int jarg2);
  public final static native void Context_SetOption__SWIG_0(long jarg1, Context jarg1_, String jarg2, double jarg3);
  public final static native void Context_SetOption__SWIG_1(long jarg1, Context jarg1_, String jarg2, String jarg3);
  public final static native long Context_GetOption(long jarg1, Context jarg1_, String jarg2);
  public final static native long Context_config(long jarg1, Context jarg1_);
  public final static native long Context_mutable_config(long jarg1, Context jarg1_);
  public final static native String Context_version();
  public final static native long Context_assertions(long jarg1, Context jarg1_);
  public final static native long Context_box(long jarg1, Context jarg1_);
  public final static native long Context_get_model(long jarg1, Context jarg1_);

  // for VariableSet, added later
  public final static native void VariableSet_Iterator_incrementUnchecked(long jarg1, VariableSet.Iterator jarg1_);
  public final static native long VariableSet_Iterator_derefUnchecked(long jarg1, VariableSet.Iterator jarg1_);
  public final static native boolean VariableSet_Iterator_isNot(long jarg1, VariableSet.Iterator jarg1_, long jarg2, VariableSet.Iterator jarg2_);
  public final static native void delete_VariableSet_Iterator(long jarg1);
  public final static native long new_VariableSet__SWIG_0();
  public final static native long new_VariableSet__SWIG_1(long jarg1, VariableSet jarg1_);
  public final static native boolean VariableSet_isEmpty(long jarg1, VariableSet jarg1_);
  public final static native void VariableSet_clear(long jarg1, VariableSet jarg1_);
  public final static native long VariableSet_begin(long jarg1, VariableSet jarg1_);
  public final static native long VariableSet_end(long jarg1, VariableSet jarg1_);
  public final static native boolean VariableSet_addImpl(long jarg1, VariableSet jarg1_, long jarg2, Variable jarg2_);
  public final static native boolean VariableSet_containsImpl(long jarg1, VariableSet jarg1_, long jarg2, Variable jarg2_);
  public final static native boolean VariableSet_removeImpl(long jarg1, VariableSet jarg1_, long jarg2, Variable jarg2_);
  public final static native int VariableSet_sizeImpl(long jarg1, VariableSet jarg1_);
  public final static native boolean VariableSet_hasNextImpl(long jarg1, VariableSet jarg1_, long jarg2, VariableSet.Iterator jarg2_);
  public final static native void delete_VariableSet(long jarg1);

  // self written:
  public final static native void Config_mutable_precision_0(double value, long config);
  public final static native void Config_mutable_produce_models_0(boolean bool, long config);
  public final static native void Config_mutable_use_polytope_0(boolean bool, long config);
  public final static native void Config_mutable_use_polytope_in_forall_0(boolean bool,  long config);
  public final static native void Config_mutable_use_worklist_fixpoint_0(boolean bool, long config);
  public final static native void Config_mutable_use_local_optimization_0(boolean bool,  long config);
  public final static native void Config_mutable_dump_theory_literals_0(boolean bool, long config);
  public final static native void Config_mutable_number_of_jobs_0(int i, long config);
  public final static native void Config_mutable_stack_left_box_first_0(boolean bool, long config);
  public final static native void Config_mutable_nlopt_ftol_rel_0(double value, long config);
  public final static native void Config_mutable_nlopt_ftol_abs_0(double value, long config);
  public final static native void Config_mutable_nlopt_maxeval_0(int i, long config);
  public final static native void Config_mutable_nlopt_maxtime_0(double value, long config);
  public final static native void Config_mutable_random_seed_0(long seed,  long config);
  public final static native void Config_mutable_smtlib2_compliant_0(boolean bool, long config);
  public final static native void Context_declareVariables(long context, long formula);
  public final static native boolean Context_CheckSat_0(long context, long box);
  public final static native void Formula_getQuantifiedVariables(long set, long formula);
  public final static native long new_Expression__SWIG_4(long jarg1);
  public final static native String getResult(long box, long var);

  public final static native void Expression_getVariables(long set, long exp);
  public final static native void Formula_getFreeVariables(long set, long f);


  // For debuging and testing

  public final static native boolean Box_has_variable_0(long box, long var);
  public final static native boolean CheckSatisfiability__SWIG_2(long formula);
  public final static native boolean CheckSatisfiability__SWIG_3(long formula, double delta, long box);

  public final static native long Context_CheckSatBox(long jarg1);

  public final static native void Context_Test();

  public final static native void Context_TestCheckSat();

  public final static native void satCheck();
}
