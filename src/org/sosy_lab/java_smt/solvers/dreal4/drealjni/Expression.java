/*
 *  JavaSMT is an API wrapper for a collection of SMT solvers.
 *  This file is part of JavaSMT.
 *
 *  Copyright (C) 2007-2016  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;


public class Expression {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Expression(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Expression obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(Expression obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize1() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        drealJNI.delete_Expression(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Expression(Expression arg0) {
    this(drealJNI.new_Expression__SWIG_0(Expression.getCPtr(arg0), arg0), true);
  }

  public Expression AssignOperator(Expression arg0) {
    return new Expression(drealJNI.Expression_AssignOperator__SWIG_0(swigCPtr, this, Expression.getCPtr(arg0), arg0), false);
  }

  public Expression() {
    this(drealJNI.new_Expression__SWIG_1(), true);
  }

  public Expression(double d) {
    this(drealJNI.new_Expression__SWIG_2(d), true);
  }

  public Expression(long l) {
    this(drealJNI.new_Expression__SWIG_4(l), true);
  }


  public Expression(Variable var) {
    this(drealJNI.new_Expression__SWIG_3(Variable.getCPtr(var), var), true);
  }

  public ExpressionKind get_kind() {
    return ExpressionKind.swigToEnum(drealJNI.Expression_get_kind(swigCPtr, this));
  }

  public long get_hash() {
    return drealJNI.Expression_get_hash(swigCPtr, this);
  }

  public Variables GetVariables() {
    return new Variables(drealJNI.Expression_GetVariables(swigCPtr, this), false);
  }

  public boolean EqualTo(Expression e) {
    return drealJNI.Expression_EqualTo(swigCPtr, this, Expression.getCPtr(e), e);
  }

  public boolean Less(Expression e) {
    return drealJNI.Expression_Less(swigCPtr, this, Expression.getCPtr(e), e);
  }

  public boolean is_polynomial() {
    return drealJNI.Expression_is_polynomial(swigCPtr, this);
  }

  public boolean include_ite() {
    return drealJNI.Expression_include_ite(swigCPtr, this);
  }

  public double Evaluate(Environment env) {
    return drealJNI.Expression_Evaluate__SWIG_0(swigCPtr, this, Environment.getCPtr(env), env);
  }

  public double Evaluate() {
    return drealJNI.Expression_Evaluate__SWIG_1(swigCPtr, this);
  }

  public Expression EvaluatePartial(Environment env) {
    return new Expression(drealJNI.Expression_EvaluatePartial(swigCPtr, this, Environment.getCPtr(env), env), true);
  }

  public Expression Expand() {
    return new Expression(drealJNI.Expression_Expand(swigCPtr, this), true);
  }

  public Expression Substitute(Variable var, Expression e) {
    return new Expression(drealJNI.Expression_Substitute__SWIG_0(swigCPtr, this, Variable.getCPtr(var), var, Expression.getCPtr(e), e), true);
  }

  public Expression Substitute(
      SWIGTYPE_p_std__unordered_mapT_dreal__drake__symbolic__Variable_dreal__drake__symbolic__Expression_dreal__drake__hash_valueT_dreal__drake__symbolic__Variable_t_t expr_subst, SWIGTYPE_p_std__unordered_mapT_dreal__drake__symbolic__Variable_dreal__drake__symbolic__Formula_dreal__drake__hash_valueT_dreal__drake__symbolic__Variable_t_t formula_subst) {
    return new Expression(drealJNI.Expression_Substitute__SWIG_1(swigCPtr, this, SWIGTYPE_p_std__unordered_mapT_dreal__drake__symbolic__Variable_dreal__drake__symbolic__Expression_dreal__drake__hash_valueT_dreal__drake__symbolic__Variable_t_t.getCPtr(expr_subst), SWIGTYPE_p_std__unordered_mapT_dreal__drake__symbolic__Variable_dreal__drake__symbolic__Formula_dreal__drake__hash_valueT_dreal__drake__symbolic__Variable_t_t.getCPtr(formula_subst)), true);
  }

  public Expression Substitute(SWIGTYPE_p_std__unordered_mapT_dreal__drake__symbolic__Variable_dreal__drake__symbolic__Expression_dreal__drake__hash_valueT_dreal__drake__symbolic__Variable_t_t expr_subst) {
    return new Expression(drealJNI.Expression_Substitute__SWIG_2(swigCPtr, this, SWIGTYPE_p_std__unordered_mapT_dreal__drake__symbolic__Variable_dreal__drake__symbolic__Expression_dreal__drake__hash_valueT_dreal__drake__symbolic__Variable_t_t.getCPtr(expr_subst)), true);
  }

  public Expression Substitute(SWIGTYPE_p_std__unordered_mapT_dreal__drake__symbolic__Variable_dreal__drake__symbolic__Formula_dreal__drake__hash_valueT_dreal__drake__symbolic__Variable_t_t formula_subst) {
    return new Expression(drealJNI.Expression_Substitute__SWIG_3(swigCPtr, this, SWIGTYPE_p_std__unordered_mapT_dreal__drake__symbolic__Variable_dreal__drake__symbolic__Formula_dreal__drake__hash_valueT_dreal__drake__symbolic__Variable_t_t.getCPtr(formula_subst)), true);
  }

  public Expression Differentiate(Variable x) {
    return new Expression(drealJNI.Expression_Differentiate(swigCPtr, this, Variable.getCPtr(x), x), true);
  }

  public String to_string() {
    return drealJNI.Expression_to_string(swigCPtr, this);
  }

  public static Expression Zero() {
    return new Expression(drealJNI.Expression_Zero(), true);
  }

  public static Expression One() {
    return new Expression(drealJNI.Expression_One(), true);
  }

  public static Expression Pi() {
    return new Expression(drealJNI.Expression_Pi(), true);
  }

  public static Expression E() {
    return new Expression(drealJNI.Expression_E(), true);
  }

  public static Expression NaN() {
    return new Expression(drealJNI.Expression_NaN(), true);
  }

  public Expression Increment() {
    return new Expression(drealJNI.Expression_Increment__SWIG_0(swigCPtr, this), false);
  }

  public Expression Increment(int arg0) {
    return new Expression(drealJNI.Expression_Increment__SWIG_1(swigCPtr, this, arg0), true);
  }

  public Expression Decrement() {
    return new Expression(drealJNI.Expression_Decrement__SWIG_0(swigCPtr, this), false);
  }

  public Expression Decrement(int arg0) {
    return new Expression(drealJNI.Expression_Decrement__SWIG_1(swigCPtr, this, arg0), true);
  }

  // self written
  public VariableSet getVariables() {
    VariableSet set = new VariableSet();
    drealJNI.Expression_getVariables(VariableSet.getCPtr(set), Expression.getCPtr(this));
    return set;
  }

}
