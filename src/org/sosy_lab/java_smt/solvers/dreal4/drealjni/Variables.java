/*
 *  JavaSMT is an API wrapper for a collection of SMT solvers.
 *  This file is part of JavaSMT.
 *
 *  Copyright (C) 2007-2016  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;


public class Variables {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Variables(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Variables obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(Variables obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        drealJNI.delete_Variables(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Variables(Variables arg0) {
    this(drealJNI.new_Variables__SWIG_0(Variables.getCPtr(arg0), arg0), true);
  }

  public Variables AssignOperator(Variables arg0) {
    return new Variables(drealJNI.Variables_AssignOperator__SWIG_0(swigCPtr, this, Variables.getCPtr(arg0), arg0), false);
  }

  public Variables() {
    this(drealJNI.new_Variables__SWIG_1(), true);
  }

  public Variables(Variable[] arr) {
    this(drealJNI.new_Variables__SWIG_1(), true);
    for (Variable var : arr) {
      this.insert(var);
    }
  }

  public Variables(SWIGTYPE_p_std__initializer_listT_dreal__drake__symbolic__Variable_t init) {
    this(drealJNI.new_Variables__SWIG_2(SWIGTYPE_p_std__initializer_listT_dreal__drake__symbolic__Variable_t.getCPtr(init)), true);
  }

  public long get_hash() {
    return drealJNI.Variables_get_hash(swigCPtr, this);
  }

  public long size() {
    return (drealJNI.Variables_size(swigCPtr, this));
  }

  public boolean empty() {
    return drealJNI.Variables_empty(swigCPtr, this);
  }

  public String to_string() {
    return drealJNI.Variables_to_string(swigCPtr, this);
  }

  public SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__iterator begin() {
    return new SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__iterator(drealJNI.Variables_begin__SWIG_0(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__iterator end() {
    return new SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__iterator(drealJNI.Variables_end__SWIG_0(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__const_iterator cbegin() {
    return new SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__const_iterator(drealJNI.Variables_cbegin(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__const_iterator cend() {
    return new SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__const_iterator(drealJNI.Variables_cend(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__reverse_iterator rbegin() {
    return new SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__reverse_iterator(drealJNI.Variables_rbegin__SWIG_0(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__reverse_iterator rend() {
    return new SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__reverse_iterator(drealJNI.Variables_rend__SWIG_0(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__const_reverse_iterator crbegin() {
    return new SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__const_reverse_iterator(drealJNI.Variables_crbegin(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__const_reverse_iterator crend() {
    return new SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__const_reverse_iterator(drealJNI.Variables_crend(swigCPtr, this), true);
  }

  public void insert(Variable var) {
    drealJNI.Variables_insert__SWIG_0(swigCPtr, this, Variable.getCPtr(var), var);
  }

  public void insert(Variables vars) {
    drealJNI.Variables_insert__SWIG_2(swigCPtr, this, Variables.getCPtr(vars), vars);
  }

  public long erase(Variable key) {
    return (drealJNI.Variables_erase__SWIG_0(swigCPtr, this, Variable.getCPtr(key), key));
  }

  public long erase(Variables vars) {
    return (drealJNI.Variables_erase__SWIG_1(swigCPtr, this, Variables.getCPtr(vars), vars));
  }

  public SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__iterator find(Variable key) {
    return new SWIGTYPE_p_std__setT_dreal__drake__symbolic__Variable_t__iterator(drealJNI.Variables_find__SWIG_0(swigCPtr, this, Variable.getCPtr(key), key), true);
  }

  public boolean include(Variable key) {
    return drealJNI.Variables_include(swigCPtr, this, Variable.getCPtr(key), key);
  }

  public boolean IsSubsetOf(Variables vars) {
    return drealJNI.Variables_IsSubsetOf(swigCPtr, this, Variables.getCPtr(vars), vars);
  }

  public boolean IsSupersetOf(Variables vars) {
    return drealJNI.Variables_IsSupersetOf(swigCPtr, this, Variables.getCPtr(vars), vars);
  }

  public boolean IsStrictSubsetOf(Variables vars) {
    return drealJNI.Variables_IsStrictSubsetOf(swigCPtr, this, Variables.getCPtr(vars), vars);
  }

  public boolean IsStrictSupersetOf(Variables vars) {
    return drealJNI.Variables_IsStrictSupersetOf(swigCPtr, this, Variables.getCPtr(vars), vars);
  }

}
