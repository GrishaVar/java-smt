/*
 *  JavaSMT is an API wrapper for a collection of SMT solvers.
 *  This file is part of JavaSMT.
 *
 *  Copyright (C) 2007-2016  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;

public class FormulaSet extends java.util.AbstractSet<Formula> {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected FormulaSet(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(FormulaSet obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(FormulaSet obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        drealJNI.delete_FormulaSet(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public FormulaSet(java.util.Collection<? extends Formula> collection) {
    this();
    addAll(collection);
  }

  public int size() {
    return sizeImpl();
  }

  public boolean add(Formula key) {
    return addImpl(key);
  }

  public boolean addAll(java.util.Collection<? extends Formula> collection) {
    boolean didAddElement = false;
    for (java.lang.Object object : collection) {
      didAddElement |= add((Formula)object);
    }

    return didAddElement;
  }

  public java.util.Iterator<Formula> iterator() {
    return new java.util.Iterator<Formula>() {
      private Iterator curr;
      private Iterator end;

      private java.util.Iterator<Formula> init() {
        curr = FormulaSet.this.begin();
        end = FormulaSet.this.end();
        return this;
      }

      public Formula next() {
        if (!hasNext()) {
          throw new java.util.NoSuchElementException();
        }

        // Save the current position, increment it,
        // then return the value at the position before the increment.
        final Formula currValue = curr.derefUnchecked();
        curr.incrementUnchecked();
        return currValue;
      }

      public boolean hasNext() {
        return curr.isNot(end);
      }

      public void remove() {
        throw new java.lang.UnsupportedOperationException();
      }
    }.init();
  }

  public boolean containsAll(java.util.Collection<?> collection) {
    for (java.lang.Object object : collection) {
      if (!contains(object)) {
        return false;
      }
    }

    return true;
  }

  public boolean contains(java.lang.Object object) {
    if (!(object instanceof Formula)) {
      return false;
    }

    return containsImpl((Formula)object);
  }

  public boolean removeAll(java.util.Collection<?> collection) {
    boolean didRemoveElement = false;
    for (java.lang.Object object : collection) {
      didRemoveElement |= remove(object);
    }

    return didRemoveElement;
  }

  public boolean remove(java.lang.Object object) {
    if (!(object instanceof Formula)) {
      return false;
    }

    return removeImpl((Formula)object);
  }

  static protected class Iterator {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Iterator(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Iterator obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected static long swigRelease(Iterator obj) {
      long ptr = 0;
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new RuntimeException("Cannot release ownership as memory is not owned");
        ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.delete();
      }
      return ptr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          drealJNI.delete_FormulaSet_Iterator(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    private void incrementUnchecked() {
      drealJNI.FormulaSet_Iterator_incrementUnchecked(swigCPtr, this);
    }
  
    private Formula derefUnchecked() {
      return new Formula(drealJNI.FormulaSet_Iterator_derefUnchecked(swigCPtr, this), true);
    }
  
    private boolean isNot(FormulaSet.Iterator other) {
      return drealJNI.FormulaSet_Iterator_isNot(swigCPtr, this, FormulaSet.Iterator.getCPtr(other), other);
    }
  
  }

  public FormulaSet() {
    this(drealJNI.new_FormulaSet__SWIG_0(), true);
  }

  public FormulaSet(FormulaSet other) {
    this(drealJNI.new_FormulaSet__SWIG_1(FormulaSet.getCPtr(other), other), true);
  }

  public boolean isEmpty() {
    return drealJNI.FormulaSet_isEmpty(swigCPtr, this);
  }

  public void clear() {
    drealJNI.FormulaSet_clear(swigCPtr, this);
  }

  private FormulaSet.Iterator begin() {
    return new FormulaSet.Iterator(drealJNI.FormulaSet_begin(swigCPtr, this), true);
  }

  private FormulaSet.Iterator end() {
    return new FormulaSet.Iterator(drealJNI.FormulaSet_end(swigCPtr, this), true);
  }

  public boolean addImpl(Formula key) {
    return drealJNI.FormulaSet_addImpl(swigCPtr, this, Formula.getCPtr(key), key);
  }

  private boolean containsImpl(Formula key) {
    return drealJNI.FormulaSet_containsImpl(swigCPtr, this, Formula.getCPtr(key), key);
  }

  private boolean removeImpl(Formula key) {
    return drealJNI.FormulaSet_removeImpl(swigCPtr, this, Formula.getCPtr(key), key);
  }

  private int sizeImpl() {
    return drealJNI.FormulaSet_sizeImpl(swigCPtr, this);
  }

  private boolean hasNextImpl(FormulaSet.Iterator itr) {
    return drealJNI.FormulaSet_hasNextImpl(swigCPtr, this, FormulaSet.Iterator.getCPtr(itr), itr);
  }

}
