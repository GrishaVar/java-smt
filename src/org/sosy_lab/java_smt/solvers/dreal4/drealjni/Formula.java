/*
 *  JavaSMT is an API wrapper for a collection of SMT solvers.
 *  This file is part of JavaSMT.
 *
 *  Copyright (C) 2007-2016  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;

public class Formula {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Formula(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Formula obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(Formula obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize1() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        DrealJNI.deleteFormula(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Formula() {
    this(DrealJNI.newFormulaSWIG0(), true);
  }

  public Formula(Formula arg0) {
    this(DrealJNI.newFormulaSWIG1(Formula.getCPtr(arg0), arg0), true);
  }

  public Formula assignOperator(Formula arg0) {
    return new Formula(
        DrealJNI.formulaAssignOperatorSWIG0(swigCPtr, this, Formula.getCPtr(arg0), arg0),
        false);
  }

  public Formula(Variable var) {
    this(DrealJNI.newFormulaSWIG2(Variable.getCPtr(var), var), true);
  }

  public FormulaKind getKind() {
    return FormulaKind.swigToEnum(DrealJNI.formulaGetKind(swigCPtr, this));
  }

  public long getHash() {
    return DrealJNI.formulaGetHash(swigCPtr, this);
  }

  public Variables variableGetFreeVariables() {
    return new Variables(DrealJNI.formulaGetFreeVariables(swigCPtr, this), false);
  }

  public boolean equalTo(Formula f) {
    return DrealJNI.formulaEqualTo(swigCPtr, this, Formula.getCPtr(f), f);
  }

  public boolean less(Formula f) {
    return DrealJNI.formulaLess(swigCPtr, this, Formula.getCPtr(f), f);
  }

  public boolean evaluate(Environment env) {
    return DrealJNI.formulaEvaluateSWIG0(swigCPtr, this, Environment.getCPtr(env), env);
  }

  public boolean evaluate() {
    return DrealJNI.formulaEvaluateSWIG1(swigCPtr, this);
  }

  public Formula substitute(Variable var, Expression e) {
    return new Formula(
        DrealJNI.formulaSubstituteSWIG0(
            swigCPtr, this, Variable.getCPtr(var), var, Expression.getCPtr(e), e),
        true);
  }

  public Formula substitute(Variable var, Formula f) {
    return new Formula(
        DrealJNI.formulaSubstituteSWIG1(
            swigCPtr, this, Variable.getCPtr(var), var, Formula.getCPtr(f), f),
        true);
  }

  public Formula substitute(
      SwigTypePStdUnorderedMapTDrealDrakeSymbolicVariableDrealDrakeSymbolicExpressionDrealDrakeHashValueTDrealDrakeSymbolicVariable
          expr_subst,
      SwigTypePStdUnorderedMapTDrealDrakeSymbolicVariableDrealDrakeSymbolicFormulaDrealDdrakeHashValueTDrealDrakeSymbolicVariable
          formula_subst) {
    return new Formula(
        DrealJNI.formulaSubstituteSWIG2(
            swigCPtr,
            this,
            SwigTypePStdUnorderedMapTDrealDrakeSymbolicVariableDrealDrakeSymbolicExpressionDrealDrakeHashValueTDrealDrakeSymbolicVariable
                .getCPtr(expr_subst),
            SwigTypePStdUnorderedMapTDrealDrakeSymbolicVariableDrealDrakeSymbolicFormulaDrealDdrakeHashValueTDrealDrakeSymbolicVariable
                .getCPtr(formula_subst)),
        true);
  }

  public Formula substitute(
      SwigTypePStdUnorderedMapTDrealDrakeSymbolicVariableDrealDrakeSymbolicExpressionDrealDrakeHashValueTDrealDrakeSymbolicVariable
          expr_subst) {
    return new Formula(
        DrealJNI.formulaSubstituteSWIG3(
            swigCPtr,
            this,
            SwigTypePStdUnorderedMapTDrealDrakeSymbolicVariableDrealDrakeSymbolicExpressionDrealDrakeHashValueTDrealDrakeSymbolicVariable
                .getCPtr(expr_subst)),
        true);
  }

  public Formula substitute(
      SwigTypePStdUnorderedMapTDrealDrakeSymbolicVariableDrealDrakeSymbolicFormulaDrealDdrakeHashValueTDrealDrakeSymbolicVariable
          formula_subst) {
    return new Formula(
        DrealJNI.formulaSubstituteSWIG4(
            swigCPtr,
            this,
            SwigTypePStdUnorderedMapTDrealDrakeSymbolicVariableDrealDrakeSymbolicFormulaDrealDdrakeHashValueTDrealDrakeSymbolicVariable
                .getCPtr(formula_subst)),
        true);
  }

  @Override
  public String toString() {
    return DrealJNI.formulaToString(swigCPtr, this);
  }

  public static Formula formulaTrue() {
    return new Formula(DrealJNI.formulaTrue(), true);
  }

  public static Formula formulaFalse() {
    return new Formula(DrealJNI.formulaFalse(), true);
  }

  public boolean boolOperator() {
    return DrealJNI.formulaBoolOperator(swigCPtr, this);
  }

  public static Formula makeConjunction(Formula f1, Formula f2) {
    return new Formula(
        DrealJNI.formulaMakeConjunction(Formula.getCPtr(f1), f1, Formula.getCPtr(f2), f2), true);
  }

  public static Formula makeDisjunction(Formula f1, Formula f2) {
    return new Formula(
        DrealJNI.formulaMakeDisjunction(Formula.getCPtr(f1), f1, Formula.getCPtr(f2), f2), true);
  }

  public boolean includeIte() {
    return DrealJNI.formulaIncludeIte(swigCPtr, this);
  }

  // self written
  public VariableSet getQuantifiedVariables() {
    VariableSet set = new VariableSet();
    DrealJNI.formulaGetQuantifiedVariables(VariableSet.getCPtr(set), Formula.getCPtr(this));
    return set;
  }

  public VariableSet getFreeVariables() {
    VariableSet set = new VariableSet();
    DrealJNI.formulaGetFreeVariables0(VariableSet.getCPtr(set), Formula.getCPtr(this));
    return set;
  }
}
