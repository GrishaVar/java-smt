/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGJAVA

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 *
 *       T c_result = T();
 *
 * doesn't compile for all types for example:
 *
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


// #include "dreal/symbolic/symbolic.h"
// #include "dreal/smt2/logic.h"
// #include "dreal/util/box.h"
// #include "/opt/libibex/2.7.4/include/ibex.h"
// #include "/opt/libibex/2.7.4/include/ibex/ibex_Vector.h"
// #include "dreal/solver/config.h"
// #include "dreal/api/api.h"
// #include "dreal/solver/context.h"

#include "dreal/dreal.h"


// using namespace ibex;
// using namespace dreal;
// using namespace dreal::drake::symbolic;

// include optional??
//#include <optional>

#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <unordered_map>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <set>
#include <stdexcept>


#include <map>
#include <stdexcept>

SWIGINTERN void std_set_Sl_dreal_drake_symbolic_Formula_Sg__iterator_incrementUnchecked(std::set< dreal::drake::symbolic::Formula >::iterator *self){
          ++(*self);
        }
SWIGINTERN dreal::drake::symbolic::Formula std_set_Sl_dreal_drake_symbolic_Formula_Sg__iterator_derefUnchecked(std::set< dreal::drake::symbolic::Formula >::iterator const *self){
          return **self;
        }
SWIGINTERN bool std_set_Sl_dreal_drake_symbolic_Formula_Sg__iterator_isNot(std::set< dreal::drake::symbolic::Formula >::iterator const *self,std::set< dreal::drake::symbolic::Formula >::iterator other){
          return (*self != other);
        }

/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


  SWIGINTERN jint SWIG_SetSize(size_t size) {
    jint sz = SWIG_JavaIntFromSize_t(size);
    if (sz == -1) {
      throw std::out_of_range("set size is too large to fit into a Java int");
    }

    return sz;
  }

SWIGINTERN bool std_set_Sl_dreal_drake_symbolic_Formula_Sg__addImpl(std::set< dreal::drake::symbolic::Formula > *self,dreal::drake::symbolic::Formula const &key){
        return self->insert(key).second;
      }
SWIGINTERN bool std_set_Sl_dreal_drake_symbolic_Formula_Sg__containsImpl(std::set< dreal::drake::symbolic::Formula > *self,dreal::drake::symbolic::Formula const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN bool std_set_Sl_dreal_drake_symbolic_Formula_Sg__removeImpl(std::set< dreal::drake::symbolic::Formula > *self,dreal::drake::symbolic::Formula const &key){
        return (self->erase(key) > 0);
      }
SWIGINTERN jint std_set_Sl_dreal_drake_symbolic_Formula_Sg__sizeImpl(std::set< dreal::drake::symbolic::Formula > const *self){
        return SWIG_SetSize(self->size());
      }
SWIGINTERN bool std_set_Sl_dreal_drake_symbolic_Formula_Sg__hasNextImpl(std::set< dreal::drake::symbolic::Formula > const *self,std::set< dreal::drake::symbolic::Formula >::iterator const &itr){
        return (itr != self->end());
      }

SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< dreal::drake::symbolic::Formula > *new_std_vector_Sl_dreal_drake_symbolic_Formula_Sg___SWIG_2(jint count,dreal::drake::symbolic::Formula const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< dreal::drake::symbolic::Formula >(static_cast<std::vector< dreal::drake::symbolic::Formula >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_dreal_drake_symbolic_Formula_Sg__doSize(std::vector< dreal::drake::symbolic::Formula > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_dreal_drake_symbolic_Formula_Sg__doAdd__SWIG_0(std::vector< dreal::drake::symbolic::Formula > *self,std::vector< dreal::drake::symbolic::Formula >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_dreal_drake_symbolic_Formula_Sg__doAdd__SWIG_1(std::vector< dreal::drake::symbolic::Formula > *self,jint index,std::vector< dreal::drake::symbolic::Formula >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< dreal::drake::symbolic::Formula >::value_type std_vector_Sl_dreal_drake_symbolic_Formula_Sg__doRemove(std::vector< dreal::drake::symbolic::Formula > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          dreal::drake::symbolic::Formula const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< dreal::drake::symbolic::Formula >::value_type const &std_vector_Sl_dreal_drake_symbolic_Formula_Sg__doGet(std::vector< dreal::drake::symbolic::Formula > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< dreal::drake::symbolic::Formula >::value_type std_vector_Sl_dreal_drake_symbolic_Formula_Sg__doSet(std::vector< dreal::drake::symbolic::Formula > *self,jint index,std::vector< dreal::drake::symbolic::Formula >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          dreal::drake::symbolic::Formula const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_dreal_drake_symbolic_Formula_Sg__doRemoveRange(std::vector< dreal::drake::symbolic::Formula > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< dreal::drake::symbolic::Variable > *new_std_vector_Sl_dreal_drake_symbolic_Variable_Sg___SWIG_2(jint count,dreal::drake::symbolic::Variable const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< dreal::drake::symbolic::Variable >(static_cast<std::vector< dreal::drake::symbolic::Variable >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_dreal_drake_symbolic_Variable_Sg__doSize(std::vector< dreal::drake::symbolic::Variable > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_dreal_drake_symbolic_Variable_Sg__doAdd__SWIG_0(std::vector< dreal::drake::symbolic::Variable > *self,std::vector< dreal::drake::symbolic::Variable >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_dreal_drake_symbolic_Variable_Sg__doAdd__SWIG_1(std::vector< dreal::drake::symbolic::Variable > *self,jint index,std::vector< dreal::drake::symbolic::Variable >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< dreal::drake::symbolic::Variable >::value_type std_vector_Sl_dreal_drake_symbolic_Variable_Sg__doRemove(std::vector< dreal::drake::symbolic::Variable > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          dreal::drake::symbolic::Variable const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< dreal::drake::symbolic::Variable >::value_type const &std_vector_Sl_dreal_drake_symbolic_Variable_Sg__doGet(std::vector< dreal::drake::symbolic::Variable > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< dreal::drake::symbolic::Variable >::value_type std_vector_Sl_dreal_drake_symbolic_Variable_Sg__doSet(std::vector< dreal::drake::symbolic::Variable > *self,jint index,std::vector< dreal::drake::symbolic::Variable >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          dreal::drake::symbolic::Variable const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_dreal_drake_symbolic_Variable_Sg__doRemoveRange(std::vector< dreal::drake::symbolic::Variable > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< dreal::drake::symbolic::Expression > *new_std_vector_Sl_dreal_drake_symbolic_Expression_Sg___SWIG_2(jint count,dreal::drake::symbolic::Expression const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< dreal::drake::symbolic::Expression >(static_cast<std::vector< dreal::drake::symbolic::Expression >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_dreal_drake_symbolic_Expression_Sg__doSize(std::vector< dreal::drake::symbolic::Expression > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_dreal_drake_symbolic_Expression_Sg__doAdd__SWIG_0(std::vector< dreal::drake::symbolic::Expression > *self,std::vector< dreal::drake::symbolic::Expression >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_dreal_drake_symbolic_Expression_Sg__doAdd__SWIG_1(std::vector< dreal::drake::symbolic::Expression > *self,jint index,std::vector< dreal::drake::symbolic::Expression >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< dreal::drake::symbolic::Expression >::value_type std_vector_Sl_dreal_drake_symbolic_Expression_Sg__doRemove(std::vector< dreal::drake::symbolic::Expression > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          dreal::drake::symbolic::Expression const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< dreal::drake::symbolic::Expression >::value_type const &std_vector_Sl_dreal_drake_symbolic_Expression_Sg__doGet(std::vector< dreal::drake::symbolic::Expression > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< dreal::drake::symbolic::Expression >::value_type std_vector_Sl_dreal_drake_symbolic_Expression_Sg__doSet(std::vector< dreal::drake::symbolic::Expression > *self,jint index,std::vector< dreal::drake::symbolic::Expression >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          dreal::drake::symbolic::Expression const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_dreal_drake_symbolic_Expression_Sg__doRemoveRange(std::vector< dreal::drake::symbolic::Expression > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::map< dreal::drake::symbolic::Expression,double,std::less< dreal::drake::symbolic::Expression > >::iterator std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__iterator_getNextUnchecked(std::map< dreal::drake::symbolic::Expression,double >::iterator *self){
          std::map< dreal::drake::symbolic::Expression, double, std::less< dreal::drake::symbolic::Expression > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__iterator_isNot(std::map< dreal::drake::symbolic::Expression,double >::iterator const *self,std::map< dreal::drake::symbolic::Expression,double >::iterator other){
          return (*self != other);
        }
SWIGINTERN dreal::drake::symbolic::Expression std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__iterator_getKey(std::map< dreal::drake::symbolic::Expression,double >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN double std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__iterator_getValue(std::map< dreal::drake::symbolic::Expression,double >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__iterator_setValue(std::map< dreal::drake::symbolic::Expression,double >::iterator *self,double const &newValue){
          (*self)->second = newValue;
        }

  SWIGINTERN jint SWIG_MapSize(size_t size) {
    jint sz = SWIG_JavaIntFromSize_t(size);
    if (sz == -1) {
      throw std::out_of_range("map size is too large to fit into a Java int");
    }

    return sz;
  }

SWIGINTERN jint std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__sizeImpl(std::map< dreal::drake::symbolic::Expression,double > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__containsImpl(std::map< dreal::drake::symbolic::Expression,double > *self,dreal::drake::symbolic::Expression const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__putUnchecked(std::map< dreal::drake::symbolic::Expression,double > *self,dreal::drake::symbolic::Expression const &key,double const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__removeUnchecked(std::map< dreal::drake::symbolic::Expression,double > *self,std::map< dreal::drake::symbolic::Expression,double,std::less< dreal::drake::symbolic::Expression > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression,std::less< dreal::drake::symbolic::Expression > >::iterator std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__iterator_getNextUnchecked(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator *self){
          std::map< dreal::drake::symbolic::Expression, dreal::drake::symbolic::Expression, std::less< dreal::drake::symbolic::Expression > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__iterator_isNot(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator const *self,std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator other){
          return (*self != other);
        }
SWIGINTERN dreal::drake::symbolic::Expression std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__iterator_getKey(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN dreal::drake::symbolic::Expression std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__iterator_getValue(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__iterator_setValue(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator *self,dreal::drake::symbolic::Expression const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__sizeImpl(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__containsImpl(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *self,dreal::drake::symbolic::Expression const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__putUnchecked(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *self,dreal::drake::symbolic::Expression const &key,dreal::drake::symbolic::Expression const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__removeUnchecked(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *self,std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression,std::less< dreal::drake::symbolic::Expression > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__iterator_getNextUnchecked(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator *self){
          std::unordered_map< dreal::drake::symbolic::Variable, int >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__iterator_isNot(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator const *self,std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator other){
          return (*self != other);
        }
SWIGINTERN dreal::drake::symbolic::Variable std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__iterator_getKey(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN int std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__iterator_getValue(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__iterator_setValue(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator *self,int const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__sizeImpl(std::unordered_map< dreal::drake::symbolic::Variable,int > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__containsImpl(std::unordered_map< dreal::drake::symbolic::Variable,int > *self,dreal::drake::symbolic::Variable const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__putUnchecked(std::unordered_map< dreal::drake::symbolic::Variable,int > *self,dreal::drake::symbolic::Variable const &key,int const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__removeUnchecked(std::unordered_map< dreal::drake::symbolic::Variable,int > *self,std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN void std_set_Sl_dreal_drake_symbolic_Variable_Sg__iterator_incrementUnchecked(std::set< dreal::drake::symbolic::Variable >::iterator *self){
          ++(*self);
        }
SWIGINTERN dreal::drake::symbolic::Variable std_set_Sl_dreal_drake_symbolic_Variable_Sg__iterator_derefUnchecked(std::set< dreal::drake::symbolic::Variable >::iterator const *self){
          return **self;
        }
SWIGINTERN bool std_set_Sl_dreal_drake_symbolic_Variable_Sg__iterator_isNot(std::set< dreal::drake::symbolic::Variable >::iterator const *self,std::set< dreal::drake::symbolic::Variable >::iterator other){
          return (*self != other);
        }
SWIGINTERN bool std_set_Sl_dreal_drake_symbolic_Variable_Sg__addImpl(std::set< dreal::drake::symbolic::Variable > *self,dreal::drake::symbolic::Variable const &key){
        return self->insert(key).second;
      }
SWIGINTERN bool std_set_Sl_dreal_drake_symbolic_Variable_Sg__containsImpl(std::set< dreal::drake::symbolic::Variable > *self,dreal::drake::symbolic::Variable const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN bool std_set_Sl_dreal_drake_symbolic_Variable_Sg__removeImpl(std::set< dreal::drake::symbolic::Variable > *self,dreal::drake::symbolic::Variable const &key){
        return (self->erase(key) > 0);
      }
SWIGINTERN jint std_set_Sl_dreal_drake_symbolic_Variable_Sg__sizeImpl(std::set< dreal::drake::symbolic::Variable > const *self){
        return SWIG_SetSize(self->size());
      }
SWIGINTERN bool std_set_Sl_dreal_drake_symbolic_Variable_Sg__hasNextImpl(std::set< dreal::drake::symbolic::Variable > const *self,std::set< dreal::drake::symbolic::Variable >::iterator const &itr){
        return (itr != self->end());
      }

#include <memory>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaSet_1Iterator_1incrementUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::set< dreal::drake::symbolic::Formula >::iterator *arg1 = (std::set< dreal::drake::symbolic::Formula >::iterator *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Formula >::iterator **)&jarg1;
  std_set_Sl_dreal_drake_symbolic_Formula_Sg__iterator_incrementUnchecked(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaSet_1Iterator_1derefUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::set< dreal::drake::symbolic::Formula >::iterator *arg1 = (std::set< dreal::drake::symbolic::Formula >::iterator *) 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Formula >::iterator **)&jarg1;
  result = std_set_Sl_dreal_drake_symbolic_Formula_Sg__iterator_derefUnchecked((std::set< dreal::drake::symbolic::Formula >::iterator const *)arg1);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaSet_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::set< dreal::drake::symbolic::Formula >::iterator *arg1 = (std::set< dreal::drake::symbolic::Formula >::iterator *) 0 ;
  std::set< dreal::drake::symbolic::Formula >::iterator arg2 ;
  std::set< dreal::drake::symbolic::Formula >::iterator *argp2 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::set< dreal::drake::symbolic::Formula >::iterator **)&jarg1;
  argp2 = *(std::set< dreal::drake::symbolic::Formula >::iterator **)&jarg2;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::set< dreal::drake::symbolic::Formula >::iterator");
    return 0;
  }
  arg2 = *argp2;
  result = (bool)std_set_Sl_dreal_drake_symbolic_Formula_Sg__iterator_isNot((std::set< dreal::drake::symbolic::Formula >::iterator const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1FormulaSet_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< dreal::drake::symbolic::Formula >::iterator *arg1 = (std::set< dreal::drake::symbolic::Formula >::iterator *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< dreal::drake::symbolic::Formula >::iterator **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1FormulaSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< dreal::drake::symbolic::Formula > *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (std::set< dreal::drake::symbolic::Formula > *)new std::set< dreal::drake::symbolic::Formula >();
  *(std::set< dreal::drake::symbolic::Formula > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1FormulaSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::set< dreal::drake::symbolic::Formula > *arg1 = 0 ;
  std::set< dreal::drake::symbolic::Formula > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Formula > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< dreal::drake::symbolic::Formula > const & is null");
    return 0;
  }
  result = (std::set< dreal::drake::symbolic::Formula > *)new std::set< dreal::drake::symbolic::Formula >((std::set< dreal::drake::symbolic::Formula > const &)*arg1);
  *(std::set< dreal::drake::symbolic::Formula > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaSet_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::set< dreal::drake::symbolic::Formula > *arg1 = (std::set< dreal::drake::symbolic::Formula > *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Formula > **)&jarg1;
  result = (bool)((std::set< dreal::drake::symbolic::Formula > const *)arg1)->empty();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::set< dreal::drake::symbolic::Formula > *arg1 = (std::set< dreal::drake::symbolic::Formula > *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Formula > **)&jarg1;
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaSet_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::set< dreal::drake::symbolic::Formula > *arg1 = (std::set< dreal::drake::symbolic::Formula > *) 0 ;
  std::set< dreal::drake::symbolic::Formula >::iterator result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Formula > **)&jarg1;
  result = (arg1)->begin();
  *(std::set< dreal::drake::symbolic::Formula >::iterator **)&jresult = new std::set< dreal::drake::symbolic::Formula >::iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaSet_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::set< dreal::drake::symbolic::Formula > *arg1 = (std::set< dreal::drake::symbolic::Formula > *) 0 ;
  std::set< dreal::drake::symbolic::Formula >::iterator result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Formula > **)&jarg1;
  result = (arg1)->end();
  *(std::set< dreal::drake::symbolic::Formula >::iterator **)&jresult = new std::set< dreal::drake::symbolic::Formula >::iterator(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaSet_1addImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::set< dreal::drake::symbolic::Formula > *arg1 = (std::set< dreal::drake::symbolic::Formula > *) 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::set< dreal::drake::symbolic::Formula > **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)std_set_Sl_dreal_drake_symbolic_Formula_Sg__addImpl(arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaSet_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::set< dreal::drake::symbolic::Formula > *arg1 = (std::set< dreal::drake::symbolic::Formula > *) 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::set< dreal::drake::symbolic::Formula > **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)std_set_Sl_dreal_drake_symbolic_Formula_Sg__containsImpl(arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaSet_1removeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::set< dreal::drake::symbolic::Formula > *arg1 = (std::set< dreal::drake::symbolic::Formula > *) 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::set< dreal::drake::symbolic::Formula > **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)std_set_Sl_dreal_drake_symbolic_Formula_Sg__removeImpl(arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaSet_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::set< dreal::drake::symbolic::Formula > *arg1 = (std::set< dreal::drake::symbolic::Formula > *) 0 ;
  jint result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Formula > **)&jarg1;
  try {
    result = std_set_Sl_dreal_drake_symbolic_Formula_Sg__sizeImpl((std::set< dreal::drake::symbolic::Formula > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaSet_1hasNextImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::set< dreal::drake::symbolic::Formula > *arg1 = (std::set< dreal::drake::symbolic::Formula > *) 0 ;
  std::set< dreal::drake::symbolic::Formula >::iterator *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::set< dreal::drake::symbolic::Formula > **)&jarg1;
  arg2 = *(std::set< dreal::drake::symbolic::Formula >::iterator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< dreal::drake::symbolic::Formula >::iterator const & is null");
    return 0;
  }
  result = (bool)std_set_Sl_dreal_drake_symbolic_Formula_Sg__hasNextImpl((std::set< dreal::drake::symbolic::Formula > const *)arg1,(std::set< dreal::drake::symbolic::Formula >::iterator const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1FormulaSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< dreal::drake::symbolic::Formula > *arg1 = (std::set< dreal::drake::symbolic::Formula > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< dreal::drake::symbolic::Formula > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1FormulaVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Formula > *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (std::vector< dreal::drake::symbolic::Formula > *)new std::vector< dreal::drake::symbolic::Formula >();
  *(std::vector< dreal::drake::symbolic::Formula > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1FormulaVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Formula > *arg1 = 0 ;
  std::vector< dreal::drake::symbolic::Formula > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Formula > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Formula > const & is null");
    return 0;
  }
  result = (std::vector< dreal::drake::symbolic::Formula > *)new std::vector< dreal::drake::symbolic::Formula >((std::vector< dreal::drake::symbolic::Formula > const &)*arg1);
  *(std::vector< dreal::drake::symbolic::Formula > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Formula > *arg1 = (std::vector< dreal::drake::symbolic::Formula > *) 0 ;
  std::vector< dreal::drake::symbolic::Formula >::size_type result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Formula > **)&jarg1;
  result = ((std::vector< dreal::drake::symbolic::Formula > const *)arg1)->capacity();
  jresult = (jlong)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< dreal::drake::symbolic::Formula > *arg1 = (std::vector< dreal::drake::symbolic::Formula > *) 0 ;
  std::vector< dreal::drake::symbolic::Formula >::size_type arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Formula > **)&jarg1;
  arg2 = (std::vector< dreal::drake::symbolic::Formula >::size_type)jarg2;
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< dreal::drake::symbolic::Formula > *arg1 = (std::vector< dreal::drake::symbolic::Formula > *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Formula > **)&jarg1;
  result = (bool)((std::vector< dreal::drake::symbolic::Formula > const *)arg1)->empty();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< dreal::drake::symbolic::Formula > *arg1 = (std::vector< dreal::drake::symbolic::Formula > *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Formula > **)&jarg1;
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1FormulaVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  std::vector< dreal::drake::symbolic::Formula > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1;
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  try {
    result = (std::vector< dreal::drake::symbolic::Formula > *)new_std_vector_Sl_dreal_drake_symbolic_Formula_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(dreal::drake::symbolic::Formula const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< dreal::drake::symbolic::Formula > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< dreal::drake::symbolic::Formula > *arg1 = (std::vector< dreal::drake::symbolic::Formula > *) 0 ;
  jint result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Formula > **)&jarg1;
  try {
    result = std_vector_Sl_dreal_drake_symbolic_Formula_Sg__doSize((std::vector< dreal::drake::symbolic::Formula > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< dreal::drake::symbolic::Formula > *arg1 = (std::vector< dreal::drake::symbolic::Formula > *) 0 ;
  std::vector< dreal::drake::symbolic::Formula >::value_type *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< dreal::drake::symbolic::Formula > **)&jarg1;
  arg2 = *(std::vector< dreal::drake::symbolic::Formula >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Formula >::value_type const & is null");
    return ;
  }
  std_vector_Sl_dreal_drake_symbolic_Formula_Sg__doAdd__SWIG_0(arg1,(dreal::drake::symbolic::Formula const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< dreal::drake::symbolic::Formula > *arg1 = (std::vector< dreal::drake::symbolic::Formula > *) 0 ;
  jint arg2 ;
  std::vector< dreal::drake::symbolic::Formula >::value_type *arg3 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< dreal::drake::symbolic::Formula > **)&jarg1;
  arg2 = jarg2;
  arg3 = *(std::vector< dreal::drake::symbolic::Formula >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Formula >::value_type const & is null");
    return ;
  }
  try {
    std_vector_Sl_dreal_drake_symbolic_Formula_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(dreal::drake::symbolic::Formula const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Formula > *arg1 = (std::vector< dreal::drake::symbolic::Formula > *) 0 ;
  jint arg2 ;
  std::vector< dreal::drake::symbolic::Formula >::value_type result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Formula > **)&jarg1;
  arg2 = jarg2;
  try {
    result = std_vector_Sl_dreal_drake_symbolic_Formula_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< dreal::drake::symbolic::Formula >::value_type **)&jresult = new std::vector< dreal::drake::symbolic::Formula >::value_type(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Formula > *arg1 = (std::vector< dreal::drake::symbolic::Formula > *) 0 ;
  jint arg2 ;
  std::vector< dreal::drake::symbolic::Formula >::value_type *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Formula > **)&jarg1;
  arg2 = jarg2;
  try {
    result = (std::vector< dreal::drake::symbolic::Formula >::value_type *) &std_vector_Sl_dreal_drake_symbolic_Formula_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< dreal::drake::symbolic::Formula >::value_type **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Formula > *arg1 = (std::vector< dreal::drake::symbolic::Formula > *) 0 ;
  jint arg2 ;
  std::vector< dreal::drake::symbolic::Formula >::value_type *arg3 = 0 ;
  std::vector< dreal::drake::symbolic::Formula >::value_type result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< dreal::drake::symbolic::Formula > **)&jarg1;
  arg2 = jarg2;
  arg3 = *(std::vector< dreal::drake::symbolic::Formula >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Formula >::value_type const & is null");
    return 0;
  }
  try {
    result = std_vector_Sl_dreal_drake_symbolic_Formula_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(dreal::drake::symbolic::Formula const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< dreal::drake::symbolic::Formula >::value_type **)&jresult = new std::vector< dreal::drake::symbolic::Formula >::value_type(result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_FormulaVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< dreal::drake::symbolic::Formula > *arg1 = (std::vector< dreal::drake::symbolic::Formula > *) 0 ;
  jint arg2 ;
  jint arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Formula > **)&jarg1;
  arg2 = jarg2;
  arg3 = jarg3;
  try {
    std_vector_Sl_dreal_drake_symbolic_Formula_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1FormulaVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< dreal::drake::symbolic::Formula > *arg1 = (std::vector< dreal::drake::symbolic::Formula > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< dreal::drake::symbolic::Formula > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1VariableVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Variable > *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (std::vector< dreal::drake::symbolic::Variable > *)new std::vector< dreal::drake::symbolic::Variable >();
  *(std::vector< dreal::drake::symbolic::Variable > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1VariableVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Variable > *arg1 = 0 ;
  std::vector< dreal::drake::symbolic::Variable > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Variable > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Variable > const & is null");
    return 0;
  }
  result = (std::vector< dreal::drake::symbolic::Variable > *)new std::vector< dreal::drake::symbolic::Variable >((std::vector< dreal::drake::symbolic::Variable > const &)*arg1);
  *(std::vector< dreal::drake::symbolic::Variable > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Variable > *arg1 = (std::vector< dreal::drake::symbolic::Variable > *) 0 ;
  std::vector< dreal::drake::symbolic::Variable >::size_type result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Variable > **)&jarg1;
  result = ((std::vector< dreal::drake::symbolic::Variable > const *)arg1)->capacity();
  jresult = (jlong)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< dreal::drake::symbolic::Variable > *arg1 = (std::vector< dreal::drake::symbolic::Variable > *) 0 ;
  std::vector< dreal::drake::symbolic::Variable >::size_type arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Variable > **)&jarg1;
  arg2 = (std::vector< dreal::drake::symbolic::Variable >::size_type)jarg2;
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< dreal::drake::symbolic::Variable > *arg1 = (std::vector< dreal::drake::symbolic::Variable > *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Variable > **)&jarg1;
  result = (bool)((std::vector< dreal::drake::symbolic::Variable > const *)arg1)->empty();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< dreal::drake::symbolic::Variable > *arg1 = (std::vector< dreal::drake::symbolic::Variable > *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Variable > **)&jarg1;
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1VariableVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  std::vector< dreal::drake::symbolic::Variable > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  try {
    result = (std::vector< dreal::drake::symbolic::Variable > *)new_std_vector_Sl_dreal_drake_symbolic_Variable_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(dreal::drake::symbolic::Variable const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< dreal::drake::symbolic::Variable > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< dreal::drake::symbolic::Variable > *arg1 = (std::vector< dreal::drake::symbolic::Variable > *) 0 ;
  jint result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Variable > **)&jarg1;
  try {
    result = std_vector_Sl_dreal_drake_symbolic_Variable_Sg__doSize((std::vector< dreal::drake::symbolic::Variable > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< dreal::drake::symbolic::Variable > *arg1 = (std::vector< dreal::drake::symbolic::Variable > *) 0 ;
  std::vector< dreal::drake::symbolic::Variable >::value_type *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< dreal::drake::symbolic::Variable > **)&jarg1;
  arg2 = *(std::vector< dreal::drake::symbolic::Variable >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Variable >::value_type const & is null");
    return ;
  }
  std_vector_Sl_dreal_drake_symbolic_Variable_Sg__doAdd__SWIG_0(arg1,(dreal::drake::symbolic::Variable const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< dreal::drake::symbolic::Variable > *arg1 = (std::vector< dreal::drake::symbolic::Variable > *) 0 ;
  jint arg2 ;
  std::vector< dreal::drake::symbolic::Variable >::value_type *arg3 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< dreal::drake::symbolic::Variable > **)&jarg1;
  arg2 = jarg2;
  arg3 = *(std::vector< dreal::drake::symbolic::Variable >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Variable >::value_type const & is null");
    return ;
  }
  try {
    std_vector_Sl_dreal_drake_symbolic_Variable_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(dreal::drake::symbolic::Variable const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Variable > *arg1 = (std::vector< dreal::drake::symbolic::Variable > *) 0 ;
  jint arg2 ;
  std::vector< dreal::drake::symbolic::Variable >::value_type result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Variable > **)&jarg1;
  arg2 = jarg2;
  try {
    result = std_vector_Sl_dreal_drake_symbolic_Variable_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< dreal::drake::symbolic::Variable >::value_type **)&jresult = new std::vector< dreal::drake::symbolic::Variable >::value_type(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Variable > *arg1 = (std::vector< dreal::drake::symbolic::Variable > *) 0 ;
  jint arg2 ;
  std::vector< dreal::drake::symbolic::Variable >::value_type *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Variable > **)&jarg1;
  arg2 = jarg2;
  try {
    result = (std::vector< dreal::drake::symbolic::Variable >::value_type *) &std_vector_Sl_dreal_drake_symbolic_Variable_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< dreal::drake::symbolic::Variable >::value_type **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Variable > *arg1 = (std::vector< dreal::drake::symbolic::Variable > *) 0 ;
  jint arg2 ;
  std::vector< dreal::drake::symbolic::Variable >::value_type *arg3 = 0 ;
  std::vector< dreal::drake::symbolic::Variable >::value_type result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< dreal::drake::symbolic::Variable > **)&jarg1;
  arg2 = jarg2;
  arg3 = *(std::vector< dreal::drake::symbolic::Variable >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Variable >::value_type const & is null");
    return 0;
  }
  try {
    result = std_vector_Sl_dreal_drake_symbolic_Variable_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(dreal::drake::symbolic::Variable const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< dreal::drake::symbolic::Variable >::value_type **)&jresult = new std::vector< dreal::drake::symbolic::Variable >::value_type(result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< dreal::drake::symbolic::Variable > *arg1 = (std::vector< dreal::drake::symbolic::Variable > *) 0 ;
  jint arg2 ;
  jint arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Variable > **)&jarg1;
  arg2 = jarg2;
  arg3 = jarg3;
  try {
    std_vector_Sl_dreal_drake_symbolic_Variable_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1VariableVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< dreal::drake::symbolic::Variable > *arg1 = (std::vector< dreal::drake::symbolic::Variable > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< dreal::drake::symbolic::Variable > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1ExpressionVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Expression > *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (std::vector< dreal::drake::symbolic::Expression > *)new std::vector< dreal::drake::symbolic::Expression >();
  *(std::vector< dreal::drake::symbolic::Expression > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1ExpressionVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Expression > *arg1 = 0 ;
  std::vector< dreal::drake::symbolic::Expression > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Expression > const & is null");
    return 0;
  }
  result = (std::vector< dreal::drake::symbolic::Expression > *)new std::vector< dreal::drake::symbolic::Expression >((std::vector< dreal::drake::symbolic::Expression > const &)*arg1);
  *(std::vector< dreal::drake::symbolic::Expression > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Expression > *arg1 = (std::vector< dreal::drake::symbolic::Expression > *) 0 ;
  std::vector< dreal::drake::symbolic::Expression >::size_type result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg1;
  result = ((std::vector< dreal::drake::symbolic::Expression > const *)arg1)->capacity();
  jresult = (jlong)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< dreal::drake::symbolic::Expression > *arg1 = (std::vector< dreal::drake::symbolic::Expression > *) 0 ;
  std::vector< dreal::drake::symbolic::Expression >::size_type arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg1;
  arg2 = (std::vector< dreal::drake::symbolic::Expression >::size_type)jarg2;
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< dreal::drake::symbolic::Expression > *arg1 = (std::vector< dreal::drake::symbolic::Expression > *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg1;
  result = (bool)((std::vector< dreal::drake::symbolic::Expression > const *)arg1)->empty();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< dreal::drake::symbolic::Expression > *arg1 = (std::vector< dreal::drake::symbolic::Expression > *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg1;
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1ExpressionVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  std::vector< dreal::drake::symbolic::Expression > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1;
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  try {
    result = (std::vector< dreal::drake::symbolic::Expression > *)new_std_vector_Sl_dreal_drake_symbolic_Expression_Sg___SWIG_2(SWIG_STD_MOVE(arg1),(dreal::drake::symbolic::Expression const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< dreal::drake::symbolic::Expression > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionVector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< dreal::drake::symbolic::Expression > *arg1 = (std::vector< dreal::drake::symbolic::Expression > *) 0 ;
  jint result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg1;
  try {
    result = std_vector_Sl_dreal_drake_symbolic_Expression_Sg__doSize((std::vector< dreal::drake::symbolic::Expression > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionVector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< dreal::drake::symbolic::Expression > *arg1 = (std::vector< dreal::drake::symbolic::Expression > *) 0 ;
  std::vector< dreal::drake::symbolic::Expression >::value_type *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg1;
  arg2 = *(std::vector< dreal::drake::symbolic::Expression >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Expression >::value_type const & is null");
    return ;
  }
  std_vector_Sl_dreal_drake_symbolic_Expression_Sg__doAdd__SWIG_0(arg1,(dreal::drake::symbolic::Expression const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionVector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< dreal::drake::symbolic::Expression > *arg1 = (std::vector< dreal::drake::symbolic::Expression > *) 0 ;
  jint arg2 ;
  std::vector< dreal::drake::symbolic::Expression >::value_type *arg3 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg1;
  arg2 = jarg2;
  arg3 = *(std::vector< dreal::drake::symbolic::Expression >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Expression >::value_type const & is null");
    return ;
  }
  try {
    std_vector_Sl_dreal_drake_symbolic_Expression_Sg__doAdd__SWIG_1(arg1,SWIG_STD_MOVE(arg2),(dreal::drake::symbolic::Expression const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionVector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Expression > *arg1 = (std::vector< dreal::drake::symbolic::Expression > *) 0 ;
  jint arg2 ;
  std::vector< dreal::drake::symbolic::Expression >::value_type result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg1;
  arg2 = jarg2;
  try {
    result = std_vector_Sl_dreal_drake_symbolic_Expression_Sg__doRemove(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< dreal::drake::symbolic::Expression >::value_type **)&jresult = new std::vector< dreal::drake::symbolic::Expression >::value_type(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionVector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Expression > *arg1 = (std::vector< dreal::drake::symbolic::Expression > *) 0 ;
  jint arg2 ;
  std::vector< dreal::drake::symbolic::Expression >::value_type *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg1;
  arg2 = jarg2;
  try {
    result = (std::vector< dreal::drake::symbolic::Expression >::value_type *) &std_vector_Sl_dreal_drake_symbolic_Expression_Sg__doGet(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< dreal::drake::symbolic::Expression >::value_type **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionVector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Expression > *arg1 = (std::vector< dreal::drake::symbolic::Expression > *) 0 ;
  jint arg2 ;
  std::vector< dreal::drake::symbolic::Expression >::value_type *arg3 = 0 ;
  std::vector< dreal::drake::symbolic::Expression >::value_type result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg1;
  arg2 = jarg2;
  arg3 = *(std::vector< dreal::drake::symbolic::Expression >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Expression >::value_type const & is null");
    return 0;
  }
  try {
    result = std_vector_Sl_dreal_drake_symbolic_Expression_Sg__doSet(arg1,SWIG_STD_MOVE(arg2),(dreal::drake::symbolic::Expression const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< dreal::drake::symbolic::Expression >::value_type **)&jresult = new std::vector< dreal::drake::symbolic::Expression >::value_type(result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionVector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< dreal::drake::symbolic::Expression > *arg1 = (std::vector< dreal::drake::symbolic::Expression > *) 0 ;
  jint arg2 ;
  jint arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg1;
  arg2 = jarg2;
  arg3 = jarg3;
  try {
    std_vector_Sl_dreal_drake_symbolic_Expression_Sg__doRemoveRange(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1ExpressionVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< dreal::drake::symbolic::Expression > *arg1 = (std::vector< dreal::drake::symbolic::Expression > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1ExpressionDoubleMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,double > *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (std::map< dreal::drake::symbolic::Expression,double > *)new std::map< dreal::drake::symbolic::Expression,double >();
  *(std::map< dreal::drake::symbolic::Expression,double > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1ExpressionDoubleMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,double > *arg1 = 0 ;
  std::map< dreal::drake::symbolic::Expression,double > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< dreal::drake::symbolic::Expression,double > const & is null");
    return 0;
  }
  result = (std::map< dreal::drake::symbolic::Expression,double > *)new std::map< dreal::drake::symbolic::Expression,double >((std::map< dreal::drake::symbolic::Expression,double > const &)*arg1);
  *(std::map< dreal::drake::symbolic::Expression,double > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionDoubleMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,double >::iterator *arg1 = (std::map< dreal::drake::symbolic::Expression,double >::iterator *) 0 ;
  std::map< dreal::drake::symbolic::Expression,double,std::less< dreal::drake::symbolic::Expression > >::iterator result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double >::iterator **)&jarg1;
  result = std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< dreal::drake::symbolic::Expression,double,std::less< dreal::drake::symbolic::Expression > >::iterator **)&jresult = new std::map< dreal::drake::symbolic::Expression,double,std::less< dreal::drake::symbolic::Expression > >::iterator(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionDoubleMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,double >::iterator *arg1 = (std::map< dreal::drake::symbolic::Expression,double >::iterator *) 0 ;
  std::map< dreal::drake::symbolic::Expression,double >::iterator arg2 ;
  std::map< dreal::drake::symbolic::Expression,double >::iterator *argp2 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double >::iterator **)&jarg1;
  argp2 = *(std::map< dreal::drake::symbolic::Expression,double >::iterator **)&jarg2;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< dreal::drake::symbolic::Expression,double >::iterator");
    return 0;
  }
  arg2 = *argp2;
  result = (bool)std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__iterator_isNot((std::map< dreal::drake::symbolic::Expression,double >::iterator const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionDoubleMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,double >::iterator *arg1 = (std::map< dreal::drake::symbolic::Expression,double >::iterator *) 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double >::iterator **)&jarg1;
  result = std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__iterator_getKey((std::map< dreal::drake::symbolic::Expression,double >::iterator const *)arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionDoubleMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,double >::iterator *arg1 = (std::map< dreal::drake::symbolic::Expression,double >::iterator *) 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double >::iterator **)&jarg1;
  result = (double)std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__iterator_getValue((std::map< dreal::drake::symbolic::Expression,double >::iterator const *)arg1);
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionDoubleMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::map< dreal::drake::symbolic::Expression,double >::iterator *arg1 = (std::map< dreal::drake::symbolic::Expression,double >::iterator *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double >::iterator **)&jarg1;
  temp2 = (double)jarg2;
  arg2 = &temp2;
  std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__iterator_setValue(arg1,(double const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1ExpressionDoubleMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< dreal::drake::symbolic::Expression,double >::iterator *arg1 = (std::map< dreal::drake::symbolic::Expression,double >::iterator *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double >::iterator **)&jarg1;
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionDoubleMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,double > *arg1 = (std::map< dreal::drake::symbolic::Expression,double > *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double > **)&jarg1;
  result = (bool)((std::map< dreal::drake::symbolic::Expression,double > const *)arg1)->empty();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionDoubleMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< dreal::drake::symbolic::Expression,double > *arg1 = (std::map< dreal::drake::symbolic::Expression,double > *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double > **)&jarg1;
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionDoubleMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,double > *arg1 = (std::map< dreal::drake::symbolic::Expression,double > *) 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  std::map< dreal::drake::symbolic::Expression,double >::iterator result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double > **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (arg1)->find((dreal::drake::symbolic::Expression const &)*arg2);
  *(std::map< dreal::drake::symbolic::Expression,double >::iterator **)&jresult = new std::map< dreal::drake::symbolic::Expression,double >::iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionDoubleMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,double > *arg1 = (std::map< dreal::drake::symbolic::Expression,double > *) 0 ;
  std::map< dreal::drake::symbolic::Expression,double >::iterator result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double > **)&jarg1;
  result = (arg1)->begin();
  *(std::map< dreal::drake::symbolic::Expression,double >::iterator **)&jresult = new std::map< dreal::drake::symbolic::Expression,double >::iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionDoubleMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,double > *arg1 = (std::map< dreal::drake::symbolic::Expression,double > *) 0 ;
  std::map< dreal::drake::symbolic::Expression,double >::iterator result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double > **)&jarg1;
  result = (arg1)->end();
  *(std::map< dreal::drake::symbolic::Expression,double >::iterator **)&jresult = new std::map< dreal::drake::symbolic::Expression,double >::iterator(result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionDoubleMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,double > *arg1 = (std::map< dreal::drake::symbolic::Expression,double > *) 0 ;
  jint result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double > **)&jarg1;
  try {
    result = std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__sizeImpl((std::map< dreal::drake::symbolic::Expression,double > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionDoubleMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,double > *arg1 = (std::map< dreal::drake::symbolic::Expression,double > *) 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double > **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__containsImpl(arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionDoubleMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  std::map< dreal::drake::symbolic::Expression,double > *arg1 = (std::map< dreal::drake::symbolic::Expression,double > *) 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double > **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return ;
  }
  temp3 = (double)jarg3;
  arg3 = &temp3;
  std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__putUnchecked(arg1,(dreal::drake::symbolic::Expression const &)*arg2,(double const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionDoubleMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< dreal::drake::symbolic::Expression,double > *arg1 = (std::map< dreal::drake::symbolic::Expression,double > *) 0 ;
  std::map< dreal::drake::symbolic::Expression,double,std::less< dreal::drake::symbolic::Expression > >::iterator arg2 ;
  std::map< dreal::drake::symbolic::Expression,double,std::less< dreal::drake::symbolic::Expression > >::iterator const *argp2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double > **)&jarg1;
  argp2 = *(std::map< dreal::drake::symbolic::Expression,double,std::less< dreal::drake::symbolic::Expression > >::iterator **)&jarg2;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< dreal::drake::symbolic::Expression,double,std::less< dreal::drake::symbolic::Expression > >::iterator const");
    return ;
  }
  arg2 = *argp2;
  std_map_Sl_dreal_drake_symbolic_Expression_Sc_double_Sg__removeUnchecked(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1ExpressionDoubleMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< dreal::drake::symbolic::Expression,double > *arg1 = (std::map< dreal::drake::symbolic::Expression,double > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,double > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1ExpressionExpressionMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *)new std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >();
  *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1ExpressionExpressionMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *arg1 = 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > const & is null");
    return 0;
  }
  result = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *)new std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >((std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > const &)*arg1);
  *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionExpressionMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator *) 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression,std::less< dreal::drake::symbolic::Expression > >::iterator result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator **)&jarg1;
  result = std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression,std::less< dreal::drake::symbolic::Expression > >::iterator **)&jresult = new std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression,std::less< dreal::drake::symbolic::Expression > >::iterator(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionExpressionMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator *) 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator arg2 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator *argp2 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator **)&jarg1;
  argp2 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator **)&jarg2;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator");
    return 0;
  }
  arg2 = *argp2;
  result = (bool)std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__iterator_isNot((std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionExpressionMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator *) 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator **)&jarg1;
  result = std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__iterator_getKey((std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator const *)arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionExpressionMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator *) 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator **)&jarg1;
  result = std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__iterator_getValue((std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator const *)arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionExpressionMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator *) 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return ;
  }
  std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__iterator_setValue(arg1,(dreal::drake::symbolic::Expression const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1ExpressionExpressionMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator **)&jarg1;
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionExpressionMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > **)&jarg1;
  result = (bool)((std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > const *)arg1)->empty();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionExpressionMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > **)&jarg1;
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionExpressionMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *) 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (arg1)->find((dreal::drake::symbolic::Expression const &)*arg2);
  *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator **)&jresult = new std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionExpressionMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *) 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > **)&jarg1;
  result = (arg1)->begin();
  *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator **)&jresult = new std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionExpressionMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *) 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > **)&jarg1;
  result = (arg1)->end();
  *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator **)&jresult = new std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression >::iterator(result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionExpressionMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *) 0 ;
  jint result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > **)&jarg1;
  try {
    result = std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__sizeImpl((std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionExpressionMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *) 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__containsImpl(arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionExpressionMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *) 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Expression *arg3 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return ;
  }
  arg3 = *(dreal::drake::symbolic::Expression **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return ;
  }
  std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__putUnchecked(arg1,(dreal::drake::symbolic::Expression const &)*arg2,(dreal::drake::symbolic::Expression const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_ExpressionExpressionMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *) 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression,std::less< dreal::drake::symbolic::Expression > >::iterator arg2 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression,std::less< dreal::drake::symbolic::Expression > >::iterator const *argp2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > **)&jarg1;
  argp2 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression,std::less< dreal::drake::symbolic::Expression > >::iterator **)&jarg2;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression,std::less< dreal::drake::symbolic::Expression > >::iterator const");
    return ;
  }
  arg2 = *argp2;
  std_map_Sl_dreal_drake_symbolic_Expression_Sc_dreal_drake_symbolic_Expression_Sg__removeUnchecked(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1ExpressionExpressionMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *arg1 = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1DoubleIntPair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< double,int > *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (std::pair< double,int > *)new std::pair< double,int >();
  *(std::pair< double,int > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1DoubleIntPair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jint jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  int arg2 ;
  std::pair< double,int > *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1;
  arg2 = (int)jarg2;
  result = (std::pair< double,int > *)new std::pair< double,int >(arg1,arg2);
  *(std::pair< double,int > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1DoubleIntPair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< double,int > *arg1 = 0 ;
  std::pair< double,int > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< double,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< double,int > const & is null");
    return 0;
  }
  result = (std::pair< double,int > *)new std::pair< double,int >((std::pair< double,int > const &)*arg1);
  *(std::pair< double,int > **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_DoubleIntPair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::pair< double,int > *arg1 = (std::pair< double,int > *) 0 ;
  double arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< double,int > **)&jarg1;
  arg2 = (double)jarg2;
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_DoubleIntPair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  std::pair< double,int > *arg1 = (std::pair< double,int > *) 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< double,int > **)&jarg1;
  result = (double) ((arg1)->first);
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_DoubleIntPair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< double,int > *arg1 = (std::pair< double,int > *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< double,int > **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_DoubleIntPair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< double,int > *arg1 = (std::pair< double,int > *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< double,int > **)&jarg1;
  result = (int) ((arg1)->second);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1DoubleIntPair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< double,int > *arg1 = (std::pair< double,int > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< double,int > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1BoxBoxPair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< dreal::Box,dreal::Box > *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (std::pair< dreal::Box,dreal::Box > *)new std::pair< dreal::Box,dreal::Box >();
  *(std::pair< dreal::Box,dreal::Box > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1BoxBoxPair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::Box arg1 ;
  dreal::Box arg2 ;
  dreal::Box *argp1 ;
  dreal::Box *argp2 ;
  std::pair< dreal::Box,dreal::Box > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(dreal::Box **)&jarg1;
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dreal::Box");
    return 0;
  }
  arg1 = *argp1;
  argp2 = *(dreal::Box **)&jarg2;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dreal::Box");
    return 0;
  }
  arg2 = *argp2;
  result = (std::pair< dreal::Box,dreal::Box > *)new std::pair< dreal::Box,dreal::Box >(arg1,arg2);
  *(std::pair< dreal::Box,dreal::Box > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1BoxBoxPair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< dreal::Box,dreal::Box > *arg1 = 0 ;
  std::pair< dreal::Box,dreal::Box > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< dreal::Box,dreal::Box > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< dreal::Box,dreal::Box > const & is null");
    return 0;
  }
  result = (std::pair< dreal::Box,dreal::Box > *)new std::pair< dreal::Box,dreal::Box >((std::pair< dreal::Box,dreal::Box > const &)*arg1);
  *(std::pair< dreal::Box,dreal::Box > **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_BoxBoxPair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< dreal::Box,dreal::Box > *arg1 = (std::pair< dreal::Box,dreal::Box > *) 0 ;
  dreal::Box *arg2 = (dreal::Box *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< dreal::Box,dreal::Box > **)&jarg1;
  arg2 = *(dreal::Box **)&jarg2;
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_BoxBoxPair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< dreal::Box,dreal::Box > *arg1 = (std::pair< dreal::Box,dreal::Box > *) 0 ;
  dreal::Box *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< dreal::Box,dreal::Box > **)&jarg1;
  result = (dreal::Box *)& ((arg1)->first);
  *(dreal::Box **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_BoxBoxPair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< dreal::Box,dreal::Box > *arg1 = (std::pair< dreal::Box,dreal::Box > *) 0 ;
  dreal::Box *arg2 = (dreal::Box *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< dreal::Box,dreal::Box > **)&jarg1;
  arg2 = *(dreal::Box **)&jarg2;
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_BoxBoxPair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< dreal::Box,dreal::Box > *arg1 = (std::pair< dreal::Box,dreal::Box > *) 0 ;
  dreal::Box *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< dreal::Box,dreal::Box > **)&jarg1;
  result = (dreal::Box *)& ((arg1)->second);
  *(dreal::Box **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1BoxBoxPair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< dreal::Box,dreal::Box > *arg1 = (std::pair< dreal::Box,dreal::Box > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< dreal::Box,dreal::Box > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1VaribaleIntUnorderedMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int > *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (std::unordered_map< dreal::drake::symbolic::Variable,int > *)new std::unordered_map< dreal::drake::symbolic::Variable,int >();
  *(std::unordered_map< dreal::drake::symbolic::Variable,int > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1VaribaleIntUnorderedMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int > *arg1 = 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unordered_map< dreal::drake::symbolic::Variable,int > const & is null");
    return 0;
  }
  result = (std::unordered_map< dreal::drake::symbolic::Variable,int > *)new std::unordered_map< dreal::drake::symbolic::Variable,int >((std::unordered_map< dreal::drake::symbolic::Variable,int > const &)*arg1);
  *(std::unordered_map< dreal::drake::symbolic::Variable,int > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VaribaleIntUnorderedMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator *) 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator **)&jarg1;
  result = std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__iterator_getNextUnchecked(arg1);
  *(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator **)&jresult = new std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VaribaleIntUnorderedMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator *) 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator arg2 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator *argp2 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator **)&jarg1;
  argp2 = *(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator **)&jarg2;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator");
    return 0;
  }
  arg2 = *argp2;
  result = (bool)std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__iterator_isNot((std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VaribaleIntUnorderedMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator *) 0 ;
  dreal::drake::symbolic::Variable result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator **)&jarg1;
  result = std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__iterator_getKey((std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator const *)arg1);
  *(dreal::drake::symbolic::Variable **)&jresult = new dreal::drake::symbolic::Variable(result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VaribaleIntUnorderedMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator **)&jarg1;
  result = (int)std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__iterator_getValue((std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator const *)arg1);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VaribaleIntUnorderedMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator **)&jarg1;
  temp2 = (int)jarg2;
  arg2 = &temp2;
  std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__iterator_setValue(arg1,(int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1VaribaleIntUnorderedMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator **)&jarg1;
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VaribaleIntUnorderedMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int > *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int > *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int > **)&jarg1;
  result = (bool)((std::unordered_map< dreal::drake::symbolic::Variable,int > const *)arg1)->empty();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VaribaleIntUnorderedMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::unordered_map< dreal::drake::symbolic::Variable,int > *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int > *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int > **)&jarg1;
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VaribaleIntUnorderedMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int > *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int > *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int > **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = (arg1)->find((dreal::drake::symbolic::Variable const &)*arg2);
  *(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator **)&jresult = new std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VaribaleIntUnorderedMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int > *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int > *) 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int > **)&jarg1;
  result = (arg1)->begin();
  *(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator **)&jresult = new std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VaribaleIntUnorderedMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int > *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int > *) 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int > **)&jarg1;
  result = (arg1)->end();
  *(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator **)&jresult = new std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator(result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VaribaleIntUnorderedMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int > *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int > *) 0 ;
  jint result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int > **)&jarg1;
  try {
    result = std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__sizeImpl((std::unordered_map< dreal::drake::symbolic::Variable,int > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VaribaleIntUnorderedMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int > *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int > *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int > **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = (bool)std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__containsImpl(arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VaribaleIntUnorderedMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  std::unordered_map< dreal::drake::symbolic::Variable,int > *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int > *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int > **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return ;
  }
  temp3 = (int)jarg3;
  arg3 = &temp3;
  std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__putUnchecked(arg1,(dreal::drake::symbolic::Variable const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VaribaleIntUnorderedMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::unordered_map< dreal::drake::symbolic::Variable,int > *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int > *) 0 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator arg2 ;
  std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator const *argp2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int > **)&jarg1;
  argp2 = *(std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator **)&jarg2;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::unordered_map< dreal::drake::symbolic::Variable,int >::iterator const");
    return ;
  }
  arg2 = *argp2;
  std_unordered_map_Sl_dreal_drake_symbolic_Variable_Sc_int_Sg__removeUnchecked(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1VaribaleIntUnorderedMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::unordered_map< dreal::drake::symbolic::Variable,int > *arg1 = (std::unordered_map< dreal::drake::symbolic::Variable,int > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::unordered_map< dreal::drake::symbolic::Variable,int > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1SharedPointerToVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::shared_ptr< std::vector< dreal::drake::symbolic::Variable > > *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (std::shared_ptr< std::vector< dreal::drake::symbolic::Variable > > *)new std::shared_ptr< std::vector< dreal::drake::symbolic::Variable > >();
  *(std::shared_ptr< std::vector< dreal::drake::symbolic::Variable > > **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1SharedPointerToVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::shared_ptr< std::vector< dreal::drake::symbolic::Variable > > *arg1 = (std::shared_ptr< std::vector< dreal::drake::symbolic::Variable > > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::shared_ptr< std::vector< dreal::drake::symbolic::Variable > > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1SharedPointerToUnorderedMapWithHashValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::shared_ptr< std::unordered_map< dreal::drake::symbolic::Variable,int,dreal::drake::hash_value< dreal::drake::symbolic::Variable > > > *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (std::shared_ptr< std::unordered_map< dreal::drake::symbolic::Variable,int,dreal::drake::hash_value< dreal::drake::symbolic::Variable > > > *)new std::shared_ptr< std::unordered_map< dreal::drake::symbolic::Variable,int,dreal::drake::hash_value< dreal::drake::symbolic::Variable > > >();
  *(std::shared_ptr< std::unordered_map< dreal::drake::symbolic::Variable,int,dreal::drake::hash_value< dreal::drake::symbolic::Variable > > > **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1SharedPointerToUnorderedMapWithHashValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::shared_ptr< std::unordered_map< dreal::drake::symbolic::Variable,int,dreal::drake::hash_value< dreal::drake::symbolic::Variable > > > *arg1 = (std::shared_ptr< std::unordered_map< dreal::drake::symbolic::Variable,int,dreal::drake::hash_value< dreal::drake::symbolic::Variable > > > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::shared_ptr< std::unordered_map< dreal::drake::symbolic::Variable,int,dreal::drake::hash_value< dreal::drake::symbolic::Variable > > > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1SharedPointerToUnorderedMap(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::shared_ptr< std::unordered_map< int,dreal::drake::symbolic::Variable > > *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (std::shared_ptr< std::unordered_map< int,dreal::drake::symbolic::Variable > > *)new std::shared_ptr< std::unordered_map< int,dreal::drake::symbolic::Variable > >();
  *(std::shared_ptr< std::unordered_map< int,dreal::drake::symbolic::Variable > > **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1SharedPointerToUnorderedMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::shared_ptr< std::unordered_map< int,dreal::drake::symbolic::Variable > > *arg1 = (std::shared_ptr< std::unordered_map< int,dreal::drake::symbolic::Variable > > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::shared_ptr< std::unordered_map< int,dreal::drake::symbolic::Variable > > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Variable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Variable *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Variable *)new dreal::drake::symbolic::Variable((dreal::drake::symbolic::Variable const &)*arg1);
  *(dreal::drake::symbolic::Variable **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variable_1AssignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = (dreal::drake::symbolic::Variable *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Variable *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Variable *) &(arg1)->operator =((dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Variable **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Variable_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (dreal::drake::symbolic::Variable *)new dreal::drake::symbolic::Variable();
  *(dreal::drake::symbolic::Variable **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1Variable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dreal::drake::symbolic::Variable *arg1 = (dreal::drake::symbolic::Variable *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Variable_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  dreal::drake::symbolic::Variable::Type arg2 ;
  dreal::drake::symbolic::Variable *result = 0 ;

  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);
  arg2 = (dreal::drake::symbolic::Variable::Type)jarg2;
  result = (dreal::drake::symbolic::Variable *)new dreal::drake::symbolic::Variable(arg1,arg2);
  *(dreal::drake::symbolic::Variable **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Variable_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  dreal::drake::symbolic::Variable *result = 0 ;

  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);
  result = (dreal::drake::symbolic::Variable *)new dreal::drake::symbolic::Variable(arg1);
  *(dreal::drake::symbolic::Variable **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Variable_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  std::string arg1 ;
  dreal::drake::symbolic::Variable::Type arg2 ;
  bool arg3 ;
  dreal::drake::symbolic::Variable *result = 0 ;

  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);
  arg2 = (dreal::drake::symbolic::Variable::Type)jarg2;
  arg3 = jarg3 ? true : false;
  result = (dreal::drake::symbolic::Variable *)new dreal::drake::symbolic::Variable(arg1,arg2,arg3);
  *(dreal::drake::symbolic::Variable **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variable_1is_1dummy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = (dreal::drake::symbolic::Variable *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  result = (bool)((dreal::drake::symbolic::Variable const *)arg1)->is_dummy();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variable_1get_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = (dreal::drake::symbolic::Variable *) 0 ;
  dreal::drake::symbolic::Variable::Id result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  result = ((dreal::drake::symbolic::Variable const *)arg1)->get_id();
  jresult = (jlong)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variable_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = (dreal::drake::symbolic::Variable *) 0 ;
  dreal::drake::symbolic::Variable::Type result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  result = (dreal::drake::symbolic::Variable::Type)((dreal::drake::symbolic::Variable const *)arg1)->get_type();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variable_1get_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = (dreal::drake::symbolic::Variable *) 0 ;
  size_t result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  result = ((dreal::drake::symbolic::Variable const *)arg1)->get_hash();
  jresult = (jlong)result;
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variable_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = (dreal::drake::symbolic::Variable *) 0 ;
  std::string result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  result = ((dreal::drake::symbolic::Variable const *)arg1)->get_name();
  jresult = jenv->NewStringUTF((&result)->c_str());
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variable_1to_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = (dreal::drake::symbolic::Variable *) 0 ;
  std::string result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  result = ((dreal::drake::symbolic::Variable const *)arg1)->to_string();
  jresult = jenv->NewStringUTF((&result)->c_str());
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variable_1equal_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = (dreal::drake::symbolic::Variable *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = (bool)((dreal::drake::symbolic::Variable const *)arg1)->equal_to((dreal::drake::symbolic::Variable const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variable_1less(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = (dreal::drake::symbolic::Variable *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = (bool)((dreal::drake::symbolic::Variable const *)arg1)->less((dreal::drake::symbolic::Variable const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_InsertOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  std::ostream *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = (std::ostream *) &operator <<(*arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  *(std::ostream **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_InsertOperator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  dreal::drake::symbolic::Variable::Type arg2 ;
  std::ostream *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & is null");
    return 0;
  }
  arg2 = (dreal::drake::symbolic::Variable::Type)jarg2;
  result = (std::ostream *) &dreal::drake::symbolic::operator <<(*arg1,arg2);
  *(std::ostream **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Variables_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = 0 ;
  dreal::drake::symbolic::Variables *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Variables *)new dreal::drake::symbolic::Variables((dreal::drake::symbolic::Variables const &)*arg1);
  *(dreal::drake::symbolic::Variables **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1AssignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  dreal::drake::symbolic::Variables *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Variables *) &(arg1)->operator =((dreal::drake::symbolic::Variables const &)*arg2);
  *(dreal::drake::symbolic::Variables **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Variables_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (dreal::drake::symbolic::Variables *)new dreal::drake::symbolic::Variables();
  *(dreal::drake::symbolic::Variables **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1Variables(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Variables_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::initializer_list< dreal::drake::symbolic::Variable > > arg1 ;
  dreal::drake::symbolic::Variables *result = 0 ;

  (void)jenv;
  (void)jcls;

  result = (dreal::drake::symbolic::Variables *)new dreal::drake::symbolic::Variables(arg1);
  *(dreal::drake::symbolic::Variables **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1get_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  size_t result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  result = ((dreal::drake::symbolic::Variables const *)arg1)->get_hash();
  jresult = (jlong)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  //SwigValueWrapper< std::set< dreal::drake::symbolic::Variable >::size_type > result;
  size_t result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  result = ((dreal::drake::symbolic::Variables const *)arg1)->size();
  //*(dreal::drake::symbolic::Variables::size_type **)&jresult = new dreal::drake::symbolic::Variables::size_type(result);
  jresult = (jlong)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  result = (bool)((dreal::drake::symbolic::Variables const *)arg1)->empty();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1to_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  std::string result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  result = ((dreal::drake::symbolic::Variables const *)arg1)->to_string();
  jresult = jenv->NewStringUTF((&result)->c_str());
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  SwigValueWrapper< std::set< dreal::drake::symbolic::Variable >::iterator > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  result = (arg1)->begin();
  *(dreal::drake::symbolic::Variables::iterator **)&jresult = new dreal::drake::symbolic::Variables::iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  SwigValueWrapper< std::set< dreal::drake::symbolic::Variable >::iterator > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  result = (arg1)->end();
  *(dreal::drake::symbolic::Variables::iterator **)&jresult = new dreal::drake::symbolic::Variables::iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1cbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  SwigValueWrapper< std::set< dreal::drake::symbolic::Variable >::const_iterator > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  result = ((dreal::drake::symbolic::Variables const *)arg1)->cbegin();
  *(dreal::drake::symbolic::Variables::const_iterator **)&jresult = new dreal::drake::symbolic::Variables::const_iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1cend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  SwigValueWrapper< std::set< dreal::drake::symbolic::Variable >::const_iterator > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  result = ((dreal::drake::symbolic::Variables const *)arg1)->cend();
  *(dreal::drake::symbolic::Variables::const_iterator **)&jresult = new dreal::drake::symbolic::Variables::const_iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1rbegin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  SwigValueWrapper< std::set< dreal::drake::symbolic::Variable >::reverse_iterator > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  result = (arg1)->rbegin();
  *(dreal::drake::symbolic::Variables::reverse_iterator **)&jresult = new dreal::drake::symbolic::Variables::reverse_iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1rend_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  SwigValueWrapper< std::set< dreal::drake::symbolic::Variable >::reverse_iterator > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  result = (arg1)->rend();
  *(dreal::drake::symbolic::Variables::reverse_iterator **)&jresult = new dreal::drake::symbolic::Variables::reverse_iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1crbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  SwigValueWrapper< std::set< dreal::drake::symbolic::Variable >::const_reverse_iterator > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  result = ((dreal::drake::symbolic::Variables const *)arg1)->crbegin();
  *(dreal::drake::symbolic::Variables::const_reverse_iterator **)&jresult = new dreal::drake::symbolic::Variables::const_reverse_iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1crend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  SwigValueWrapper< std::set< dreal::drake::symbolic::Variable >::const_reverse_iterator > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  result = ((dreal::drake::symbolic::Variables const *)arg1)->crend();
  *(dreal::drake::symbolic::Variables::const_reverse_iterator **)&jresult = new dreal::drake::symbolic::Variables::const_reverse_iterator(result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return ;
  }
  (arg1)->insert((dreal::drake::symbolic::Variable const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1insert_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return ;
  }
  (arg1)->insert((dreal::drake::symbolic::Variables const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  //SwigValueWrapper< std::set< dreal::drake::symbolic::Variable >::size_type > result;
  size_t result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = (arg1)->erase((dreal::drake::symbolic::Variable const &)*arg2);
  //*(dreal::drake::symbolic::Variables::size_type **)&jresult = new dreal::drake::symbolic::Variables::size_type(result);
  jresult = (jlong)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  //SwigValueWrapper< std::set< dreal::drake::symbolic::Variable >::size_type > result;
  size_t result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = (arg1)->erase((dreal::drake::symbolic::Variables const &)*arg2);
  //*(dreal::drake::symbolic::Variables::size_type **)&jresult = new dreal::drake::symbolic::Variables::size_type(result);
  jresult = (jlong)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  SwigValueWrapper< std::set< dreal::drake::symbolic::Variable >::iterator > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = (arg1)->find((dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Variables::iterator **)&jresult = new dreal::drake::symbolic::Variables::iterator(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1include(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = (bool)((dreal::drake::symbolic::Variables const *)arg1)->include((dreal::drake::symbolic::Variable const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1IsSubsetOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = (bool)((dreal::drake::symbolic::Variables const *)arg1)->IsSubsetOf((dreal::drake::symbolic::Variables const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1IsSupersetOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = (bool)((dreal::drake::symbolic::Variables const *)arg1)->IsSupersetOf((dreal::drake::symbolic::Variables const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1IsStrictSubsetOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = (bool)((dreal::drake::symbolic::Variables const *)arg1)->IsStrictSubsetOf((dreal::drake::symbolic::Variables const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Variables_1IsStrictSupersetOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = (dreal::drake::symbolic::Variables *) 0 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = (bool)((dreal::drake::symbolic::Variables const *)arg1)->IsStrictSupersetOf((dreal::drake::symbolic::Variables const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Equal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = 0 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = (bool)operator ==((dreal::drake::symbolic::Variables const &)*arg1,(dreal::drake::symbolic::Variables const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Less_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = 0 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = (bool)operator <((dreal::drake::symbolic::Variables const &)*arg1,(dreal::drake::symbolic::Variables const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_InsertOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  std::ostream *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = (std::ostream *) &operator <<(*arg1,(dreal::drake::symbolic::Variables const &)*arg2);
  *(std::ostream **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_intersect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = 0 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  dreal::drake::symbolic::Variables result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::intersect((dreal::drake::symbolic::Variables const &)*arg1,(dreal::drake::symbolic::Variables const &)*arg2);
  *(dreal::drake::symbolic::Variables **)&jresult = new dreal::drake::symbolic::Variables(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_AddEqual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = 0 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  dreal::drake::symbolic::Variables result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator +=(*arg1,(dreal::drake::symbolic::Variables const &)*arg2);
  *(dreal::drake::symbolic::Variables **)&jresult = new dreal::drake::symbolic::Variables(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_AddEqual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Variables result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator +=(*arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Variables **)&jresult = new dreal::drake::symbolic::Variables(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables arg1 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  dreal::drake::symbolic::Variables *argp1 ;
  dreal::drake::symbolic::Variables result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dreal::drake::symbolic::Variables");
    return 0;
  }
  arg1 = *argp1;
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator +(SWIG_STD_MOVE(arg1),(dreal::drake::symbolic::Variables const &)*arg2);
  *(dreal::drake::symbolic::Variables **)&jresult = new dreal::drake::symbolic::Variables(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables arg1 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Variables *argp1 ;
  dreal::drake::symbolic::Variables result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dreal::drake::symbolic::Variables");
    return 0;
  }
  arg1 = *argp1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator +(SWIG_STD_MOVE(arg1),(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Variables **)&jresult = new dreal::drake::symbolic::Variables(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Variables arg2 ;
  dreal::drake::symbolic::Variables *argp2 ;
  dreal::drake::symbolic::Variables result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  argp2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dreal::drake::symbolic::Variables");
    return 0;
  }
  arg2 = *argp2;
  result = dreal::drake::symbolic::operator +((dreal::drake::symbolic::Variable const &)*arg1,SWIG_STD_MOVE(arg2));
  *(dreal::drake::symbolic::Variables **)&jresult = new dreal::drake::symbolic::Variables(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_SubstractEqual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = 0 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  dreal::drake::symbolic::Variables result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator -=(*arg1,(dreal::drake::symbolic::Variables const &)*arg2);
  *(dreal::drake::symbolic::Variables **)&jresult = new dreal::drake::symbolic::Variables(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_SubstractEqual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Variables result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator -=(*arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Variables **)&jresult = new dreal::drake::symbolic::Variables(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Substract_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables arg1 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  dreal::drake::symbolic::Variables *argp1 ;
  dreal::drake::symbolic::Variables result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dreal::drake::symbolic::Variables");
    return 0;
  }
  arg1 = *argp1;
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator -(SWIG_STD_MOVE(arg1),(dreal::drake::symbolic::Variables const &)*arg2);
  *(dreal::drake::symbolic::Variables **)&jresult = new dreal::drake::symbolic::Variables(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Substract_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables arg1 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Variables *argp1 ;
  dreal::drake::symbolic::Variables result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dreal::drake::symbolic::Variables");
    return 0;
  }
  arg1 = *argp1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator -(SWIG_STD_MOVE(arg1),(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Variables **)&jresult = new dreal::drake::symbolic::Variables(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Environment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Environment *arg1 = 0 ;
  dreal::drake::symbolic::Environment *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Environment **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Environment const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Environment *)new dreal::drake::symbolic::Environment((dreal::drake::symbolic::Environment const &)*arg1);
  *(dreal::drake::symbolic::Environment **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Environment_1AssignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Environment *arg1 = (dreal::drake::symbolic::Environment *) 0 ;
  dreal::drake::symbolic::Environment *arg2 = 0 ;
  dreal::drake::symbolic::Environment *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Environment **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Environment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Environment const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Environment *) &(arg1)->operator =((dreal::drake::symbolic::Environment const &)*arg2);
  *(dreal::drake::symbolic::Environment **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Environment_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Environment *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (dreal::drake::symbolic::Environment *)new dreal::drake::symbolic::Environment();
  *(dreal::drake::symbolic::Environment **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1Environment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dreal::drake::symbolic::Environment *arg1 = (dreal::drake::symbolic::Environment *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(dreal::drake::symbolic::Environment **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Environment_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::initializer_list< std::unordered_map< dreal::drake::symbolic::Variable,double,dreal::drake::hash_value< dreal::drake::symbolic::Variable > >::value_type > > arg1 ;
  dreal::drake::symbolic::Environment *result = 0 ;

  (void)jenv;
  (void)jcls;

  result = (dreal::drake::symbolic::Environment *)new dreal::drake::symbolic::Environment(arg1);
  *(dreal::drake::symbolic::Environment **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Environment_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::initializer_list< dreal::drake::symbolic::Variable > > arg1 ;
  dreal::drake::symbolic::Environment *result = 0 ;

  (void)jenv;
  (void)jcls;

  result = (dreal::drake::symbolic::Environment *)new dreal::drake::symbolic::Environment(arg1);
  *(dreal::drake::symbolic::Environment **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Environment_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::unordered_map< dreal::drake::symbolic::Variable,double,dreal::drake::hash_value< dreal::drake::symbolic::Variable > > > arg1 ;
  dreal::drake::symbolic::Environment::map *argp1 ;
  dreal::drake::symbolic::Environment *result = 0 ;

  (void)jenv;
  (void)jcls;
  argp1 = *(dreal::drake::symbolic::Environment::map **)&jarg1;
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dreal::drake::symbolic::Environment::map");
    return 0;
  }
  arg1 = *argp1;
  result = (dreal::drake::symbolic::Environment *)new dreal::drake::symbolic::Environment(arg1);
  *(dreal::drake::symbolic::Environment **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Environment_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Environment *arg1 = (dreal::drake::symbolic::Environment *) 0 ;
  SwigValueWrapper< std::unordered_map< dreal::drake::symbolic::Variable,double,dreal::drake::hash_value< dreal::drake::symbolic::Variable > >::iterator > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Environment **)&jarg1;
  result = (arg1)->begin();
  *(dreal::drake::symbolic::Environment::iterator **)&jresult = new dreal::drake::symbolic::Environment::iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Environment_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Environment *arg1 = (dreal::drake::symbolic::Environment *) 0 ;
  SwigValueWrapper< std::unordered_map< dreal::drake::symbolic::Variable,double,dreal::drake::hash_value< dreal::drake::symbolic::Variable > >::iterator > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Environment **)&jarg1;
  result = (arg1)->end();
  *(dreal::drake::symbolic::Environment::iterator **)&jresult = new dreal::drake::symbolic::Environment::iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Environment_1cbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Environment *arg1 = (dreal::drake::symbolic::Environment *) 0 ;
  SwigValueWrapper< std::unordered_map< dreal::drake::symbolic::Variable,double,dreal::drake::hash_value< dreal::drake::symbolic::Variable > >::const_iterator > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Environment **)&jarg1;
  result = ((dreal::drake::symbolic::Environment const *)arg1)->cbegin();
  *(dreal::drake::symbolic::Environment::const_iterator **)&jresult = new dreal::drake::symbolic::Environment::const_iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Environment_1cend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Environment *arg1 = (dreal::drake::symbolic::Environment *) 0 ;
  SwigValueWrapper< std::unordered_map< dreal::drake::symbolic::Variable,double,dreal::drake::hash_value< dreal::drake::symbolic::Variable > >::const_iterator > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Environment **)&jarg1;
  result = ((dreal::drake::symbolic::Environment const *)arg1)->cend();
  *(dreal::drake::symbolic::Environment::const_iterator **)&jresult = new dreal::drake::symbolic::Environment::const_iterator(result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Environment_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  dreal::drake::symbolic::Environment *arg1 = (dreal::drake::symbolic::Environment *) 0 ;
  dreal::drake::symbolic::Environment::key_type *arg2 = 0 ;
  dreal::drake::symbolic::Environment::mapped_type *arg3 = 0 ;
  dreal::drake::symbolic::Environment::mapped_type temp3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Environment **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Environment::key_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Environment::key_type const & is null");
    return ;
  }
  temp3 = (dreal::drake::symbolic::Environment::mapped_type)jarg3;
  arg3 = &temp3;
  (arg1)->insert((dreal::drake::symbolic::Environment::key_type const &)*arg2,(dreal::drake::symbolic::Environment::mapped_type const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Environment_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Environment *arg1 = (dreal::drake::symbolic::Environment *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Environment **)&jarg1;
  result = (bool)((dreal::drake::symbolic::Environment const *)arg1)->empty();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Environment_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Environment *arg1 = (dreal::drake::symbolic::Environment *) 0 ;
  size_t result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Environment **)&jarg1;
  result = ((dreal::drake::symbolic::Environment const *)arg1)->size();
  jresult = (jlong)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Environment_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Environment *arg1 = (dreal::drake::symbolic::Environment *) 0 ;
  dreal::drake::symbolic::Environment::key_type *arg2 = 0 ;
  SwigValueWrapper< std::unordered_map< dreal::drake::symbolic::Variable,double,dreal::drake::hash_value< dreal::drake::symbolic::Variable > >::iterator > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Environment **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Environment::key_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Environment::key_type const & is null");
    return 0;
  }
  result = (arg1)->find((dreal::drake::symbolic::Environment::key_type const &)*arg2);
  *(dreal::drake::symbolic::Environment::iterator **)&jresult = new dreal::drake::symbolic::Environment::iterator(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Environment_1domain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Environment *arg1 = (dreal::drake::symbolic::Environment *) 0 ;
  dreal::drake::symbolic::Variables result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Environment **)&jarg1;
  result = ((dreal::drake::symbolic::Environment const *)arg1)->domain();
  *(dreal::drake::symbolic::Variables **)&jresult = new dreal::drake::symbolic::Variables(result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Environment_1to_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dreal::drake::symbolic::Environment *arg1 = (dreal::drake::symbolic::Environment *) 0 ;
  std::string result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Environment **)&jarg1;
  result = ((dreal::drake::symbolic::Environment const *)arg1)->to_string();
  jresult = jenv->NewStringUTF((&result)->c_str());
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Environment_1Indexing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Environment *arg1 = (dreal::drake::symbolic::Environment *) 0 ;
  dreal::drake::symbolic::Environment::key_type *arg2 = 0 ;
  dreal::drake::symbolic::Environment::mapped_type *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Environment **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Environment::key_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Environment::key_type const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Environment::mapped_type *) &(arg1)->operator []((dreal::drake::symbolic::Environment::key_type const &)*arg2);
  *(dreal::drake::symbolic::Environment::mapped_type **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_InsertOperator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  dreal::drake::symbolic::Environment *arg2 = 0 ;
  std::ostream *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Environment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Environment const & is null");
    return 0;
  }
  result = (std::ostream *) &operator <<(*arg1,(dreal::drake::symbolic::Environment const &)*arg2);
  *(std::ostream **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Less_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::ExpressionKind arg1 ;
  dreal::drake::symbolic::ExpressionKind arg2 ;
  bool result;

  (void)jenv;
  (void)jcls;
  arg1 = (dreal::drake::symbolic::ExpressionKind)jarg1;
  arg2 = (dreal::drake::symbolic::ExpressionKind)jarg2;
  result = (bool)dreal::drake::symbolic::operator <(arg1,arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Expression_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Expression *)new dreal::drake::symbolic::Expression((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1AssignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Expression *) &(arg1)->operator =((dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1Expression(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Expression_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (dreal::drake::symbolic::Expression *)new dreal::drake::symbolic::Expression();
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Expression_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1;
  result = (dreal::drake::symbolic::Expression *)new dreal::drake::symbolic::Expression(arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Expression_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Expression *)new dreal::drake::symbolic::Expression((dreal::drake::symbolic::Variable const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1get_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  dreal::drake::symbolic::ExpressionKind result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  result = (dreal::drake::symbolic::ExpressionKind)((dreal::drake::symbolic::Expression const *)arg1)->get_kind();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1get_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  size_t result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  result = ((dreal::drake::symbolic::Expression const *)arg1)->get_hash();
  jresult = (jlong)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1GetVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  dreal::drake::symbolic::Variables *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  result = (dreal::drake::symbolic::Variables *) &((dreal::drake::symbolic::Expression const *)arg1)->GetVariables();
  *(dreal::drake::symbolic::Variables **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1EqualTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)((dreal::drake::symbolic::Expression const *)arg1)->EqualTo((dreal::drake::symbolic::Expression const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1Less(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)((dreal::drake::symbolic::Expression const *)arg1)->Less((dreal::drake::symbolic::Expression const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1is_1polynomial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  result = (bool)((dreal::drake::symbolic::Expression const *)arg1)->is_polynomial();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1include_1ite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  result = (bool)((dreal::drake::symbolic::Expression const *)arg1)->include_ite();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1Evaluate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  dreal::drake::symbolic::Environment *arg2 = 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Environment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Environment const & is null");
    return 0;
  }
  result = (double)((dreal::drake::symbolic::Expression const *)arg1)->Evaluate((dreal::drake::symbolic::Environment const &)*arg2);
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1Evaluate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  result = (double)((dreal::drake::symbolic::Expression const *)arg1)->Evaluate();
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1EvaluatePartial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  dreal::drake::symbolic::Environment *arg2 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Environment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Environment const & is null");
    return 0;
  }
  result = ((dreal::drake::symbolic::Expression const *)arg1)->EvaluatePartial((dreal::drake::symbolic::Environment const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1Expand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  result = ((dreal::drake::symbolic::Expression const *)arg1)->Expand();
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1Substitute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Expression *arg3 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  arg3 = *(dreal::drake::symbolic::Expression **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = ((dreal::drake::symbolic::Expression const *)arg1)->Substitute((dreal::drake::symbolic::Variable const &)*arg2,(dreal::drake::symbolic::Expression const &)*arg3);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1Substitute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  dreal::drake::symbolic::ExpressionSubstitution *arg2 = 0 ;
  dreal::drake::symbolic::FormulaSubstitution *arg3 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  arg2 = *(dreal::drake::symbolic::ExpressionSubstitution **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::ExpressionSubstitution const & is null");
    return 0;
  }
  arg3 = *(dreal::drake::symbolic::FormulaSubstitution **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::FormulaSubstitution const & is null");
    return 0;
  }
  result = ((dreal::drake::symbolic::Expression const *)arg1)->Substitute((dreal::drake::symbolic::ExpressionSubstitution const &)*arg2,(dreal::drake::symbolic::FormulaSubstitution const &)*arg3);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1Substitute_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  dreal::drake::symbolic::ExpressionSubstitution *arg2 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  arg2 = *(dreal::drake::symbolic::ExpressionSubstitution **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::ExpressionSubstitution const & is null");
    return 0;
  }
  result = ((dreal::drake::symbolic::Expression const *)arg1)->Substitute((dreal::drake::symbolic::ExpressionSubstitution const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1Substitute_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  dreal::drake::symbolic::FormulaSubstitution *arg2 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  arg2 = *(dreal::drake::symbolic::FormulaSubstitution **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::FormulaSubstitution const & is null");
    return 0;
  }
  result = ((dreal::drake::symbolic::Expression const *)arg1)->Substitute((dreal::drake::symbolic::FormulaSubstitution const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1Differentiate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = ((dreal::drake::symbolic::Expression const *)arg1)->Differentiate((dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1to_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  std::string result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  result = ((dreal::drake::symbolic::Expression const *)arg1)->to_string();
  jresult = jenv->NewStringUTF((&result)->c_str());
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1Zero(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  result = dreal::drake::symbolic::Expression::Zero();
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1One(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  result = dreal::drake::symbolic::Expression::One();
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1Pi(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  result = dreal::drake::symbolic::Expression::Pi();
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1E(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  result = dreal::drake::symbolic::Expression::E();
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1NaN(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  result = dreal::drake::symbolic::Expression::NaN();
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = operator +((dreal::drake::symbolic::Expression const &)*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_AddEqual_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Expression *) &operator +=(*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1Increment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  result = (dreal::drake::symbolic::Expression *) &(arg1)->operator ++();
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1Increment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  int arg2 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  arg2 = (int)jarg2;
  result = (arg1)->operator ++(arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Substract_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = operator -((dreal::drake::symbolic::Expression const &)*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_SubstractEqual_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Expression *) &operator -=(*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Add_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = operator +((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Substract_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = operator -((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1Decrement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  result = (dreal::drake::symbolic::Expression *) &(arg1)->operator --();
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Expression_1Decrement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = (dreal::drake::symbolic::Expression *) 0 ;
  int arg2 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  arg2 = (int)jarg2;
  result = (arg1)->operator --(arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Multiply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = operator *((dreal::drake::symbolic::Expression const &)*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_MultiplyEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Expression *) &operator *=(*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Divide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression arg1 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Expression *argp1 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dreal::drake::symbolic::Expression");
    return 0;
  }
  arg1 = *argp1;
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = operator /(SWIG_STD_MOVE(arg1),(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_DivideEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Expression *) &operator /=(*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_real_1constant(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  bool arg3 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1;
  arg2 = (double)jarg2;
  arg3 = jarg3 ? true : false;
  result = dreal::drake::symbolic::real_constant(arg1,arg2,arg3);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::log((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_abs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::abs((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_exp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::exp((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_sqrt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::sqrt((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_pow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::pow((dreal::drake::symbolic::Expression const &)*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_sin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::sin((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_cos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::cos((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_tan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::tan((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_asin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::asin((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_acos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::acos((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_atan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::atan((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_atan2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::atan2((dreal::drake::symbolic::Expression const &)*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_sinh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::sinh((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_cosh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::cosh((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_tanh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::tanh((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_min(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::min((dreal::drake::symbolic::Expression const &)*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_max(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::max((dreal::drake::symbolic::Expression const &)*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_if_1then_1else(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Expression *arg3 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg3 = *(dreal::drake::symbolic::Expression **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::if_then_else((dreal::drake::symbolic::Formula const &)*arg1,(dreal::drake::symbolic::Expression const &)*arg2,(dreal::drake::symbolic::Expression const &)*arg3);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_uninterpreted_1function(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::uninterpreted_function((std::string const &)*arg1,(dreal::drake::symbolic::Variables const &)*arg2);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_InsertOperator_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  std::ostream *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (std::ostream *) &operator <<(*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(std::ostream **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1constant_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_constant((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1real_1constant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_real_constant((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1variable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_variable((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1addition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_addition((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1multiplication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_multiplication((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1division(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_division((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_log((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1abs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_abs((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1exp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_exp((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1sqrt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_sqrt((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1pow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_pow((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1sin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_sin((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1cos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_cos((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1tan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_tan((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1asin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_asin((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1acos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_acos((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1atan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_atan((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1atan2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_atan2((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1sinh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_sinh((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1cosh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_cosh((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1tanh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_tanh((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1min(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_min((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1max(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_max((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1if_1then_1else(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_if_then_else((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1uninterpreted_1function(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_uninterpreted_function((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Sum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Expression > *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Expression > const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::Sum((std::vector< dreal::drake::symbolic::Expression > const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Prod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Expression > *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Expression > const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::Prod((std::vector< dreal::drake::symbolic::Expression > const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression & is null");
    return ;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression & is null");
    return ;
  }
  dreal::drake::symbolic::swap(*arg1,*arg2);
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1constant_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  double arg2 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = (double)jarg2;
  result = (bool)dreal::drake::symbolic::is_constant((dreal::drake::symbolic::Expression const &)*arg1,arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_zero((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1one(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_one((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1neg_1one(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_neg_one((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1two(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_two((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1nan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_nan((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1constant_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (double)dreal::drake::symbolic::get_constant_value((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1lb_1of_1real_1constant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (double)dreal::drake::symbolic::get_lb_of_real_constant((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1ub_1of_1real_1constant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (double)dreal::drake::symbolic::get_ub_of_real_constant((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1variable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Variable *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Variable *) &dreal::drake::symbolic::get_variable((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Variable **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1argument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Expression *) &dreal::drake::symbolic::get_argument((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1first_1argument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Expression *) &dreal::drake::symbolic::get_first_argument((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1second_1argument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Expression *) &dreal::drake::symbolic::get_second_argument((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1constant_1in_1addition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (double)dreal::drake::symbolic::get_constant_in_addition((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1expr_1to_1coeff_1map_1in_1addition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  std::map< dreal::drake::symbolic::Expression,double,std::less< dreal::drake::symbolic::Expression > > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (std::map< dreal::drake::symbolic::Expression,double,std::less< dreal::drake::symbolic::Expression > > *) &dreal::drake::symbolic::get_expr_to_coeff_map_in_addition((dreal::drake::symbolic::Expression const &)*arg1);
  *(std::map< dreal::drake::symbolic::Expression,double,std::less< dreal::drake::symbolic::Expression > > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1constant_1in_1multiplication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (double)dreal::drake::symbolic::get_constant_in_multiplication((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1base_1to_1exponent_1map_1in_1multiplication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression,std::less< dreal::drake::symbolic::Expression > > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression,std::less< dreal::drake::symbolic::Expression > > *) &dreal::drake::symbolic::get_base_to_exponent_map_in_multiplication((dreal::drake::symbolic::Expression const &)*arg1);
  *(std::map< dreal::drake::symbolic::Expression,dreal::drake::symbolic::Expression,std::less< dreal::drake::symbolic::Expression > > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1conditional_1formula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Formula *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Formula *) &dreal::drake::symbolic::get_conditional_formula((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Formula **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1then_1expression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Expression *) &dreal::drake::symbolic::get_then_expression((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1else_1expression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Expression *) &dreal::drake::symbolic::get_else_expression((dreal::drake::symbolic::Expression const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1uninterpreted_1function_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  std::string *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (std::string *) &dreal::drake::symbolic::get_uninterpreted_function_name((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = jenv->NewStringUTF(result->c_str());
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Add_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator +((dreal::drake::symbolic::Variable const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Substract_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Expression result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator -((dreal::drake::symbolic::Variable const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = new dreal::drake::symbolic::Expression(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Less_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::FormulaKind arg1 ;
  dreal::drake::symbolic::FormulaKind arg2 ;
  bool result;

  (void)jenv;
  (void)jcls;
  arg1 = (dreal::drake::symbolic::FormulaKind)jarg1;
  arg2 = (dreal::drake::symbolic::FormulaKind)jarg2;
  result = (bool)dreal::drake::symbolic::operator <(arg1,arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Formula_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (dreal::drake::symbolic::Formula *)new dreal::drake::symbolic::Formula();
  *(dreal::drake::symbolic::Formula **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Formula_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Formula *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Formula *)new dreal::drake::symbolic::Formula((dreal::drake::symbolic::Formula const &)*arg1);
  *(dreal::drake::symbolic::Formula **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1AssignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Formula *) &(arg1)->operator =((dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1Formula(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Formula_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Formula *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Formula *)new dreal::drake::symbolic::Formula((dreal::drake::symbolic::Variable const &)*arg1);
  *(dreal::drake::symbolic::Formula **)&jresult = result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1get_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  dreal::drake::symbolic::FormulaKind result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  result = (dreal::drake::symbolic::FormulaKind)((dreal::drake::symbolic::Formula const *)arg1)->get_kind();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1get_1hash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  size_t result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  result = ((dreal::drake::symbolic::Formula const *)arg1)->get_hash();
  jresult = (jlong)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1GetFreeVariables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  dreal::drake::symbolic::Variables *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  result = (dreal::drake::symbolic::Variables *) &((dreal::drake::symbolic::Formula const *)arg1)->GetFreeVariables();
  *(dreal::drake::symbolic::Variables **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1EqualTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)((dreal::drake::symbolic::Formula const *)arg1)->EqualTo((dreal::drake::symbolic::Formula const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1Less(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)((dreal::drake::symbolic::Formula const *)arg1)->Less((dreal::drake::symbolic::Formula const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1Evaluate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  dreal::drake::symbolic::Environment *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Environment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Environment const & is null");
    return 0;
  }
  result = (bool)((dreal::drake::symbolic::Formula const *)arg1)->Evaluate((dreal::drake::symbolic::Environment const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1Evaluate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  result = (bool)((dreal::drake::symbolic::Formula const *)arg1)->Evaluate();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1Substitute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Expression *arg3 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  arg3 = *(dreal::drake::symbolic::Expression **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = ((dreal::drake::symbolic::Formula const *)arg1)->Substitute((dreal::drake::symbolic::Variable const &)*arg2,(dreal::drake::symbolic::Expression const &)*arg3);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1Substitute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Formula *arg3 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  arg3 = *(dreal::drake::symbolic::Formula **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = ((dreal::drake::symbolic::Formula const *)arg1)->Substitute((dreal::drake::symbolic::Variable const &)*arg2,(dreal::drake::symbolic::Formula const &)*arg3);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1Substitute_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  dreal::drake::symbolic::ExpressionSubstitution *arg2 = 0 ;
  dreal::drake::symbolic::FormulaSubstitution *arg3 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  arg2 = *(dreal::drake::symbolic::ExpressionSubstitution **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::ExpressionSubstitution const & is null");
    return 0;
  }
  arg3 = *(dreal::drake::symbolic::FormulaSubstitution **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::FormulaSubstitution const & is null");
    return 0;
  }
  result = ((dreal::drake::symbolic::Formula const *)arg1)->Substitute((dreal::drake::symbolic::ExpressionSubstitution const &)*arg2,(dreal::drake::symbolic::FormulaSubstitution const &)*arg3);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1Substitute_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  dreal::drake::symbolic::ExpressionSubstitution *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  arg2 = *(dreal::drake::symbolic::ExpressionSubstitution **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::ExpressionSubstitution const & is null");
    return 0;
  }
  result = ((dreal::drake::symbolic::Formula const *)arg1)->Substitute((dreal::drake::symbolic::ExpressionSubstitution const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1Substitute_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  dreal::drake::symbolic::FormulaSubstitution *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  arg2 = *(dreal::drake::symbolic::FormulaSubstitution **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::FormulaSubstitution const & is null");
    return 0;
  }
  result = ((dreal::drake::symbolic::Formula const *)arg1)->Substitute((dreal::drake::symbolic::FormulaSubstitution const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1to_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  std::string result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  result = ((dreal::drake::symbolic::Formula const *)arg1)->to_string();
  jresult = jenv->NewStringUTF((&result)->c_str());
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1True(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  result = dreal::drake::symbolic::Formula::True();
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1False(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  result = dreal::drake::symbolic::Formula::False();
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1BoolOperator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  result = (bool)((dreal::drake::symbolic::Formula const *)arg1)->operator bool();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_InsertOperator_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  std::ostream *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (std::ostream *) &operator <<(*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(std::ostream **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1false(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_false((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1true(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_true((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1variable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_variable((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1equal_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_equal_to((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1not_1equal_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_not_equal_to((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1greater_1than(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_greater_than((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1greater_1than_1or_1equal_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_greater_than_or_equal_to((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1less_1than(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_less_than((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1less_1than_1or_1equal_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_less_than_or_equal_to((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1relational(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_relational((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1conjunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_conjunction((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1disjunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_disjunction((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1negation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_negation((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1forall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_forall((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1make_1conjunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::Formula::make_conjunction(*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1make_1disjunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::Formula::make_disjunction(*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Not_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = operator !((dreal::drake::symbolic::Formula const &)*arg1);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Equal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = operator ==((dreal::drake::symbolic::Expression const &)*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_NotEqual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = operator !=((dreal::drake::symbolic::Expression const &)*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Less_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = operator <((dreal::drake::symbolic::Expression const &)*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_LessEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = operator <=((dreal::drake::symbolic::Expression const &)*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Grater(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = operator >((dreal::drake::symbolic::Expression const &)*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_GraterEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = operator >=((dreal::drake::symbolic::Expression const &)*arg1,(dreal::drake::symbolic::Expression const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1include_1ite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = (dreal::drake::symbolic::Formula *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  result = (bool)((dreal::drake::symbolic::Formula const *)arg1)->include_ite();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_forall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::forall((dreal::drake::symbolic::Variables const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_And_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator &&((dreal::drake::symbolic::Formula const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_And_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator &&((dreal::drake::symbolic::Variable const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_And_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator &&((dreal::drake::symbolic::Formula const &)*arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_And_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator &&((dreal::drake::symbolic::Variable const &)*arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Or_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator ||((dreal::drake::symbolic::Formula const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Or_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator ||((dreal::drake::symbolic::Variable const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Or_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator ||((dreal::drake::symbolic::Formula const &)*arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Or_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator ||((dreal::drake::symbolic::Variable const &)*arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Not_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator !((dreal::drake::symbolic::Variable const &)*arg1);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Equal_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator ==((dreal::drake::symbolic::Variable const &)*arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Equal_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator ==((dreal::drake::symbolic::Formula const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Equal_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator ==((dreal::drake::symbolic::Variable const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Equal_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator ==((dreal::drake::symbolic::Formula const &)*arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_NotEqual_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator !=((dreal::drake::symbolic::Variable const &)*arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_NotEqual_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator !=((dreal::drake::symbolic::Formula const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_NotEqual_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator !=((dreal::drake::symbolic::Variable const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_NotEqual_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::operator !=((dreal::drake::symbolic::Formula const &)*arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1nary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::drake::symbolic::is_nary((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1variable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Variable *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Variable *) &dreal::drake::symbolic::get_variable((dreal::drake::symbolic::Formula const &)*arg1);
  *(dreal::drake::symbolic::Variable **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1lhs_1expression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Expression *) &dreal::drake::symbolic::get_lhs_expression((dreal::drake::symbolic::Formula const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1rhs_1expression(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Expression *) &dreal::drake::symbolic::get_rhs_expression((dreal::drake::symbolic::Formula const &)*arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1operands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  std::set< dreal::drake::symbolic::Formula > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (std::set< dreal::drake::symbolic::Formula > *) &dreal::drake::symbolic::get_operands((dreal::drake::symbolic::Formula const &)*arg1);
  *(std::set< dreal::drake::symbolic::Formula > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1operand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Formula *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Formula *) &dreal::drake::symbolic::get_operand((dreal::drake::symbolic::Formula const &)*arg1);
  *(dreal::drake::symbolic::Formula **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1quantified_1variables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Variables *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Variables *) &dreal::drake::symbolic::get_quantified_variables((dreal::drake::symbolic::Formula const &)*arg1);
  *(dreal::drake::symbolic::Variables **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1quantified_1formula(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Formula *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (dreal::drake::symbolic::Formula *) &dreal::drake::symbolic::get_quantified_formula((dreal::drake::symbolic::Formula const &)*arg1);
  *(dreal::drake::symbolic::Formula **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_logic_1and(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::drake::symbolic::detail::logic_and((dreal::drake::symbolic::Formula const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_imply_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::imply((dreal::drake::symbolic::Formula const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_imply_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::imply((dreal::drake::symbolic::Variable const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_imply_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::imply((dreal::drake::symbolic::Formula const &)*arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_imply_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::imply((dreal::drake::symbolic::Variable const &)*arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_iff_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::iff((dreal::drake::symbolic::Formula const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_iff_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::iff((dreal::drake::symbolic::Variable const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_iff_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::iff((dreal::drake::symbolic::Formula const &)*arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_iff_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Variable *arg1 = 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variable **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = dreal::iff((dreal::drake::symbolic::Variable const &)*arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_map(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::set< dreal::drake::symbolic::Formula > *arg1 = 0 ;
  std::function< dreal::drake::symbolic::Formula (dreal::drake::symbolic::Formula const &) > *arg2 = 0 ;
  std::set< dreal::drake::symbolic::Formula > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Formula > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< dreal::drake::symbolic::Formula > const & is null");
    return 0;
  }
  arg2 = *(std::function< dreal::drake::symbolic::Formula (dreal::drake::symbolic::Formula const &) > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::function< dreal::drake::symbolic::Formula (dreal::drake::symbolic::Formula const &) > const & is null");
    return 0;
  }
  result = dreal::map((std::set< dreal::drake::symbolic::Formula > const &)*arg1,(std::function< dreal::drake::symbolic::Formula (dreal::drake::symbolic::Formula const &) > const &)*arg2);
  *(std::set< dreal::drake::symbolic::Formula > **)&jresult = new std::set< dreal::drake::symbolic::Formula >(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1atomic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::is_atomic((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1clause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::is_clause((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_get_1clauses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  std::set< dreal::drake::symbolic::Formula > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = dreal::get_clauses((dreal::drake::symbolic::Formula const &)*arg1);
  *(std::set< dreal::drake::symbolic::Formula > **)&jresult = new std::set< dreal::drake::symbolic::Formula >(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_is_1cnf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::is_cnf((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_HaveIntersection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Variables *arg1 = 0 ;
  dreal::drake::symbolic::Variables *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::drake::symbolic::Variables **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Variables **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variables const & is null");
    return 0;
  }
  result = (bool)dreal::HaveIntersection((dreal::drake::symbolic::Variables const &)*arg1,(dreal::drake::symbolic::Variables const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_DeltaStrengthen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  double arg2 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = (double)jarg2;
  result = dreal::DeltaStrengthen((dreal::drake::symbolic::Formula const &)*arg1,arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_DeltaWeaken(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  double arg2 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = (double)jarg2;
  result = dreal::DeltaWeaken((dreal::drake::symbolic::Formula const &)*arg1,arg2);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_IsDifferentiable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  result = (bool)dreal::IsDifferentiable((dreal::drake::symbolic::Formula const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_IsDifferentiable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  result = (bool)dreal::IsDifferentiable((dreal::drake::symbolic::Expression const &)*arg1);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_make_1conjunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Formula > *arg1 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Formula > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Formula > const & is null");
    return 0;
  }
  result = dreal::make_conjunction((std::vector< dreal::drake::symbolic::Formula > const &)*arg1);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_make_1disjunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Formula > *arg1 = 0 ;
  dreal::drake::symbolic::Formula result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Formula > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Formula > const & is null");
    return 0;
  }
  result = dreal::make_disjunction((std::vector< dreal::drake::symbolic::Formula > const &)*arg1);
  *(dreal::drake::symbolic::Formula **)&jresult = new dreal::drake::symbolic::Formula(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_CreateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  dreal::drake::symbolic::Variable::Type arg3 ;
  std::vector< dreal::drake::symbolic::Variable > result;

  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);
  arg2 = (int)jarg2;
  arg3 = (dreal::drake::symbolic::Variable::Type)jarg3;
  result = dreal::CreateVector((std::string const &)*arg1,arg2,arg3);
  *(std::vector< dreal::drake::symbolic::Variable > **)&jresult = new std::vector< dreal::drake::symbolic::Variable >(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_CreateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< dreal::drake::symbolic::Variable > result;

  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);
  arg2 = (int)jarg2;
  result = dreal::CreateVector((std::string const &)*arg1,arg2);
  *(std::vector< dreal::drake::symbolic::Variable > **)&jresult = new std::vector< dreal::drake::symbolic::Variable >(result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Not(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  dreal::RelationalOperator arg1 ;
  dreal::RelationalOperator result;

  (void)jenv;
  (void)jcls;
  arg1 = (dreal::RelationalOperator)jarg1;
  result = (dreal::RelationalOperator)dreal::operator !(arg1);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_InsertOperator_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  dreal::RelationalOperator arg2 ;
  std::ostream *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & is null");
    return 0;
  }
  arg2 = (dreal::RelationalOperator)jarg2;
  result = (std::ostream *) &dreal::operator <<(*arg1,arg2);
  *(std::ostream **)&jresult = result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_parse_1logic(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  dreal::Logic result;

  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr);
  result = (dreal::Logic)dreal::parse_logic((std::string const &)*arg1);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_InsertOperator_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  dreal::Logic *arg2 = 0 ;
  dreal::Logic temp2 ;
  std::ostream *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & is null");
    return 0;
  }
  temp2 = (dreal::Logic)jarg2;
  arg2 = &temp2;
  result = (std::ostream *) &dreal::operator <<(*arg1,(enum dreal::Logic const &)*arg2);
  *(std::ostream **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Box_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dreal::Box *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (dreal::Box *)new dreal::Box();
  *(dreal::Box **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Box_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< dreal::drake::symbolic::Variable > *arg1 = 0 ;
  dreal::Box *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< dreal::drake::symbolic::Variable > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Variable > const & is null");
    return 0;
  }
  result = (dreal::Box *)new dreal::Box((std::vector< dreal::drake::symbolic::Variable > const &)*arg1);
  *(dreal::Box **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Box_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Box *arg1 = 0 ;
  dreal::Box *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Box **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::Box const & is null");
    return 0;
  }
  result = (dreal::Box *)new dreal::Box((dreal::Box const &)*arg1);
  *(dreal::Box **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1AssignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  dreal::Box *arg2 = 0 ;
  dreal::Box *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Box **)&jarg1;
  arg2 = *(dreal::Box **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::Box const & is null");
    return 0;
  }
  result = (dreal::Box *) &(arg1)->operator =((dreal::Box const &)*arg2);
  *(dreal::Box **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1Box(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dreal::Box *arg1 = (dreal::Box *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(dreal::Box **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1Add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Box **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return ;
  }
  (arg1)->Add((dreal::drake::symbolic::Variable const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1Add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4) {
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  double arg3 ;
  double arg4 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Box **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return ;
  }
  arg3 = (double)jarg3;
  arg4 = (double)jarg4;
  (arg1)->Add((dreal::drake::symbolic::Variable const &)*arg2,arg3,arg4);
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Box **)&jarg1;
  result = (bool)((dreal::Box const *)arg1)->empty();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1set_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  dreal::Box *arg1 = (dreal::Box *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Box **)&jarg1;
  (arg1)->set_empty();
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Box **)&jarg1;
  result = (int)((dreal::Box const *)arg1)->size();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1Indexing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  int arg2 ;
  dreal::Box::Interval *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Box **)&jarg1;
  arg2 = (int)jarg2;
  result = (dreal::Box::Interval *) &(arg1)->operator [](arg2);
  *(dreal::Box::Interval **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1Indexing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::Box::Interval *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Box **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = (dreal::Box::Interval *) &(arg1)->operator []((dreal::drake::symbolic::Variable const &)*arg2);
  *(dreal::Box::Interval **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1variables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  std::vector< dreal::drake::symbolic::Variable > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Box **)&jarg1;
  result = (std::vector< dreal::drake::symbolic::Variable > *) &((dreal::Box const *)arg1)->variables();
  *(std::vector< dreal::drake::symbolic::Variable > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1variable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  int arg2 ;
  dreal::drake::symbolic::Variable *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Box **)&jarg1;
  arg2 = (int)jarg2;
  result = (dreal::drake::symbolic::Variable *) &((dreal::Box const *)arg1)->variable(arg2);
  *(dreal::drake::symbolic::Variable **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1has_1variable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Box **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = (bool)((dreal::Box const *)arg1)->has_variable((dreal::drake::symbolic::Variable const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1interval_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  dreal::Box::IntervalVector *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Box **)&jarg1;
  result = (dreal::Box::IntervalVector *) &((dreal::Box const *)arg1)->interval_vector();
  *(dreal::Box::IntervalVector **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1mutable_1interval_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  dreal::Box::IntervalVector *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Box **)&jarg1;
  result = (dreal::Box::IntervalVector *) &(arg1)->mutable_interval_vector();
  *(dreal::Box::IntervalVector **)&jresult = result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Box **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = (int)((dreal::Box const *)arg1)->index((dreal::drake::symbolic::Variable const &)*arg2);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1MaxDiam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  std::pair< double,int > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Box **)&jarg1;
  result = ((dreal::Box const *)arg1)->MaxDiam();
  *(std::pair< double,int > **)&jresult = new std::pair< double,int >(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1bisect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  int arg2 ;
  std::pair< dreal::Box,dreal::Box > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Box **)&jarg1;
  arg2 = (int)jarg2;
  result = ((dreal::Box const *)arg1)->bisect(arg2);
  *(std::pair< dreal::Box,dreal::Box > **)&jresult = new std::pair< dreal::Box,dreal::Box >(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1bisect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  std::pair< dreal::Box,dreal::Box > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Box **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  }
  result = ((dreal::Box const *)arg1)->bisect((dreal::drake::symbolic::Variable const &)*arg2);
  *(std::pair< dreal::Box,dreal::Box > **)&jresult = new std::pair< dreal::Box,dreal::Box >(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1InplaceUnion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::Box *arg1 = (dreal::Box *) 0 ;
  dreal::Box *arg2 = 0 ;
  dreal::Box *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Box **)&jarg1;
  arg2 = *(dreal::Box **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::Box const & is null");
    return 0;
  }
  result = (dreal::Box *) &(arg1)->InplaceUnion((dreal::Box const &)*arg2);
  *(dreal::Box **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_InsertOperator_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  dreal::Box *arg2 = 0 ;
  std::ostream *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & is null");
    return 0;
  }
  arg2 = *(dreal::Box **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::Box const & is null");
    return 0;
  }
  result = (std::ostream *) &operator <<(*arg1,(dreal::Box const &)*arg2);
  *(std::ostream **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::Box *arg1 = 0 ;
  dreal::Box *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Box **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::Box const & is null");
    return 0;
  }
  arg2 = *(dreal::Box **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::Box const & is null");
    return 0;
  }
  result = (bool)dreal::operator ==((dreal::Box const &)*arg1,(dreal::Box const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_NotEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  dreal::Box *arg1 = 0 ;
  dreal::Box *arg2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Box **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::Box const & is null");
    return 0;
  }
  arg2 = *(dreal::Box **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::Box const & is null");
    return 0;
  }
  result = (bool)dreal::operator !=((dreal::Box const &)*arg1,(dreal::Box const &)*arg2);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_DisplayDiff(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  std::vector< dreal::drake::symbolic::Variable > *arg2 = 0 ;
  dreal::Box::IntervalVector *arg3 = 0 ;
  dreal::Box::IntervalVector *arg4 = 0 ;
  std::ostream *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & is null");
    return 0;
  }
  arg2 = *(std::vector< dreal::drake::symbolic::Variable > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Variable > const & is null");
    return 0;
  }
  arg3 = *(dreal::Box::IntervalVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::Box::IntervalVector const & is null");
    return 0;
  }
  arg4 = *(dreal::Box::IntervalVector **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::Box::IntervalVector const & is null");
    return 0;
  }
  result = (std::ostream *) &dreal::DisplayDiff(*arg1,(std::vector< dreal::drake::symbolic::Variable > const &)*arg2,(ibex::IntervalVector const &)*arg3,(ibex::IntervalVector const &)*arg4);
  *(std::ostream **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1OptionValueBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  dreal::OptionValue< bool > *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false;
  result = (dreal::OptionValue< bool > *)new dreal::OptionValue< bool >(arg1);
  *(dreal::OptionValue< bool > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1OptionValueBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::OptionValue< bool > *arg1 = 0 ;
  dreal::OptionValue< bool > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< bool > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::OptionValue< bool > const & is null");
    return 0;
  }
  result = (dreal::OptionValue< bool > *)new dreal::OptionValue< bool >((dreal::OptionValue< bool > const &)*arg1);
  *(dreal::OptionValue< bool > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueBool_1AssignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::OptionValue< bool > *arg1 = (dreal::OptionValue< bool > *) 0 ;
  dreal::OptionValue< bool > *arg2 = 0 ;
  dreal::OptionValue< bool > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::OptionValue< bool > **)&jarg1;
  arg2 = *(dreal::OptionValue< bool > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::OptionValue< bool > const & is null");
    return 0;
  }
  result = (dreal::OptionValue< bool > *) &(arg1)->operator =((dreal::OptionValue< bool > const &)*arg2);
  *(dreal::OptionValue< bool > **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1OptionValueBool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dreal::OptionValue< bool > *arg1 = (dreal::OptionValue< bool > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(dreal::OptionValue< bool > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueBool_1AssignOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  dreal::OptionValue< bool > *arg1 = (dreal::OptionValue< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  dreal::OptionValue< bool > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< bool > **)&jarg1;
  temp2 = jarg2 ? true : false;
  arg2 = &temp2;
  result = (dreal::OptionValue< bool > *) &(arg1)->operator =((bool const &)*arg2);
  *(dreal::OptionValue< bool > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueBool_1AssignOperator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  dreal::OptionValue< bool > *arg1 = (dreal::OptionValue< bool > *) 0 ;
  bool *arg2 = 0 ;
  std::unique_ptr< bool > rvrdeleter2 ;
  dreal::OptionValue< bool > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< bool > **)&jarg1;
  arg2 = *(bool **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool && is null");
    return 0;
  }
  rvrdeleter2.reset(arg2);
  result = (dreal::OptionValue< bool > *) &(arg1)->operator =((bool &&)*arg2);
  *(dreal::OptionValue< bool > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueBool_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::OptionValue< bool > *arg1 = (dreal::OptionValue< bool > *) 0 ;
  bool *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< bool > **)&jarg1;
  result = (bool *) &((dreal::OptionValue< bool > const *)arg1)->get();
  jresult = (jboolean)*result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueBool_1set_1from_1command_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  dreal::OptionValue< bool > *arg1 = (dreal::OptionValue< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< bool > **)&jarg1;
  temp2 = jarg2 ? true : false;
  arg2 = &temp2;
  (arg1)->set_from_command_line((bool const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueBool_1set_1from_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  dreal::OptionValue< bool > *arg1 = (dreal::OptionValue< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< bool > **)&jarg1;
  temp2 = jarg2 ? true : false;
  arg2 = &temp2;
  (arg1)->set_from_file((bool const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1OptionValueInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  dreal::OptionValue< int > *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1;
  result = (dreal::OptionValue< int > *)new dreal::OptionValue< int >(arg1);
  *(dreal::OptionValue< int > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1OptionValueInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::OptionValue< int > *arg1 = 0 ;
  dreal::OptionValue< int > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::OptionValue< int > const & is null");
    return 0;
  }
  result = (dreal::OptionValue< int > *)new dreal::OptionValue< int >((dreal::OptionValue< int > const &)*arg1);
  *(dreal::OptionValue< int > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueInt_1AssignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::OptionValue< int > *arg1 = (dreal::OptionValue< int > *) 0 ;
  dreal::OptionValue< int > *arg2 = 0 ;
  dreal::OptionValue< int > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::OptionValue< int > **)&jarg1;
  arg2 = *(dreal::OptionValue< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::OptionValue< int > const & is null");
    return 0;
  }
  result = (dreal::OptionValue< int > *) &(arg1)->operator =((dreal::OptionValue< int > const &)*arg2);
  *(dreal::OptionValue< int > **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1OptionValueInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dreal::OptionValue< int > *arg1 = (dreal::OptionValue< int > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(dreal::OptionValue< int > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueInt_1AssignOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  dreal::OptionValue< int > *arg1 = (dreal::OptionValue< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  dreal::OptionValue< int > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< int > **)&jarg1;
  temp2 = (int)jarg2;
  arg2 = &temp2;
  result = (dreal::OptionValue< int > *) &(arg1)->operator =((int const &)*arg2);
  *(dreal::OptionValue< int > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueInt_1AssignOperator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  dreal::OptionValue< int > *arg1 = (dreal::OptionValue< int > *) 0 ;
  int *arg2 = 0 ;
  std::unique_ptr< int > rvrdeleter2 ;
  dreal::OptionValue< int > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< int > **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int && is null");
    return 0;
  }
  rvrdeleter2.reset(arg2);
  result = (dreal::OptionValue< int > *) &(arg1)->operator =((int &&)*arg2);
  *(dreal::OptionValue< int > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dreal::OptionValue< int > *arg1 = (dreal::OptionValue< int > *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< int > **)&jarg1;
  result = (int *) &((dreal::OptionValue< int > const *)arg1)->get();
  jresult = (jint)*result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueInt_1set_1from_1command_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dreal::OptionValue< int > *arg1 = (dreal::OptionValue< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< int > **)&jarg1;
  temp2 = (int)jarg2;
  arg2 = &temp2;
  (arg1)->set_from_command_line((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueInt_1set_1from_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dreal::OptionValue< int > *arg1 = (dreal::OptionValue< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< int > **)&jarg1;
  temp2 = (int)jarg2;
  arg2 = &temp2;
  (arg1)->set_from_file((int const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1OptionValueDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  dreal::OptionValue< double > *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1;
  result = (dreal::OptionValue< double > *)new dreal::OptionValue< double >(arg1);
  *(dreal::OptionValue< double > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1OptionValueDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::OptionValue< double > *arg1 = 0 ;
  dreal::OptionValue< double > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< double > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::OptionValue< double > const & is null");
    return 0;
  }
  result = (dreal::OptionValue< double > *)new dreal::OptionValue< double >((dreal::OptionValue< double > const &)*arg1);
  *(dreal::OptionValue< double > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueDouble_1AssignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::OptionValue< double > *arg1 = (dreal::OptionValue< double > *) 0 ;
  dreal::OptionValue< double > *arg2 = 0 ;
  dreal::OptionValue< double > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::OptionValue< double > **)&jarg1;
  arg2 = *(dreal::OptionValue< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::OptionValue< double > const & is null");
    return 0;
  }
  result = (dreal::OptionValue< double > *) &(arg1)->operator =((dreal::OptionValue< double > const &)*arg2);
  *(dreal::OptionValue< double > **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1OptionValueDouble(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dreal::OptionValue< double > *arg1 = (dreal::OptionValue< double > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(dreal::OptionValue< double > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueDouble_1AssignOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  dreal::OptionValue< double > *arg1 = (dreal::OptionValue< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  dreal::OptionValue< double > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< double > **)&jarg1;
  temp2 = (double)jarg2;
  arg2 = &temp2;
  result = (dreal::OptionValue< double > *) &(arg1)->operator =((double const &)*arg2);
  *(dreal::OptionValue< double > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueDouble_1AssignOperator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  dreal::OptionValue< double > *arg1 = (dreal::OptionValue< double > *) 0 ;
  double *arg2 = 0 ;
  std::unique_ptr< double > rvrdeleter2 ;
  dreal::OptionValue< double > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< double > **)&jarg1;
  arg2 = *(double **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double && is null");
    return 0;
  }
  rvrdeleter2.reset(arg2);
  result = (dreal::OptionValue< double > *) &(arg1)->operator =((double &&)*arg2);
  *(dreal::OptionValue< double > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueDouble_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dreal::OptionValue< double > *arg1 = (dreal::OptionValue< double > *) 0 ;
  double *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< double > **)&jarg1;
  result = (double *) &((dreal::OptionValue< double > const *)arg1)->get();
  jresult = (jdouble)*result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueDouble_1set_1from_1command_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  dreal::OptionValue< double > *arg1 = (dreal::OptionValue< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< double > **)&jarg1;
  temp2 = (double)jarg2;
  arg2 = &temp2;
  (arg1)->set_from_command_line((double const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueDouble_1set_1from_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  dreal::OptionValue< double > *arg1 = (dreal::OptionValue< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< double > **)&jarg1;
  temp2 = (double)jarg2;
  arg2 = &temp2;
  (arg1)->set_from_file((double const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1OptionValueUnsignedInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  uint32_t *argp1 ;
  dreal::OptionValue< uint32_t > *result = 0 ;

  (void)jenv;
  (void)jcls;
  argp1 = *(uint32_t **)&jarg1;
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg1 = *argp1;
  result = (dreal::OptionValue< uint32_t > *)new dreal::OptionValue< uint32_t >(arg1);
  *(dreal::OptionValue< uint32_t > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1OptionValueUnsignedInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::OptionValue< uint32_t > *arg1 = 0 ;
  dreal::OptionValue< uint32_t > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< uint32_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::OptionValue< uint32_t > const & is null");
    return 0;
  }
  result = (dreal::OptionValue< uint32_t > *)new dreal::OptionValue< uint32_t >((dreal::OptionValue< uint32_t > const &)*arg1);
  *(dreal::OptionValue< uint32_t > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueUnsignedInt_1AssignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::OptionValue< uint32_t > *arg1 = (dreal::OptionValue< uint32_t > *) 0 ;
  dreal::OptionValue< uint32_t > *arg2 = 0 ;
  dreal::OptionValue< uint32_t > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::OptionValue< uint32_t > **)&jarg1;
  arg2 = *(dreal::OptionValue< uint32_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::OptionValue< uint32_t > const & is null");
    return 0;
  }
  result = (dreal::OptionValue< uint32_t > *) &(arg1)->operator =((dreal::OptionValue< uint32_t > const &)*arg2);
  *(dreal::OptionValue< uint32_t > **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1OptionValueUnsignedInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dreal::OptionValue< uint32_t > *arg1 = (dreal::OptionValue< uint32_t > *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(dreal::OptionValue< uint32_t > **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueUnsignedInt_1AssignOperator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  dreal::OptionValue< uint32_t > *arg1 = (dreal::OptionValue< uint32_t > *) 0 ;
  uint32_t *arg2 = 0 ;
  dreal::OptionValue< uint32_t > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< uint32_t > **)&jarg1;
  arg2 = *(uint32_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t const & is null");
    return 0;
  }
  result = (dreal::OptionValue< uint32_t > *) &(arg1)->operator =((uint32_t const &)*arg2);
  *(dreal::OptionValue< uint32_t > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueUnsignedInt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::OptionValue< uint32_t > *arg1 = (dreal::OptionValue< uint32_t > *) 0 ;
  uint32_t *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< uint32_t > **)&jarg1;
  result = (uint32_t *) &((dreal::OptionValue< uint32_t > const *)arg1)->get();
  *(uint32_t **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueUnsignedInt_1set_1from_1command_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dreal::OptionValue< uint32_t > *arg1 = (dreal::OptionValue< uint32_t > *) 0 ;
  uint32_t *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< uint32_t > **)&jarg1;
  arg2 = *(uint32_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t const & is null");
    return ;
  }
  (arg1)->set_from_command_line((uint32_t const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_OptionValueUnsignedInt_1set_1from_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  dreal::OptionValue< uint32_t > *arg1 = (dreal::OptionValue< uint32_t > *) 0 ;
  uint32_t *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::OptionValue< uint32_t > **)&jarg1;
  arg2 = *(uint32_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint32_t const & is null");
    return ;
  }
  (arg1)->set_from_file((uint32_t const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Config_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dreal::Config *result = 0 ;

  dreal::Config *config = new dreal::Config();
  // To create the right default configuration
  config->mutable_precision() = 0.001;
  config->mutable_produce_models() = false;
  config->mutable_use_polytope() = false;
  config->mutable_use_polytope_in_forall() = false;
  config->mutable_use_worklist_fixpoint() = false;
  config->mutable_use_local_optimization() = false;
  //config->mutable_dump_theory_literals() = false;
  config->mutable_number_of_jobs() = 1;
  config->mutable_stack_left_box_first() = false;
  config->mutable_smtlib2_compliant() = false;

  config->mutable_nlopt_ftol_rel() = 1e-6;
  config->mutable_nlopt_ftol_abs() = 1e-6;
  config->mutable_nlopt_maxeval() = 100;
  config->mutable_nlopt_maxtime() = 0.01;

  config->mutable_sat_default_phase() = dreal::Config::SatDefaultPhase::JeroslowWang;
  config->mutable_random_seed() = 0;

  config->mutable_brancher() = dreal::BranchLargestFirst;

  (void)jenv;
  (void)jcls;
  //result = (dreal::Config *)new dreal::Config();
  //*(dreal::Config **)&jresult = result;
  *(dreal::Config **)&jresult = config;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Config_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = 0 ;
  dreal::Config *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::Config const & is null");
    return 0;
  }
  result = (dreal::Config *)new dreal::Config((dreal::Config const &)*arg1);
  *(dreal::Config **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1AssignOperator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::Config *arg2 = 0 ;
  dreal::Config *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Config **)&jarg1;
  arg2 = *(dreal::Config **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::Config const & is null");
    return 0;
  }
  result = (dreal::Config *) &(arg1)->operator =((dreal::Config const &)*arg2);
  *(dreal::Config **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1Config(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dreal::Config *arg1 = (dreal::Config *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(dreal::Config **)&jarg1;
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1precision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (double)((dreal::Config const *)arg1)->precision();
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1precision(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< double > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< double > *) &(arg1)->mutable_precision();
  *(dreal::OptionValue< double > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1produce_1models(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (bool)((dreal::Config const *)arg1)->produce_models();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1produce_1models(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< bool > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< bool > *) &(arg1)->mutable_produce_models();
  *(dreal::OptionValue< bool > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1use_1polytope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (bool)((dreal::Config const *)arg1)->use_polytope();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1use_1polytope(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< bool > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< bool > *) &(arg1)->mutable_use_polytope();
  *(dreal::OptionValue< bool > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1use_1polytope_1in_1forall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (bool)((dreal::Config const *)arg1)->use_polytope_in_forall();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1use_1polytope_1in_1forall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< bool > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< bool > *) &(arg1)->mutable_use_polytope_in_forall();
  *(dreal::OptionValue< bool > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1use_1worklist_1fixpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (bool)((dreal::Config const *)arg1)->use_worklist_fixpoint();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1use_1worklist_1fixpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< bool > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< bool > *) &(arg1)->mutable_use_worklist_fixpoint();
  *(dreal::OptionValue< bool > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1use_1local_1optimization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (bool)((dreal::Config const *)arg1)->use_local_optimization();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1use_1local_1optimization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< bool > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< bool > *) &(arg1)->mutable_use_local_optimization();
  *(dreal::OptionValue< bool > **)&jresult = result;
  return jresult;
}


// SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1dump_1theory_1literals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
//   jboolean jresult = 0 ;
//   dreal::Config *arg1 = (dreal::Config *) 0 ;
//   bool result;
//
//   (void)jenv;
//   (void)jcls;
//   (void)jarg1_;
//   arg1 = *(dreal::Config **)&jarg1;
//   result = (bool)((dreal::Config const *)arg1)->dump_theory_literals();
//   jresult = (jboolean)result;
//   return jresult;
// }
//
//
// SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1dump_1theory_1literals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
//   jlong jresult = 0 ;
//   dreal::Config *arg1 = (dreal::Config *) 0 ;
//   dreal::OptionValue< bool > *result = 0 ;
//
//   (void)jenv;
//   (void)jcls;
//   (void)jarg1_;
//   arg1 = *(dreal::Config **)&jarg1;
//   result = (dreal::OptionValue< bool > *) &(arg1)->mutable_dump_theory_literals();
//   *(dreal::OptionValue< bool > **)&jresult = result;
//   return jresult;
// }


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1number_1of_1jobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (int)((dreal::Config const *)arg1)->number_of_jobs();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1number_1of_1jobs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< int > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< int > *) &(arg1)->mutable_number_of_jobs();
  *(dreal::OptionValue< int > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1stack_1left_1box_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (bool)((dreal::Config const *)arg1)->stack_left_box_first();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1stack_1left_1box_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< bool > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< bool > *) &(arg1)->mutable_stack_left_box_first();
  *(dreal::OptionValue< bool > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1brancher(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::Config::Brancher *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::Config::Brancher *) &((dreal::Config const *)arg1)->brancher();
  *(dreal::Config::Brancher **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1brancher(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< dreal::Config::Brancher > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< dreal::Config::Brancher > *) &(arg1)->mutable_brancher();
  *(dreal::OptionValue< dreal::Config::Brancher > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1nlopt_1ftol_1rel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (double)((dreal::Config const *)arg1)->nlopt_ftol_rel();
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1nlopt_1ftol_1rel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< double > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< double > *) &(arg1)->mutable_nlopt_ftol_rel();
  *(dreal::OptionValue< double > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1nlopt_1ftol_1abs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (double)((dreal::Config const *)arg1)->nlopt_ftol_abs();
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1nlopt_1ftol_1abs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< double > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< double > *) &(arg1)->mutable_nlopt_ftol_abs();
  *(dreal::OptionValue< double > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1nlopt_1maxeval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (int)((dreal::Config const *)arg1)->nlopt_maxeval();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1nlopt_1maxeval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< int > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< int > *) &(arg1)->mutable_nlopt_maxeval();
  *(dreal::OptionValue< int > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1nlopt_1maxtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (double)((dreal::Config const *)arg1)->nlopt_maxtime();
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1nlopt_1maxtime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< double > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< double > *) &(arg1)->mutable_nlopt_maxtime();
  *(dreal::OptionValue< double > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1SatDefaultPhase_1False_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dreal::Config::SatDefaultPhase result;

  (void)jenv;
  (void)jcls;
  result = (dreal::Config::SatDefaultPhase)dreal::Config::SatDefaultPhase::False;
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1SatDefaultPhase_1True_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dreal::Config::SatDefaultPhase result;

  (void)jenv;
  (void)jcls;
  result = (dreal::Config::SatDefaultPhase)dreal::Config::SatDefaultPhase::True;
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1SatDefaultPhase_1JeroslowWang_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dreal::Config::SatDefaultPhase result;

  (void)jenv;
  (void)jcls;
  result = (dreal::Config::SatDefaultPhase)dreal::Config::SatDefaultPhase::JeroslowWang;
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1SatDefaultPhase_1RandomInitialPhase_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  dreal::Config::SatDefaultPhase result;

  (void)jenv;
  (void)jcls;
  result = (dreal::Config::SatDefaultPhase)dreal::Config::SatDefaultPhase::RandomInitialPhase;
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1sat_1default_1phase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::Config::SatDefaultPhase result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::Config::SatDefaultPhase)((dreal::Config const *)arg1)->sat_default_phase();
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1sat_1default_1phase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< dreal::Config::SatDefaultPhase > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< dreal::Config::SatDefaultPhase > *) &(arg1)->mutable_sat_default_phase();
  *(dreal::OptionValue< dreal::Config::SatDefaultPhase > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1random_1seed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  uint32_t result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = ((dreal::Config const *)arg1)->random_seed();
  //*(uint32_t **)&jresult = new uint32_t(result);
  jresult = (jlong)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1random_1seed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< uint32_t > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< uint32_t > *) &(arg1)->mutable_random_seed();
  *(dreal::OptionValue< uint32_t > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1smtlib2_1compliant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (bool)((dreal::Config const *)arg1)->smtlib2_compliant();
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1smtlib2_1compliant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = (dreal::Config *) 0 ;
  dreal::OptionValue< bool > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  result = (dreal::OptionValue< bool > *) &(arg1)->mutable_smtlib2_compliant();
  *(dreal::OptionValue< bool > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1kDefaultPrecision_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  result = (double)dreal::Config::kDefaultPrecision;
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1kDefaultNloptFtolRel_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  result = (double)dreal::Config::kDefaultNloptFtolRel;
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1kDefaultNloptFtolAbs_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  result = (double)dreal::Config::kDefaultNloptFtolAbs;
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1kDefaultNloptMaxEval_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int)dreal::Config::kDefaultNloptMaxEval;
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1kDefaultNloptMaxTime_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  result = (double)dreal::Config::kDefaultNloptMaxTime;
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_InsertOperator_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  dreal::Config::SatDefaultPhase *arg2 = 0 ;
  dreal::Config::SatDefaultPhase temp2 ;
  std::ostream *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & is null");
    return 0;
  }
  temp2 = (dreal::Config::SatDefaultPhase)jarg2;
  arg2 = &temp2;
  result = (std::ostream *) &dreal::operator <<(*arg1,(enum dreal::Config::SatDefaultPhase const &)*arg2);
  *(std::ostream **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_InsertOperator_1_1SWIG_122(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::ostream *arg1 = 0 ;
  dreal::Config *arg2 = 0 ;
  std::ostream *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(std::ostream **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & is null");
    return 0;
  }
  arg2 = *(dreal::Config **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::Config const & is null");
    return 0;
  }
  result = (std::ostream *) &dreal::operator <<(*arg1,(dreal::Config const &)*arg2);
  *(std::ostream **)&jresult = result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_CheckSatisfiability_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *arg1 = 0 ;
  double arg2 ;
  dreal::Box *arg3 = (dreal::Box *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg2 = (double)jarg2;
  arg3 = *(dreal::Box **)&jarg3;
  result = (bool)dreal::CheckSatisfiability((dreal::drake::symbolic::Formula const &)*arg1,arg2,arg3);
  jresult = (jboolean)result;
  return jresult;
}

// rewritten
SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_CheckSatisfiability_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Formula *f = 0 ;
  dreal::Box *box = (dreal::Box *) 0 ;
  dreal::Config *config = (dreal::Config *) 0;


  // dreal::Config *config = new dreal::Config();
  // config->mutable_precision() = 0.001;
  // config->mutable_produce_models() = false;
  // config->mutable_use_polytope() = false;
  // config->mutable_use_polytope_in_forall() = false;
  // config->mutable_use_worklist_fixpoint() = false;
  // config->mutable_use_local_optimization() = false;
  // //config->mutable_dump_theory_literals() = false;
  // config->mutable_number_of_jobs() = 1;
  // config->mutable_stack_left_box_first() = false;
  // config->mutable_smtlib2_compliant() = false;

  // config->mutable_nlopt_ftol_rel() = 1e-6;
  // config->mutable_nlopt_ftol_abs() = 1e-6;
  // config->mutable_nlopt_maxeval() = 100;
  // config->mutable_nlopt_maxtime() = 0.01;

  // config->mutable_sat_default_phase() = dreal::Config::SatDefaultPhase::JeroslowWang;
  // config->mutable_random_seed() = 0;

  // config->mutable_brancher() = dreal::BranchLargestFirst;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_; 
  f = *(dreal::drake::symbolic::Formula **)&jarg1;
  if (!f) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  config = *(dreal::Config **)&jarg2;
  if (!config) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dreal::Config");
    return 0;
  }
  //arg2 = *argp2;

  box = *(dreal::Box **)&jarg3;

  // std::cerr << "Now Config is used from java" << std::endl;
  // //std::cerr << argconfig->precision() << std::endl;
  // std::cerr << argconfig->number_of_jobs() << std::endl;

  dreal::Context *context = new dreal::Context(*config);
  for (dreal::Variable v : f->GetFreeVariables()) {
      context->DeclareVariable(v);
  }
  context->Assert(*f);
  dreal::optional<dreal::Box> result = context->CheckSat();
  if (result) {
    DREAL_ASSERT(box);
    *box = *result;
    //std::cerr << *box << std::endl;
    jresult = (jboolean)true;
  } else {
    jresult = (jboolean)false;
  }
  return jresult;
  //return true;
}


// SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_CheckSatisfiability_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
//   jboolean jresult = 0 ;
//   dreal::drake::symbolic::Formula *arg1 = 0 ;
//   dreal::Config arg2 ;
//   dreal::Box *arg3 = (dreal::Box *) 0 ;
//   dreal::Config *argp2 ;
//   bool result;

//   (void)jenv;
//   (void)jcls;
//   (void)jarg1_;
//   (void)jarg2_;
//   (void)jarg3_; 
//   arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
//   if (!arg1) {
//     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
//     return 0;
//   }
//   argp2 = *(dreal::Config **)&jarg2;
//   if (!argp2) {
//     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dreal::Config");
//     return 0;
//   }
//   arg2 = *argp2;
//   arg3 = *(dreal::Box **)&jarg3;
//   result = (bool)dreal::CheckSatisfiability((dreal::drake::symbolic::Formula const &)*arg1,SWIG_STD_MOVE(arg2),arg3);
//   jresult = (jboolean)result;
//   return jresult;
// }


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Minimize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  double arg3 ;
  dreal::Box *arg4 = (dreal::Box *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  arg3 = (double)jarg3;
  arg4 = *(dreal::Box **)&jarg4;
  result = (bool)dreal::Minimize((dreal::drake::symbolic::Expression const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2,arg3,arg4);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Minimize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  dreal::drake::symbolic::Expression *arg1 = 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;
  dreal::Config arg3 ;
  dreal::Box *arg4 = (dreal::Box *) 0 ;
  dreal::Config *argp3 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(dreal::drake::symbolic::Expression **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return 0;
  }
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return 0;
  }
  argp3 = *(dreal::Config **)&jarg3;
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dreal::Config");
    return 0;
  }
  arg3 = *argp3;
  arg4 = *(dreal::Box **)&jarg4;
  result = (bool)dreal::Minimize((dreal::drake::symbolic::Expression const &)*arg1,(dreal::drake::symbolic::Formula const &)*arg2,SWIG_STD_MOVE(arg3),arg4);
  jresult = (jboolean)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Context_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  dreal::Context *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (dreal::Context *)new dreal::Context();
  *(dreal::Context **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Context_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Context *arg1 = 0 ;
  std::unique_ptr< dreal::Context > rvrdeleter1 ;
  dreal::Context *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Context **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::Context && is null");
    return 0;
  }
  rvrdeleter1.reset(arg1);
  result = (dreal::Context *)new dreal::Context((dreal::Context &&)*arg1);
  *(dreal::Context **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1Context(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(dreal::Context **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Context_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Config *arg1 = 0 ;
  dreal::Context *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Config **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::Config const & is null");
    return 0;
  }
  result = (dreal::Context *)new dreal::Context((dreal::Config const &)*arg1);
  *(dreal::Context **)&jresult = result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1Assert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  dreal::drake::symbolic::Formula *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Context **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Formula **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return ;
  }
  (arg1)->Assert((dreal::drake::symbolic::Formula const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1CheckSat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  SwigValueWrapper< dreal::optional< dreal::Box > > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Context **)&jarg1;
  result = (arg1)->CheckSat();
  *(dreal::optional< dreal::Box > **)&jresult = new dreal::optional< dreal::Box >(result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1DeclareVariable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  bool arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Context **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return ;
  }
  arg3 = jarg3 ? true : false;
  (arg1)->DeclareVariable((dreal::drake::symbolic::Variable const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1DeclareVariable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Context **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return ;
  }
  (arg1)->DeclareVariable((dreal::drake::symbolic::Variable const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1DeclareVariable_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Expression *arg3 = 0 ;
  dreal::drake::symbolic::Expression *arg4 = 0 ;
  bool arg5 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(dreal::Context **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return ;
  }
  arg3 = *(dreal::drake::symbolic::Expression **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return ;
  }
  arg4 = *(dreal::drake::symbolic::Expression **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return ;
  }
  arg5 = jarg5 ? true : false;
  (arg1)->DeclareVariable((dreal::drake::symbolic::Variable const &)*arg2,(dreal::drake::symbolic::Expression const &)*arg3,(dreal::drake::symbolic::Expression const &)*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1DeclareVariable_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  dreal::drake::symbolic::Expression *arg3 = 0 ;
  dreal::drake::symbolic::Expression *arg4 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(dreal::Context **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return ;
  }
  arg3 = *(dreal::drake::symbolic::Expression **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return ;
  }
  arg4 = *(dreal::drake::symbolic::Expression **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return ;
  }
  (arg1)->DeclareVariable((dreal::drake::symbolic::Variable const &)*arg2,(dreal::drake::symbolic::Expression const &)*arg3,(dreal::drake::symbolic::Expression const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1Exit(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  dreal::Context::Exit();
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1Minimize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Context **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return ;
  }
  (arg1)->Minimize((dreal::drake::symbolic::Expression const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1Minimize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  std::vector< dreal::drake::symbolic::Expression > *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Context **)&jarg1;
  arg2 = *(std::vector< dreal::drake::symbolic::Expression > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< dreal::drake::symbolic::Expression > const & is null");
    return ;
  }
  (arg1)->Minimize((std::vector< dreal::drake::symbolic::Expression > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1Maximize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  dreal::drake::symbolic::Expression *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Context **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Expression **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Expression const & is null");
    return ;
  }
  (arg1)->Maximize((dreal::drake::symbolic::Expression const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1Pop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Context **)&jarg1;
  arg2 = (int)jarg2;
  (arg1)->Pop(arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1Push(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Context **)&jarg1;
  arg2 = (int)jarg2;
  (arg1)->Push(arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1SetInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Context **)&jarg1;
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);
  arg3 = (double)jarg3;
  (arg1)->SetInfo((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1SetInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Context **)&jarg1;
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);
  (arg1)->SetInfo((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1SetInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jdouble jarg4) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  double arg3 ;
  double arg4 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(dreal::Context **)&jarg1;
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return ;
  }
  arg3 = (double)jarg3;
  arg4 = (double)jarg4;
  (arg1)->SetInterval((dreal::drake::symbolic::Variable const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1SetLogic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  dreal::Logic *arg2 = 0 ;
  dreal::Logic temp2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Context **)&jarg1;
  temp2 = (dreal::Logic)jarg2;
  arg2 = &temp2;
  (arg1)->SetLogic((dreal::Logic const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1SetOption_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Context **)&jarg1;
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);
  arg3 = (double)jarg3;
  (arg1)->SetOption((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1SetOption_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Context **)&jarg1;
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0);
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr);
  (arg1)->SetOption((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1GetOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< dreal::optional< std::string > > result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Context **)&jarg1;
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr);
  result = ((dreal::Context const *)arg1)->GetOption((std::string const &)*arg2);
  *(dreal::optional< std::string > **)&jresult = new dreal::optional< std::string >(result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  dreal::Config *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Context **)&jarg1;
  result = (dreal::Config *) &((dreal::Context const *)arg1)->config();
  *(dreal::Config **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1mutable_1config(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  dreal::Config *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Context **)&jarg1;
  result = (dreal::Config *) &(arg1)->mutable_config();
  *(dreal::Config **)&jresult = result;
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1version(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;

  (void)jenv;
  (void)jcls;
  result = dreal::Context::version();
  jresult = jenv->NewStringUTF((&result)->c_str());
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1assertions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  dreal::ScopedVector< dreal::drake::symbolic::Formula > *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Context **)&jarg1;
  result = (dreal::ScopedVector< dreal::drake::symbolic::Formula > *) &((dreal::Context const *)arg1)->assertions();
  *(dreal::ScopedVector< dreal::drake::symbolic::Formula > **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1box(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  dreal::Box *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Context **)&jarg1;
  result = (dreal::Box *) &((dreal::Context const *)arg1)->box();
  *(dreal::Box **)&jresult = result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1get_1model(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  dreal::Box *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(dreal::Context **)&jarg1;
  result = (dreal::Box *) &((dreal::Context const *)arg1)->get_model();
  *(dreal::Box **)&jresult = result;
  return jresult;
}

// VariableSet added later

SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableSet_1Iterator_1incrementUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::set< dreal::drake::symbolic::Variable >::iterator *arg1 = (std::set< dreal::drake::symbolic::Variable >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Variable >::iterator **)&jarg1; 
  std_set_Sl_dreal_drake_symbolic_Variable_Sg__iterator_incrementUnchecked(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableSet_1Iterator_1derefUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::set< dreal::drake::symbolic::Variable >::iterator *arg1 = (std::set< dreal::drake::symbolic::Variable >::iterator *) 0 ;
  dreal::drake::symbolic::Variable result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Variable >::iterator **)&jarg1; 
  result = std_set_Sl_dreal_drake_symbolic_Variable_Sg__iterator_derefUnchecked((std::set< dreal::drake::symbolic::Variable >::iterator const *)arg1);
  *(dreal::drake::symbolic::Variable **)&jresult = new dreal::drake::symbolic::Variable(result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableSet_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::set< dreal::drake::symbolic::Variable >::iterator *arg1 = (std::set< dreal::drake::symbolic::Variable >::iterator *) 0 ;
  std::set< dreal::drake::symbolic::Variable >::iterator arg2 ;
  std::set< dreal::drake::symbolic::Variable >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::set< dreal::drake::symbolic::Variable >::iterator **)&jarg1; 
  argp2 = *(std::set< dreal::drake::symbolic::Variable >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::set< dreal::drake::symbolic::Variable >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)std_set_Sl_dreal_drake_symbolic_Variable_Sg__iterator_isNot((std::set< dreal::drake::symbolic::Variable >::iterator const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1VariableSet_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< dreal::drake::symbolic::Variable >::iterator *arg1 = (std::set< dreal::drake::symbolic::Variable >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< dreal::drake::symbolic::Variable >::iterator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1VariableSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< dreal::drake::symbolic::Variable > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< dreal::drake::symbolic::Variable > *)new std::set< dreal::drake::symbolic::Variable >();
  *(std::set< dreal::drake::symbolic::Variable > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1VariableSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::set< dreal::drake::symbolic::Variable > *arg1 = 0 ;
  std::set< dreal::drake::symbolic::Variable > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Variable > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< dreal::drake::symbolic::Variable > const & is null");
    return 0;
  } 
  result = (std::set< dreal::drake::symbolic::Variable > *)new std::set< dreal::drake::symbolic::Variable >((std::set< dreal::drake::symbolic::Variable > const &)*arg1);
  *(std::set< dreal::drake::symbolic::Variable > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableSet_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::set< dreal::drake::symbolic::Variable > *arg1 = (std::set< dreal::drake::symbolic::Variable > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Variable > **)&jarg1; 
  result = (bool)((std::set< dreal::drake::symbolic::Variable > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableSet_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::set< dreal::drake::symbolic::Variable > *arg1 = (std::set< dreal::drake::symbolic::Variable > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Variable > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableSet_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::set< dreal::drake::symbolic::Variable > *arg1 = (std::set< dreal::drake::symbolic::Variable > *) 0 ;
  std::set< dreal::drake::symbolic::Variable >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Variable > **)&jarg1; 
  result = (arg1)->begin();
  *(std::set< dreal::drake::symbolic::Variable >::iterator **)&jresult = new std::set< dreal::drake::symbolic::Variable >::iterator(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableSet_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::set< dreal::drake::symbolic::Variable > *arg1 = (std::set< dreal::drake::symbolic::Variable > *) 0 ;
  std::set< dreal::drake::symbolic::Variable >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Variable > **)&jarg1; 
  result = (arg1)->end();
  *(std::set< dreal::drake::symbolic::Variable >::iterator **)&jresult = new std::set< dreal::drake::symbolic::Variable >::iterator(result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableSet_1addImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::set< dreal::drake::symbolic::Variable > *arg1 = (std::set< dreal::drake::symbolic::Variable > *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::set< dreal::drake::symbolic::Variable > **)&jarg1; 
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  } 
  result = (bool)std_set_Sl_dreal_drake_symbolic_Variable_Sg__addImpl(arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableSet_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::set< dreal::drake::symbolic::Variable > *arg1 = (std::set< dreal::drake::symbolic::Variable > *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::set< dreal::drake::symbolic::Variable > **)&jarg1; 
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  } 
  result = (bool)std_set_Sl_dreal_drake_symbolic_Variable_Sg__containsImpl(arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableSet_1removeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::set< dreal::drake::symbolic::Variable > *arg1 = (std::set< dreal::drake::symbolic::Variable > *) 0 ;
  dreal::drake::symbolic::Variable *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::set< dreal::drake::symbolic::Variable > **)&jarg1; 
  arg2 = *(dreal::drake::symbolic::Variable **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Variable const & is null");
    return 0;
  } 
  result = (bool)std_set_Sl_dreal_drake_symbolic_Variable_Sg__removeImpl(arg1,(dreal::drake::symbolic::Variable const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableSet_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::set< dreal::drake::symbolic::Variable > *arg1 = (std::set< dreal::drake::symbolic::Variable > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::set< dreal::drake::symbolic::Variable > **)&jarg1; 
  try {
    result = std_set_Sl_dreal_drake_symbolic_Variable_Sg__sizeImpl((std::set< dreal::drake::symbolic::Variable > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_VariableSet_1hasNextImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::set< dreal::drake::symbolic::Variable > *arg1 = (std::set< dreal::drake::symbolic::Variable > *) 0 ;
  std::set< dreal::drake::symbolic::Variable >::iterator *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::set< dreal::drake::symbolic::Variable > **)&jarg1; 
  arg2 = *(std::set< dreal::drake::symbolic::Variable >::iterator **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::set< dreal::drake::symbolic::Variable >::iterator const & is null");
    return 0;
  } 
  result = (bool)std_set_Sl_dreal_drake_symbolic_Variable_Sg__hasNextImpl((std::set< dreal::drake::symbolic::Variable > const *)arg1,(std::set< dreal::drake::symbolic::Variable >::iterator const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_delete_1VariableSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::set< dreal::drake::symbolic::Variable > *arg1 = (std::set< dreal::drake::symbolic::Variable > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::set< dreal::drake::symbolic::Variable > **)&jarg1; 
  delete arg1;
}


//Start of self written JNI calls

SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1precision_10(JNIEnv *jenv, jclass jcls, jdouble value, jlong config) {
  double val = (double)value;
  dreal::Config *configure = (dreal::Config *) 0;
  configure = *(dreal::Config **)&config;
  configure->mutable_precision() = val;
}

SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1produce_1models_10(JNIEnv *jenv, jclass jcls, jboolean boolean, jlong config) {
  bool binary = (bool)boolean;
  dreal::Config *configure = (dreal::Config *) 0;
  configure = *(dreal::Config **)&config;
  configure->mutable_produce_models() = binary;
}

SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1use_1polytope_10(JNIEnv *jenv, jclass jcls, jboolean boolean, jlong config) {
  bool binary = (bool)boolean;
  dreal::Config *configure = (dreal::Config *) 0;
  configure = *(dreal::Config **)&config;
  configure->mutable_use_polytope() = binary;
}

SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1use_1polytope_1in_1forall_10(JNIEnv *jenv, jclass jcls, jboolean boolean, jlong config) {
  bool binary = (bool)boolean;
  dreal::Config *configure = (dreal::Config *) 0;
  configure = *(dreal::Config **)&config;
  configure->mutable_use_polytope_in_forall() = binary;
}

SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1use_1worklist_1fixpoint_10(JNIEnv *jenv, jclass jcls, jboolean boolean, jlong config) {
  bool binary = (bool)boolean;
  dreal::Config *configure = (dreal::Config *) 0;
  configure = *(dreal::Config **)&config;
  configure->mutable_use_worklist_fixpoint() = binary;
}

SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1use_1local_1optimization_10(JNIEnv *jenv, jclass jcls, jboolean boolean, jlong config) {
  bool binary = (bool)boolean;
  dreal::Config *configure = (dreal::Config *) 0;
  configure = *(dreal::Config **)&config;
  configure->mutable_use_local_optimization() = binary;
}

// SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1dump_1theory_1literals_10(JNIEnv *jenv, jclass jcls, jboolean boolean, jlong config) {
//   bool binary = (bool)boolean;
//   dreal::Config *configure = (dreal::Config *) 0;
//   configure = *(dreal::Config **)&config;
//   configure->mutable_dump_theory_literals() = binary;
// }

SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1number_1of_1jobs_10(JNIEnv *jenv, jclass jcls, jint value, jlong config) {
  int val = (int)value;
  dreal::Config *configure = (dreal::Config *) 0;
  configure = *(dreal::Config **)&config;
  configure->mutable_number_of_jobs() = val;
}

SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1stack_1left_1box_1first_10(JNIEnv *jenv, jclass jcls, jboolean boolean, jlong config) {
  bool binary = (bool)boolean;
  dreal::Config *configure = (dreal::Config *) 0;
  configure = *(dreal::Config **)&config;
  configure->mutable_stack_left_box_first() = binary;
}

SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1nlopt_1ftol_1rel_10(JNIEnv *jenv, jclass jcls, jdouble value, jlong config) {
  double val = (double)value;
  dreal::Config *configure = (dreal::Config *) 0;
  configure = *(dreal::Config **)&config;
  configure->mutable_nlopt_ftol_rel() = val;
}

SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1nlopt_1ftol_1abs_10(JNIEnv *jenv, jclass jcls, jdouble value, jlong config) {
  double val = (double)value;
  dreal::Config *configure = (dreal::Config *) 0;
  configure = *(dreal::Config **)&config;
  configure->mutable_nlopt_ftol_abs() = val;
}

SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1nlopt_1maxeval_10(JNIEnv *jenv, jclass jcls, jint value, jlong config) {
  int val = (int)value;
  dreal::Config *configure = (dreal::Config *) 0;
  configure = *(dreal::Config **)&config;
  configure->mutable_nlopt_maxeval() = val;
}

SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1nlopt_1maxtime_10(JNIEnv *jenv, jclass jcls, jdouble value, jlong config) {
  double val = (double)value;
  dreal::Config *configure = (dreal::Config *) 0;
  configure = *(dreal::Config **)&config;
  configure->mutable_nlopt_maxtime() = val;
}

SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1random_1seed_10(JNIEnv *jenv, jclass jcls, jlong seed, jlong config) {
  uint32_t stone = (uint32_t)seed;
  dreal::Config *configure = (dreal::Config *) 0;
  configure = *(dreal::Config **)&config;
  configure->mutable_random_seed() = stone;
}

SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Config_1mutable_1smtlib2_1compliant_10(JNIEnv *jenv, jclass jcls, jboolean boolean, jlong config) {
  bool binary = (bool)boolean;
  dreal::Config *configure = (dreal::Config *) 0;
  configure = *(dreal::Config **)&config;
  configure->mutable_smtlib2_compliant() = binary;
}

SWIGEXPORT void Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1declareVariables(JNIEnv *jenv, jclass jcls, jlong cntxt, jlong f) {
  dreal::Context *context = (dreal::Context *) 0;
  context = *(dreal::Context **)&cntxt;
  dreal::drake::symbolic::Formula *formula = (dreal::drake::symbolic::Formula *) 0;
  formula = *(dreal::drake::symbolic::Formula **)&f;

  (void)jenv;
  (void)jcls;

  if (!f) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
    return;
  }

  for (const dreal::drake::symbolic::Variable& v: formula->GetFreeVariables()) {
    context->DeclareVariable(v);
  }
}

SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1CheckSat_10(JNIEnv *jenv, jclass jcls, jlong cntxt, jlong b) {
  jboolean jresult = 0 ;
  dreal::Box *box = (dreal::Box *) 0 ;
  box = *(dreal::Box **)&b;
  dreal::Context *context = (dreal::Context *) 0;
  context = *(dreal::Context **)&cntxt; 
  
  (void)jenv;
  (void)jcls;

  dreal::optional<dreal::Box> result = context->CheckSat();
  
  if (result) {
    DREAL_ASSERT(box);
    *box = *result;
    jresult = (jboolean)true;
  } else {
    jresult = (jboolean)false;
  }
  return jresult;
}

SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Formula_1getQuantifiedVariables(JNIEnv *jenv, jclass jcls, jlong set, jlong f) {
  jlong returnSet = 0;
  
  dreal::drake::symbolic::Formula *formula = (dreal::drake::symbolic::Formula *) 0;
  formula = *(dreal::drake::symbolic::Formula **)&f;
  std::set< dreal::drake::symbolic::Variable > *s = (std::set< dreal::drake::symbolic::Variable > *) 0 ;
  s = *(std::set< dreal::drake::symbolic::Variable > **)&set;

  for (dreal::drake::symbolic::Variable v : dreal::drake::symbolic::get_quantified_variables(*formula)) {
    s->insert(v);
  }
  
  *(std::set< dreal::drake::symbolic::Variable > **)&returnSet = s; 
  
  return returnSet;
}

SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_new_1Expression_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  long arg1 ;
  dreal::drake::symbolic::Expression *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (long)jarg1;
  result = (dreal::drake::symbolic::Expression *)new dreal::drake::symbolic::Expression(arg1);
  *(dreal::drake::symbolic::Expression **)&jresult = result;
  return jresult;
}

SWIGEXPORT jstring JNICALL
Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_getResult(JNIEnv *jenv, jclass
jcls, jlong model, jlong var) {
  jstring result = 0;
  dreal::Box *box = (dreal::Box *) 0;
  dreal::drake::symbolic::Variable *variable = (dreal::drake::symbolic::Variable *) 0;

  variable = *(dreal::drake::symbolic::Variable**)&var;
  box = *(dreal::Box **)&model;
  dreal::Box copyBox{*box};
  std::string res;

  dreal::drake::symbolic::Variable copyVar{*variable};

  dreal::Box::Interval interval = copyBox[copyVar];
  if (interval.is_empty()) {
  res = "EMPTY";
  } else {
    std::string lb = std::to_string(interval.lb());
    std::string ub = std::to_string(interval.ub());
    res = lb + "; " + ub;
  }

  result = jenv->NewStringUTF((&res)->c_str());
  return result;
}  
// Functions for debugging and trying to figure stuff out

SWIGEXPORT jboolean JNICALL
Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Box_1has_1variable_10(JNIEnv *jenv,
jclass
jcls, jlong model, jlong var) {
  dreal::Box *box = (dreal::Box *) 0;
  dreal::drake::symbolic::Variable *variable = (dreal::drake::symbolic::Variable *) 0;

  box = *(dreal::Box **)&model;
  variable = *(dreal::drake::symbolic::Variable **)&var;

  dreal::Box cb{*box};
  dreal::drake::symbolic::Variable cv{*variable};

  std::cerr << cb.has_variable(cv) << std::endl;

  return true;
}


// trying to figure out how CheckSatisfiability works and why it does not work
SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_CheckSatisfiability_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jboolean jresult = 0 ;
  printf("HIer wird gleich aufgerufen");
  dreal::drake::symbolic::Formula *arg1 = 0;
  dreal::Config arg2;
  dreal::Config *argp2;
  //bool result;
  (void) jarg1;
  (void)jenv;
  (void)jcls;
  arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
//   if (!arg1) {
//     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
//     return 0;
//   }
//   argp2 = *(dreal::Config **)&jarg2;
//   if (!argp2) {
//     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dreal::Config");
//     return 0;
//   }

  arg2 = *argp2;
  dreal::Box *box;
  dreal::Config config;
  config.mutable_use_polytope_in_forall() = true;
  //dreal::drake::symbolic::Variable x{"x"};
  //dreal::drake::symbolic::Formula f = (0 <= x) && (x <= 3.141592) && (sin(x) >= 0.99);
  //optional<dreal::Box> result{CheckSatisfiability(f, std::move(config))};
  bool result = CheckSatisfiability((dreal::drake::symbolic::Formula&)arg1, arg2, box);

  //const auto result = dreal::CheckSatisfiability((dreal::drake::symbolic::Formula const &)arg1, config);
  //result = true;
//   if (result) {
//     jresult = true;
//   } else {
//     jresult = false;
//   }
  //jresult = (jboolean)result;
  jresult = true;
  return jresult;
}
//   jlong jresult = 0 ;
//   Formula *arg1 = 0 ;
//   double arg2 ;
//   SwigValueWrapper< optional< dreal::Box > > result;
//
//   (void)jenv;
//   (void)jcls;
//   arg1 = *(Formula **)&jarg1;
//   if (!arg1) {
//     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Formula const & is null");
//     return 0;
//   }
//   arg2 = (double)jarg2;
//   result = dreal::CheckSatisfiability((Formula const &)*arg1,arg2);
//   *(optional< dreal::Box > **)&jresult = new optional< dreal::Box >(result);
//   return jresult;

//
// jboolean jresult = 0 ;
//   dreal::drake::symbolic::Formula *arg1 = 0 ;
//   dreal::Config arg2 ;
//   dreal::Box *arg3 = (dreal::Box *) 0 ;
//   dreal::Config *argp2 ;
//   bool result;
//
//   (void)jenv;
//   (void)jcls;
//   (void)jarg1_;
//   (void)jarg2_;
//   (void)jarg3_;
//   arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
//   if (!arg1) {
//     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
//     return 0;
//   }
//   argp2 = *(dreal::Config **)&jarg2;
//   if (!argp2) {
//     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null dreal::Config");
//     return 0;
//   }
//   arg2 = *argp2;
//   arg3 = *(dreal::Box **)&jarg3;
//   //result = (bool)dreal::CheckSatisfiability((dreal::drake::symbolic::Formula const &)*arg1,SWIG_STD_MOVE(arg2),arg3);
//   result = (bool)dreal::CheckSatisfiability((dreal::drake::symbolic::Formula const &)arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
//   jresult = (jboolean)result;
//   return jresult;

SWIGEXPORT jboolean JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_CheckSatisfiability_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  //dreal::drake::symbolic::Formula arg1 = *(dreal::drake::symbolic::Formula*) jarg1;
  //double arg2 ;
  //double *arg2 = *(double**)& jarg2;
  //dreal::Box arg3 = *(dreal::Box *) jarg3;
  bool result;

  (void) jarg1;
  (void) jarg2;
  (void) jarg3;
  (void)jenv;
  (void)jcls;
//   arg1 = *(dreal::drake::symbolic::Formula **)&jarg1;
//   if (!arg1) {
//     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "dreal::drake::symbolic::Formula const & is null");
//     return 0;
//   }
//   arg2 = (double)jarg2;
  //arg3 = *(dreal::Box **)&jarg3;
  printf("Test");
  dreal::Box *box;
  dreal::Config config;
  dreal::drake::symbolic::Variable x{"x"};
  dreal::Formula f = (0 <= x) && (x <= 3.141592) && (sin(x) >= 0.99);
  //result = true;
  result = dreal::CheckSatisfiability(f,0.001,box);
  if (result) {
    std::cerr << *box << std::endl;
  }
  printf("Test nach kritischer stelle??");
  jresult = (jboolean)result;
  return jresult;

  //dreal::Config configure = *(dreal::Config*)config;
}

// SWIGEXPORT jlong JNICALL Java_drealapiJNI_CheckSatisfiability_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
//   jlong jresult = 0 ;
//   Formula *arg1 = 0 ;
//   double arg2 ;
//   SwigValueWrapper< optional< dreal::Box > > result;
//
//   (void)jenv;
//   (void)jcls;
//   arg1 = *(Formula **)&jarg1;
//   if (!arg1) {
//     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Formula const & is null");
//     return 0;
//   }
//   arg2 = (double)jarg2;
//   result = dreal::CheckSatisfiability((Formula const &)*arg1,arg2);
//   *(optional< dreal::Box > **)&jresult = new optional< dreal::Box >(result);
//   return jresult;
// }

SWIGEXPORT jlong JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1CheckSatBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  dreal::Context *arg1 = (dreal::Context *) 0 ;
  dreal::optional<dreal::Box> result;
  dreal::Box *box;
  //SwigValueWrapper< optional< dreal::Box > > result;

  (void)jenv;
  (void)jcls;

  arg1 = *(dreal::Context **)&jarg1;
  result = (arg1)->CheckSat();
  //*(optional< dreal::Box > **)&jresult = new optional< dreal::Box >(result);
  if (result) {
    *box = *result;
    *(dreal::Box**)&jresult = box;
  }
  else {
    *(dreal::Box**)&jresult = box;
  }
  return jresult;
}



SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1Test(JNIEnv *jenv, jclass jcls) {

  (void)jenv;
  (void)jcls;

  dreal::Variable *x = new dreal::Variable("x");
  std::cerr << x->get_name() << std::endl;
  dreal::Config *config = new dreal::Config();
  config->mutable_precision() = 0.001;
  config->mutable_use_polytope_in_forall() = true;
  config->mutable_use_local_optimization() = true;
  std::cerr << config->precision() << std::endl;

  dreal::Formula *f = new dreal::Formula((0 <= *x) && (*x <= 0));
  std::cerr << *f << std::endl;

  const auto result = dreal::CheckSatisfiability(*f, *config);

  if (result) {
    std::cerr << *result << std::endl;
  } else {
    std::cerr << "Failed!" << std::endl;
  }

  // dreal::Config *config = new dreal::Config();
  // dreal::Box *box = new dreal::Box();
  // //dreal::Context context{std::move(config)};
  // dreal::Variable x{"x"};
  // dreal::Formula f{(x>=0) && (0>=x)};
  // bool result = dreal::CheckSatisfiability(f, *config, box);
//   context.DeclareVariable(x);
//   context.Assert(f);
  //optional<dreal::Box> result = context.CheckSat();


//   if (result) {
//     return true;
//   } else {
//     return false;
//   }
}

SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_Context_1TestCheckSat(JNIEnv *jenv, jclass jcls) {

  (void)jenv;
  (void)jcls;

  // dreal::Config *config = new dreal::Config();
  // std::cerr << config->precision() << std::endl;

  // dreal::Box *box = new dreal::Box();
  // std::cerr << *box << std::endl;

  // dreal::Variable *x = new dreal::Variable("x");
  // std::cerr << x->get_name() << std::endl;
  // box->Add(*x);
  // std::cerr << *box << std::endl;

  // dreal::Formula *f = new Formula(0 <= *x && *x <= 0);
  // std::cerr << *f << std::endl;

  // dreal::Context *context;
  // std::cerr << context->version() << std::endl;

  // context->DeclareVariable(*x);
  // //context->Assert(*f);

  dreal::Config config;
  std::cerr << config.precision() << std::endl;

  dreal::Box box;
  std::cerr << box << std::endl;

  dreal::Variable x{"x"};
  std::cerr << x.get_name() << std::endl;
  box.Add(x);
  std::cerr << box << std::endl;

  dreal::Formula f{1 <= x && x <= 0};
  std::cerr << f << std::endl;

  dreal::Context context;
  std::cerr << context.version() << std::endl;

  context.DeclareVariable(x);
  context.Assert(f);

  dreal::optional<dreal::Box> result = context.CheckSat();

  if (result) {
    std::cerr << *result << std::endl;
  } else {
    std::cerr << "Failed!" << std::endl;
  }

}

SWIGEXPORT void JNICALL Java_org_sosy_1lab_java_1smt_solvers_dreal4_drealjni_drealJNI_satCheck(JNIEnv *jenv, jclass jcls) {

  (void)jenv;
  (void)jcls;

  dreal::Config *config = new dreal::Config();
  // To create the right default configuration
  config->mutable_precision() = 0.001;
  config->mutable_produce_models() = false;
  config->mutable_use_polytope() = false;
  config->mutable_use_polytope_in_forall() = false;
  config->mutable_use_worklist_fixpoint() = false;
  config->mutable_use_local_optimization() = false;
  //config->mutable_dump_theory_literals() = false;
  config->mutable_number_of_jobs() = 1;
  config->mutable_stack_left_box_first() = false;
  config->mutable_smtlib2_compliant() = false;

  config->mutable_nlopt_ftol_rel() = 1e-6;
  config->mutable_nlopt_ftol_abs() = 1e-6;
  config->mutable_nlopt_maxeval() = 100;
  config->mutable_nlopt_maxtime() = 0.01;

  config->mutable_sat_default_phase() = dreal::Config::SatDefaultPhase::JeroslowWang;
  config->mutable_random_seed() = 0;

  config->mutable_brancher() = dreal::BranchLargestFirst;

  dreal::Box *box = new dreal::Box();

  dreal::Variable *var_x = new dreal::Variable("x");
  dreal::Expression *x = new dreal::Expression(*var_x);
  dreal::Formula *f = new dreal::Formula((0 <= *x) && (*x <= 3.14) && (dreal::sin(*x) <= 0.99));
  
  dreal::Context *context = new dreal::Context(*config);
  for (dreal::Variable v : f->GetFreeVariables()) {
    context->DeclareVariable(v);
  }
  context->Assert(*f);
  dreal::optional<dreal::Box> result = context->CheckSat();
  if (result) {
    std::cerr << true << std::endl;
    std::cerr << *result << std::endl;
  }
  
  //bool res = dreal::CheckSatisfiability(*f, *config  , box);
  // std::cerr << result << std::endl;
  // std::cerr << *box << std::endl;

}

#ifdef __cplusplus
}
#endif

