/*
 *  JavaSMT is an API wrapper for a collection of SMT solvers.
 *  This file is part of JavaSMT.
 *
 *  Copyright (C) 2007-2016  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;

public final class ExpressionKind {
  public static final ExpressionKind Constant = new ExpressionKind("Constant");
  public static final ExpressionKind RealConstant = new ExpressionKind("RealConstant");
  public static final ExpressionKind Var = new ExpressionKind("Var");
  public static final ExpressionKind Add = new ExpressionKind("Add");
  public static final ExpressionKind Mul = new ExpressionKind("Mul");
  public static final ExpressionKind Div = new ExpressionKind("Div");
  public static final ExpressionKind Log = new ExpressionKind("Log");
  public static final ExpressionKind Abs = new ExpressionKind("Abs");
  public static final ExpressionKind Exp = new ExpressionKind("Exp");
  public static final ExpressionKind Sqrt = new ExpressionKind("Sqrt");
  public static final ExpressionKind Pow = new ExpressionKind("Pow");
  public static final ExpressionKind Sin = new ExpressionKind("Sin");
  public static final ExpressionKind Cos = new ExpressionKind("Cos");
  public static final ExpressionKind Tan = new ExpressionKind("Tan");
  public static final ExpressionKind Asin = new ExpressionKind("Asin");
  public static final ExpressionKind Acos = new ExpressionKind("Acos");
  public static final ExpressionKind Atan = new ExpressionKind("Atan");
  public static final ExpressionKind Atan2 = new ExpressionKind("Atan2");
  public static final ExpressionKind Sinh = new ExpressionKind("Sinh");
  public static final ExpressionKind Cosh = new ExpressionKind("Cosh");
  public static final ExpressionKind Tanh = new ExpressionKind("Tanh");
  public static final ExpressionKind Min = new ExpressionKind("Min");
  public static final ExpressionKind Max = new ExpressionKind("Max");
  public static final ExpressionKind IfThenElse = new ExpressionKind("IfThenElse");
  public static final ExpressionKind NaN = new ExpressionKind("NaN");
  public static final ExpressionKind UninterpretedFunction =
      new ExpressionKind("UninterpretedFunction");

  public final int swigValue() {
    return swigValue;
  }

  @Override
  public String toString() {
    return swigName;
  }

  public static ExpressionKind swigToEnum(int swigValue) {
    if (swigValue < swigValues.length
        && swigValue >= 0
        && swigValues[swigValue].swigValue == swigValue) return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue) return swigValues[i];
    throw new IllegalArgumentException(
        "No enum " + ExpressionKind.class + " with value " + swigValue);
  }

  private ExpressionKind(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  @SuppressWarnings({"unused", "StaticAssignmentInConstructor"})
  private ExpressionKind(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue + 1;
  }

  @SuppressWarnings({"unused", "StaticAssignmentInConstructor"})
  private ExpressionKind(String swigName, ExpressionKind swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue + 1;
  }

  private static ExpressionKind[] swigValues = {
    Constant,
    RealConstant,
    Var,
    Add,
    Mul,
    Div,
    Log,
    Abs,
    Exp,
    Sqrt,
    Pow,
    Sin,
    Cos,
    Tan,
    Asin,
    Acos,
    Atan,
    Atan2,
    Sinh,
    Cosh,
    Tanh,
    Min,
    Max,
    IfThenElse,
    NaN,
    UninterpretedFunction
  };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}
