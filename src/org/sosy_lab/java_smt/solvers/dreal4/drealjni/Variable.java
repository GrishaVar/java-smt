/*
 *  JavaSMT is an API wrapper for a collection of SMT solvers.
 *  This file is part of JavaSMT.
 *
 *  Copyright (C) 2007-2016  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;

public class Variable {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Variable(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Variable obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(Variable obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("Finalize")
  protected void finalize1() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        drealJNI.delete_Variable(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Variable(Variable arg0) {
    this(drealJNI.new_Variable__SWIG_0(Variable.getCPtr(arg0), arg0), true);
  }

  public Variable AssignOperator(Variable arg0) {
    return new Variable(
        drealJNI.Variable_AssignOperator__SWIG_0(swigCPtr, this, Variable.getCPtr(arg0), arg0),
        false);
  }

  public Variable() {
    this(drealJNI.new_Variable__SWIG_1(), true);
  }

  public Variable(String name, Variable.Type type) {
    this(drealJNI.new_Variable__SWIG_2(name, type.swigValue()), true);
  }

  public Variable(String name) {
    this(drealJNI.new_Variable__SWIG_3(name), true);
  }

  public Variable(String name, Variable.Type type, boolean model_variable) {
    this(drealJNI.new_Variable__SWIG_4(name, type.swigValue(), model_variable), true);
  }

  public boolean is_dummy() {
    return drealJNI.Variable_is_dummy(swigCPtr, this);
  }

  public long get_id() {
    return drealJNI.Variable_get_id(swigCPtr, this);
  }

  public Variable.Type get_type() {
    return Variable.Type.swigToEnum(drealJNI.Variable_get_type(swigCPtr, this));
  }

  public long get_hash() {
    return drealJNI.Variable_get_hash(swigCPtr, this);
  }

  public String get_name() {
    return drealJNI.Variable_get_name(swigCPtr, this);
  }

  public String to_string() {
    return drealJNI.Variable_to_string(swigCPtr, this);
  }

  public boolean equal_to(Variable v) {
    return drealJNI.Variable_equal_to(swigCPtr, this, Variable.getCPtr(v), v);
  }

  public boolean less(Variable v) {
    return drealJNI.Variable_less(swigCPtr, this, Variable.getCPtr(v), v);
  }

  public static final class Type {
    public static final Variable.Type CONTINUOUS = new Variable.Type("CONTINUOUS");
    public static final Variable.Type INTEGER = new Variable.Type("INTEGER");
    public static final Variable.Type BINARY = new Variable.Type("BINARY");
    public static final Variable.Type BOOLEAN = new Variable.Type("BOOLEAN");

    public final int swigValue() {
      return swigValue;
    }

    @Override
    public String toString() {
      return swigName;
    }

    public static Type swigToEnum(int swigValue) {
      if (swigValue < swigValues.length
          && swigValue >= 0
          && swigValues[swigValue].swigValue == swigValue) return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue) return swigValues[i];
      throw new IllegalArgumentException("No enum " + Type.class + " with value " + swigValue);
    }

    private Type(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    @SuppressWarnings({"unused", "StaticAssignmentInConstructor"})
    private Type(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue + 1;
    }

    @SuppressWarnings({"unused", "StaticAssignmentInConstructor"})
    private Type(String swigName, Type swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue + 1;
    }

    private static Type[] swigValues = {CONTINUOUS, INTEGER, BINARY, BOOLEAN};
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }
}
