/*
 *  JavaSMT is an API wrapper for a collection of SMT solvers.
 *  This file is part of JavaSMT.
 *
 *  Copyright (C) 2007-2016  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;

public final class Logic {
  public final static Logic ALL = new Logic("ALL");
  public final static Logic QF_LIA = new Logic("QF_LIA");
  public final static Logic QF_LIRA = new Logic("QF_LIRA");
  public final static Logic QF_LRA = new Logic("QF_LRA");
  public final static Logic QF_NIA = new Logic("QF_NIA");
  public final static Logic QF_NIAT = new Logic("QF_NIAT");
  public final static Logic QF_NIRA = new Logic("QF_NIRA");
  public final static Logic QF_NIRAT = new Logic("QF_NIRAT");
  public final static Logic QF_NRA = new Logic("QF_NRA");
  public final static Logic QF_NRAT = new Logic("QF_NRAT");
  public final static Logic QF_RDL = new Logic("QF_RDL");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static Logic swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + Logic.class + " with value " + swigValue);
  }

  private Logic(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private Logic(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private Logic(String swigName, Logic swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static Logic[] swigValues = { ALL, QF_LIA, QF_LIRA, QF_LRA, QF_NIA, QF_NIAT, QF_NIRA, QF_NIRAT, QF_NRA, QF_NRAT, QF_RDL };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

