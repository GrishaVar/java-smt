/*
 *  JavaSMT is an API wrapper for a collection of SMT solvers.
 *  This file is part of JavaSMT.
 *
 *  Copyright (C) 2007-2016  Dirk Beyer
 *  All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package org.sosy_lab.java_smt.solvers.dreal4.drealjni;

public class OptionValueInt {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected OptionValueInt(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(OptionValueInt obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(OptionValueInt obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize1() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        drealJNI.delete_OptionValueInt(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public OptionValueInt(int value) {
    this(drealJNI.new_OptionValueInt__SWIG_0(value), true);
  }

  public OptionValueInt(OptionValueInt arg0) {
    this(drealJNI.new_OptionValueInt__SWIG_1(OptionValueInt.getCPtr(arg0), arg0), true);
  }

  public OptionValueInt AssignOperator(OptionValueInt arg0) {
    return new OptionValueInt(drealJNI.OptionValueInt_AssignOperator__SWIG_0(swigCPtr, this, OptionValueInt.getCPtr(arg0), arg0), false);
  }

  public OptionValueInt AssignOperator(int value) {
    return new OptionValueInt(drealJNI.OptionValueInt_AssignOperator__SWIG_2(swigCPtr, this, value), false);
  }

  public OptionValueInt AssignOperator(SWIGTYPE_p_int value) {
    return new OptionValueInt(drealJNI.OptionValueInt_AssignOperator__SWIG_3(swigCPtr, this, SWIGTYPE_p_int.swigRelease(value)), false);
  }

  public int get() {
    return drealJNI.OptionValueInt_get(swigCPtr, this);
  }

  public void set_from_command_line(int value) {
    drealJNI.OptionValueInt_set_from_command_line(swigCPtr, this, value);
  }

  public void set_from_file(int value) {
    drealJNI.OptionValueInt_set_from_file(swigCPtr, this, value);
  }

  public final static class Type {
    public final static OptionValueInt.Type DEFAULT = new OptionValueInt.Type("DEFAULT");
    public final static OptionValueInt.Type FROM_FILE = new OptionValueInt.Type("FROM_FILE");
    public final static OptionValueInt.Type FROM_COMMAND_LINE = new OptionValueInt.Type("FROM_COMMAND_LINE");
    public final static OptionValueInt.Type FROM_CODE = new OptionValueInt.Type("FROM_CODE");

    public final int swigValue() {
      return swigValue;
    }
    @Override
    public String toString() {
      return swigName;
    }

    public static Type swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Type.class + " with value " + swigValue);
    }

    private Type(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }
    @SuppressWarnings({"unused", "StaticAssignmentInConstructor"})
    private Type(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }
    @SuppressWarnings({"unused", "StaticAssignmentInConstructor"})
    private Type(String swigName, Type swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Type[] swigValues = { DEFAULT, FROM_FILE, FROM_COMMAND_LINE, FROM_CODE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
