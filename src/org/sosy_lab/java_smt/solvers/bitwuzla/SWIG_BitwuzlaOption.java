// This file is part of JavaSMT,
// an API wrapper for a collection of SMT solvers:
// https://github.com/sosy-lab/java-smt
//
// This file is based on "btortypes.h" from Boolector.
//
// SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
// SPDX-FileCopyrightText: 2015-2020 Mathias Preiner
// SPDX-FileCopyrightText: 2016 Armin Biere
// SPDX-FileCopyrightText: 2016-2020 Aina Niemetz
//
// SPDX-License-Identifier: MIT AND Apache-2.0

package org.sosy_lab.java_smt.solvers.bitwuzla;
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public final class SWIG_BitwuzlaOption {
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_ENGINE = new SWIG_BitwuzlaOption("BITWUZLA_OPT_ENGINE");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_EXIT_CODES = new SWIG_BitwuzlaOption("BITWUZLA_OPT_EXIT_CODES");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_INPUT_FORMAT = new SWIG_BitwuzlaOption("BITWUZLA_OPT_INPUT_FORMAT");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_INCREMENTAL = new SWIG_BitwuzlaOption("BITWUZLA_OPT_INCREMENTAL");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_LOGLEVEL = new SWIG_BitwuzlaOption("BITWUZLA_OPT_LOGLEVEL");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_OUTPUT_FORMAT = new SWIG_BitwuzlaOption("BITWUZLA_OPT_OUTPUT_FORMAT");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_OUTPUT_NUMBER_FORMAT = new SWIG_BitwuzlaOption("BITWUZLA_OPT_OUTPUT_NUMBER_FORMAT");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PRETTY_PRINT = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PRETTY_PRINT");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PRINT_DIMACS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PRINT_DIMACS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PRODUCE_MODELS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PRODUCE_MODELS");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PRODUCE_UNSAT_CORES = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PRODUCE_UNSAT_CORES");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_SAT_ENGINE = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SAT_ENGINE");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_SEED = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SEED");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_VERBOSITY = new SWIG_BitwuzlaOption("BITWUZLA_OPT_VERBOSITY");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PP_ACKERMANN = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PP_ACKERMANN");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PP_BETA_REDUCE = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PP_BETA_REDUCE");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PP_ELIMINATE_EXTRACTS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PP_ELIMINATE_EXTRACTS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PP_ELIMINATE_ITES = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PP_ELIMINATE_ITES");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PP_EXTRACT_LAMBDAS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PP_EXTRACT_LAMBDAS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PP_MERGE_LAMBDAS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PP_MERGE_LAMBDAS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PP_NONDESTR_SUBST = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PP_NONDESTR_SUBST");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PP_NORMALIZE_ADD = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PP_NORMALIZE_ADD");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PP_SKELETON_PREPROC = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PP_SKELETON_PREPROC");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PP_UNCONSTRAINED_OPTIMIZATION = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PP_UNCONSTRAINED_OPTIMIZATION");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PP_VAR_SUBST = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PP_VAR_SUBST");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_RW_EXTRACT_ARITH = new SWIG_BitwuzlaOption("BITWUZLA_OPT_RW_EXTRACT_ARITH");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_RW_LEVEL = new SWIG_BitwuzlaOption("BITWUZLA_OPT_RW_LEVEL");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_RW_NORMALIZE = new SWIG_BitwuzlaOption("BITWUZLA_OPT_RW_NORMALIZE");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_RW_NORMALIZE_ADD = new SWIG_BitwuzlaOption("BITWUZLA_OPT_RW_NORMALIZE_ADD");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_RW_SIMPLIFY_CONSTRAINTS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_RW_SIMPLIFY_CONSTRAINTS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_RW_SLT = new SWIG_BitwuzlaOption("BITWUZLA_OPT_RW_SLT");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_RW_SORT_AIG = new SWIG_BitwuzlaOption("BITWUZLA_OPT_RW_SORT_AIG");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_RW_SORT_AIGVEC = new SWIG_BitwuzlaOption("BITWUZLA_OPT_RW_SORT_AIGVEC");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_RW_SORT_EXP = new SWIG_BitwuzlaOption("BITWUZLA_OPT_RW_SORT_EXP");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_FUN_DUAL_PROP = new SWIG_BitwuzlaOption("BITWUZLA_OPT_FUN_DUAL_PROP");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_FUN_DUAL_PROP_QSORT = new SWIG_BitwuzlaOption("BITWUZLA_OPT_FUN_DUAL_PROP_QSORT");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_FUN_EAGER_LEMMAS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_FUN_EAGER_LEMMAS");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_FUN_LAZY_SYNTHESIZE = new SWIG_BitwuzlaOption("BITWUZLA_OPT_FUN_LAZY_SYNTHESIZE");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_FUN_JUST = new SWIG_BitwuzlaOption("BITWUZLA_OPT_FUN_JUST");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_FUN_JUST_HEURISTIC = new SWIG_BitwuzlaOption("BITWUZLA_OPT_FUN_JUST_HEURISTIC");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_FUN_PREPROP = new SWIG_BitwuzlaOption("BITWUZLA_OPT_FUN_PREPROP");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_FUN_PRESLS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_FUN_PRESLS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_FUN_STORE_LAMBDAS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_FUN_STORE_LAMBDAS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_SLS_JUST = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_JUST");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_SLS_MOVE_GW = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_MOVE_GW");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_SLS_MOVE_INC_MOVE_TEST = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_MOVE_INC_MOVE_TEST");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_SLS_MOVE_PROP = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_MOVE_PROP");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_SLS_MOVE_PROP_FORCE_RW = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_MOVE_PROP_FORCE_RW");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_SLS_MOVE_PROP_NPROPS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_MOVE_PROP_NPROPS");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_SLS_MOVE_PROP_NSLSS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_MOVE_PROP_NSLSS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_SLS_MOVE_RAND_ALL = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_MOVE_RAND_ALL");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_SLS_MOVE_RAND_RANGE = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_MOVE_RAND_RANGE");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_SLS_MOVE_RAND_WALK = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_MOVE_RAND_WALK");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_SLS_MOVE_RANGE = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_MOVE_RANGE");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_SLS_MOVE_SEGMENT = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_MOVE_SEGMENT");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_SLS_PROB_MOVE_RAND_WALK = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_PROB_MOVE_RAND_WALK");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_SLS_NFLIPS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_NFLIPS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_SLS_STRATEGY = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_STRATEGY");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_SLS_USE_RESTARTS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_USE_RESTARTS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_SLS_USE_BANDIT = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SLS_USE_BANDIT");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PROP_ASHR = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_ASHR");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PROP_CONST_BITS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_CONST_BITS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PROP_CONST_DOMAINS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_CONST_DOMAINS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PROP_ENTAILED = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_ENTAILED");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PROP_FLIP_COND_CONST_DELTA = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_FLIP_COND_CONST_DELTA");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PROP_FLIP_COND_CONST_NPATHSEL = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_FLIP_COND_CONST_NPATHSEL");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PROP_INFER_INEQ_BOUNDS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_INFER_INEQ_BOUNDS");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PROP_NO_MOVE_ON_CONFLICT = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_NO_MOVE_ON_CONFLICT");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PROP_NPROPS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_NPROPS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PROP_NUPDATES = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_NUPDATES");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PROP_PATH_SEL = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_PATH_SEL");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PROP_PROB_FALLBACK_RANDOM_VALUE = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_PROB_FALLBACK_RANDOM_VALUE");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PROP_PROB_AND_FLIP = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_PROB_AND_FLIP");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PROP_PROB_EQ_FLIP = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_PROB_EQ_FLIP");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PROP_PROB_FLIP_COND = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_PROB_FLIP_COND");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PROP_PROB_FLIP_COND_CONST = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_PROB_FLIP_COND_CONST");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PROP_PROB_RANDOM_INPUT = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_PROB_RANDOM_INPUT");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PROP_PROB_SLICE_FLIP = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_PROB_SLICE_FLIP");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PROP_PROB_SLICE_KEEP_DC = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_PROB_SLICE_KEEP_DC");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PROP_PROB_USE_INV_VALUE = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_PROB_USE_INV_VALUE");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PROP_USE_BANDIT = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_USE_BANDIT");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PROP_USE_INV_LT_CONCAT = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_USE_INV_LT_CONCAT");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PROP_USE_RESTARTS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_USE_RESTARTS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PROP_SEXT = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_SEXT");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_PROP_SKIP_NO_PROGRESS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_SKIP_NO_PROGRESS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PROP_XOR = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PROP_XOR");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_AIGPROP_NPROPS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_AIGPROP_NPROPS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_AIGPROP_USE_BANDIT = new SWIG_BitwuzlaOption("BITWUZLA_OPT_AIGPROP_USE_BANDIT");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_AIGPROP_USE_RESTARTS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_AIGPROP_USE_RESTARTS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_QUANT_SYNTH_SK = new SWIG_BitwuzlaOption("BITWUZLA_OPT_QUANT_SYNTH_SK");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_QUANT_SYNTH_QI = new SWIG_BitwuzlaOption("BITWUZLA_OPT_QUANT_SYNTH_QI");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_QUANT_SKOLEM_UF = new SWIG_BitwuzlaOption("BITWUZLA_OPT_QUANT_SKOLEM_UF");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_QUANT_EAGER_SKOLEM = new SWIG_BitwuzlaOption("BITWUZLA_OPT_QUANT_EAGER_SKOLEM");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_QUANT_MBQI = new SWIG_BitwuzlaOption("BITWUZLA_OPT_QUANT_MBQI");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_QUANT_MODE = new SWIG_BitwuzlaOption("BITWUZLA_OPT_QUANT_MODE");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_CHECK_MODEL = new SWIG_BitwuzlaOption("BITWUZLA_OPT_CHECK_MODEL");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_CHECK_UNCONSTRAINED = new SWIG_BitwuzlaOption("BITWUZLA_OPT_CHECK_UNCONSTRAINED");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_CHECK_UNSAT_ASSUMPTIONS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_CHECK_UNSAT_ASSUMPTIONS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_DECLSORT_BV_WIDTH = new SWIG_BitwuzlaOption("BITWUZLA_OPT_DECLSORT_BV_WIDTH");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_LS_SHARE_SAT = new SWIG_BitwuzlaOption("BITWUZLA_OPT_LS_SHARE_SAT");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_PARSE_INTERACTIVE = new SWIG_BitwuzlaOption("BITWUZLA_OPT_PARSE_INTERACTIVE");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_SAT_ENGINE_CADICAL_FREEZE = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SAT_ENGINE_CADICAL_FREEZE");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_SAT_ENGINE_LGL_FORK = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SAT_ENGINE_LGL_FORK");
  public final static SWIG_BitwuzlaOption
      BITWUZLA_OPT_SAT_ENGINE_N_THREADS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SAT_ENGINE_N_THREADS");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_SMT_COMP_MODE = new SWIG_BitwuzlaOption("BITWUZLA_OPT_SMT_COMP_MODE");
  public final static SWIG_BitwuzlaOption BITWUZLA_OPT_NUM_OPTS = new SWIG_BitwuzlaOption("BITWUZLA_OPT_NUM_OPTS");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static SWIG_BitwuzlaOption swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + SWIG_BitwuzlaOption.class + " with value " + swigValue);
  }

  private SWIG_BitwuzlaOption(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private SWIG_BitwuzlaOption(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private SWIG_BitwuzlaOption(String swigName, SWIG_BitwuzlaOption swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static final SWIG_BitwuzlaOption[] swigValues = { BITWUZLA_OPT_ENGINE, BITWUZLA_OPT_EXIT_CODES, BITWUZLA_OPT_INPUT_FORMAT, BITWUZLA_OPT_INCREMENTAL, BITWUZLA_OPT_LOGLEVEL, BITWUZLA_OPT_OUTPUT_FORMAT, BITWUZLA_OPT_OUTPUT_NUMBER_FORMAT, BITWUZLA_OPT_PRETTY_PRINT, BITWUZLA_OPT_PRINT_DIMACS, BITWUZLA_OPT_PRODUCE_MODELS, BITWUZLA_OPT_PRODUCE_UNSAT_CORES, BITWUZLA_OPT_SAT_ENGINE, BITWUZLA_OPT_SEED, BITWUZLA_OPT_VERBOSITY, BITWUZLA_OPT_PP_ACKERMANN, BITWUZLA_OPT_PP_BETA_REDUCE, BITWUZLA_OPT_PP_ELIMINATE_EXTRACTS, BITWUZLA_OPT_PP_ELIMINATE_ITES, BITWUZLA_OPT_PP_EXTRACT_LAMBDAS, BITWUZLA_OPT_PP_MERGE_LAMBDAS, BITWUZLA_OPT_PP_NONDESTR_SUBST, BITWUZLA_OPT_PP_NORMALIZE_ADD, BITWUZLA_OPT_PP_SKELETON_PREPROC, BITWUZLA_OPT_PP_UNCONSTRAINED_OPTIMIZATION, BITWUZLA_OPT_PP_VAR_SUBST, BITWUZLA_OPT_RW_EXTRACT_ARITH, BITWUZLA_OPT_RW_LEVEL, BITWUZLA_OPT_RW_NORMALIZE, BITWUZLA_OPT_RW_NORMALIZE_ADD, BITWUZLA_OPT_RW_SIMPLIFY_CONSTRAINTS, BITWUZLA_OPT_RW_SLT, BITWUZLA_OPT_RW_SORT_AIG, BITWUZLA_OPT_RW_SORT_AIGVEC, BITWUZLA_OPT_RW_SORT_EXP, BITWUZLA_OPT_FUN_DUAL_PROP, BITWUZLA_OPT_FUN_DUAL_PROP_QSORT, BITWUZLA_OPT_FUN_EAGER_LEMMAS, BITWUZLA_OPT_FUN_LAZY_SYNTHESIZE, BITWUZLA_OPT_FUN_JUST, BITWUZLA_OPT_FUN_JUST_HEURISTIC, BITWUZLA_OPT_FUN_PREPROP, BITWUZLA_OPT_FUN_PRESLS, BITWUZLA_OPT_FUN_STORE_LAMBDAS, BITWUZLA_OPT_SLS_JUST, BITWUZLA_OPT_SLS_MOVE_GW, BITWUZLA_OPT_SLS_MOVE_INC_MOVE_TEST, BITWUZLA_OPT_SLS_MOVE_PROP, BITWUZLA_OPT_SLS_MOVE_PROP_FORCE_RW, BITWUZLA_OPT_SLS_MOVE_PROP_NPROPS, BITWUZLA_OPT_SLS_MOVE_PROP_NSLSS, BITWUZLA_OPT_SLS_MOVE_RAND_ALL, BITWUZLA_OPT_SLS_MOVE_RAND_RANGE, BITWUZLA_OPT_SLS_MOVE_RAND_WALK, BITWUZLA_OPT_SLS_MOVE_RANGE, BITWUZLA_OPT_SLS_MOVE_SEGMENT, BITWUZLA_OPT_SLS_PROB_MOVE_RAND_WALK, BITWUZLA_OPT_SLS_NFLIPS, BITWUZLA_OPT_SLS_STRATEGY, BITWUZLA_OPT_SLS_USE_RESTARTS, BITWUZLA_OPT_SLS_USE_BANDIT, BITWUZLA_OPT_PROP_ASHR, BITWUZLA_OPT_PROP_CONST_BITS, BITWUZLA_OPT_PROP_CONST_DOMAINS, BITWUZLA_OPT_PROP_ENTAILED, BITWUZLA_OPT_PROP_FLIP_COND_CONST_DELTA, BITWUZLA_OPT_PROP_FLIP_COND_CONST_NPATHSEL, BITWUZLA_OPT_PROP_INFER_INEQ_BOUNDS, BITWUZLA_OPT_PROP_NO_MOVE_ON_CONFLICT, BITWUZLA_OPT_PROP_NPROPS, BITWUZLA_OPT_PROP_NUPDATES, BITWUZLA_OPT_PROP_PATH_SEL, BITWUZLA_OPT_PROP_PROB_FALLBACK_RANDOM_VALUE, BITWUZLA_OPT_PROP_PROB_AND_FLIP, BITWUZLA_OPT_PROP_PROB_EQ_FLIP, BITWUZLA_OPT_PROP_PROB_FLIP_COND, BITWUZLA_OPT_PROP_PROB_FLIP_COND_CONST, BITWUZLA_OPT_PROP_PROB_RANDOM_INPUT, BITWUZLA_OPT_PROP_PROB_SLICE_FLIP, BITWUZLA_OPT_PROP_PROB_SLICE_KEEP_DC, BITWUZLA_OPT_PROP_PROB_USE_INV_VALUE, BITWUZLA_OPT_PROP_USE_BANDIT, BITWUZLA_OPT_PROP_USE_INV_LT_CONCAT, BITWUZLA_OPT_PROP_USE_RESTARTS, BITWUZLA_OPT_PROP_SEXT, BITWUZLA_OPT_PROP_SKIP_NO_PROGRESS, BITWUZLA_OPT_PROP_XOR, BITWUZLA_OPT_AIGPROP_NPROPS, BITWUZLA_OPT_AIGPROP_USE_BANDIT, BITWUZLA_OPT_AIGPROP_USE_RESTARTS, BITWUZLA_OPT_QUANT_SYNTH_SK, BITWUZLA_OPT_QUANT_SYNTH_QI, BITWUZLA_OPT_QUANT_SKOLEM_UF, BITWUZLA_OPT_QUANT_EAGER_SKOLEM, BITWUZLA_OPT_QUANT_MBQI, BITWUZLA_OPT_QUANT_MODE, BITWUZLA_OPT_CHECK_MODEL, BITWUZLA_OPT_CHECK_UNCONSTRAINED, BITWUZLA_OPT_CHECK_UNSAT_ASSUMPTIONS, BITWUZLA_OPT_DECLSORT_BV_WIDTH, BITWUZLA_OPT_LS_SHARE_SAT, BITWUZLA_OPT_PARSE_INTERACTIVE, BITWUZLA_OPT_SAT_ENGINE_CADICAL_FREEZE, BITWUZLA_OPT_SAT_ENGINE_LGL_FORK, BITWUZLA_OPT_SAT_ENGINE_N_THREADS, BITWUZLA_OPT_SMT_COMP_MODE, BITWUZLA_OPT_NUM_OPTS };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

