/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sosy_lab.java_smt.solvers.bitwuzla;

public final class BitwuzlaKind {
  public final static BitwuzlaKind BITWUZLA_KIND_CONSTANT = new BitwuzlaKind("BITWUZLA_KIND_CONSTANT", bitwuzlaJNI.BITWUZLA_KIND_CONSTANT_get());
  public final static BitwuzlaKind BITWUZLA_KIND_CONST_ARRAY = new BitwuzlaKind("BITWUZLA_KIND_CONST_ARRAY");
  public final static BitwuzlaKind BITWUZLA_KIND_VALUE = new BitwuzlaKind("BITWUZLA_KIND_VALUE");
  public final static BitwuzlaKind BITWUZLA_KIND_VARIABLE = new BitwuzlaKind("BITWUZLA_KIND_VARIABLE");
  public final static BitwuzlaKind BITWUZLA_KIND_AND = new BitwuzlaKind("BITWUZLA_KIND_AND");
  public final static BitwuzlaKind BITWUZLA_KIND_DISTINCT = new BitwuzlaKind("BITWUZLA_KIND_DISTINCT");
  public final static BitwuzlaKind BITWUZLA_KIND_EQUAL = new BitwuzlaKind("BITWUZLA_KIND_EQUAL");
  public final static BitwuzlaKind BITWUZLA_KIND_IFF = new BitwuzlaKind("BITWUZLA_KIND_IFF");
  public final static BitwuzlaKind BITWUZLA_KIND_IMPLIES = new BitwuzlaKind("BITWUZLA_KIND_IMPLIES");
  public final static BitwuzlaKind BITWUZLA_KIND_NOT = new BitwuzlaKind("BITWUZLA_KIND_NOT");
  public final static BitwuzlaKind BITWUZLA_KIND_OR = new BitwuzlaKind("BITWUZLA_KIND_OR");
  public final static BitwuzlaKind BITWUZLA_KIND_XOR = new BitwuzlaKind("BITWUZLA_KIND_XOR");
  public final static BitwuzlaKind BITWUZLA_KIND_ITE = new BitwuzlaKind("BITWUZLA_KIND_ITE");
  public final static BitwuzlaKind BITWUZLA_KIND_EXISTS = new BitwuzlaKind("BITWUZLA_KIND_EXISTS");
  public final static BitwuzlaKind BITWUZLA_KIND_FORALL = new BitwuzlaKind("BITWUZLA_KIND_FORALL");
  public final static BitwuzlaKind BITWUZLA_KIND_APPLY = new BitwuzlaKind("BITWUZLA_KIND_APPLY");
  public final static BitwuzlaKind BITWUZLA_KIND_LAMBDA = new BitwuzlaKind("BITWUZLA_KIND_LAMBDA");
  public final static BitwuzlaKind BITWUZLA_KIND_ARRAY_SELECT = new BitwuzlaKind("BITWUZLA_KIND_ARRAY_SELECT");
  public final static BitwuzlaKind BITWUZLA_KIND_ARRAY_STORE = new BitwuzlaKind("BITWUZLA_KIND_ARRAY_STORE");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_ADD = new BitwuzlaKind("BITWUZLA_KIND_BV_ADD");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_AND = new BitwuzlaKind("BITWUZLA_KIND_BV_AND");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_ASHR = new BitwuzlaKind("BITWUZLA_KIND_BV_ASHR");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_COMP = new BitwuzlaKind("BITWUZLA_KIND_BV_COMP");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_CONCAT = new BitwuzlaKind("BITWUZLA_KIND_BV_CONCAT");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_DEC = new BitwuzlaKind("BITWUZLA_KIND_BV_DEC");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_INC = new BitwuzlaKind("BITWUZLA_KIND_BV_INC");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_MUL = new BitwuzlaKind("BITWUZLA_KIND_BV_MUL");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_NAND = new BitwuzlaKind("BITWUZLA_KIND_BV_NAND");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_NEG = new BitwuzlaKind("BITWUZLA_KIND_BV_NEG");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_NOR = new BitwuzlaKind("BITWUZLA_KIND_BV_NOR");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_NOT = new BitwuzlaKind("BITWUZLA_KIND_BV_NOT");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_OR = new BitwuzlaKind("BITWUZLA_KIND_BV_OR");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_REDAND = new BitwuzlaKind("BITWUZLA_KIND_BV_REDAND");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_REDOR = new BitwuzlaKind("BITWUZLA_KIND_BV_REDOR");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_REDXOR = new BitwuzlaKind("BITWUZLA_KIND_BV_REDXOR");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_ROL = new BitwuzlaKind("BITWUZLA_KIND_BV_ROL");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_ROR = new BitwuzlaKind("BITWUZLA_KIND_BV_ROR");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_SADD_OVERFLOW = new BitwuzlaKind("BITWUZLA_KIND_BV_SADD_OVERFLOW");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_SDIV_OVERFLOW = new BitwuzlaKind("BITWUZLA_KIND_BV_SDIV_OVERFLOW");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_SDIV = new BitwuzlaKind("BITWUZLA_KIND_BV_SDIV");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_SGE = new BitwuzlaKind("BITWUZLA_KIND_BV_SGE");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_SGT = new BitwuzlaKind("BITWUZLA_KIND_BV_SGT");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_SHL = new BitwuzlaKind("BITWUZLA_KIND_BV_SHL");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_SHR = new BitwuzlaKind("BITWUZLA_KIND_BV_SHR");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_SLE = new BitwuzlaKind("BITWUZLA_KIND_BV_SLE");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_SLT = new BitwuzlaKind("BITWUZLA_KIND_BV_SLT");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_SMOD = new BitwuzlaKind("BITWUZLA_KIND_BV_SMOD");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_SMUL_OVERFLOW = new BitwuzlaKind("BITWUZLA_KIND_BV_SMUL_OVERFLOW");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_SREM = new BitwuzlaKind("BITWUZLA_KIND_BV_SREM");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_SSUB_OVERFLOW = new BitwuzlaKind("BITWUZLA_KIND_BV_SSUB_OVERFLOW");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_SUB = new BitwuzlaKind("BITWUZLA_KIND_BV_SUB");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_UADD_OVERFLOW = new BitwuzlaKind("BITWUZLA_KIND_BV_UADD_OVERFLOW");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_UDIV = new BitwuzlaKind("BITWUZLA_KIND_BV_UDIV");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_UGE = new BitwuzlaKind("BITWUZLA_KIND_BV_UGE");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_UGT = new BitwuzlaKind("BITWUZLA_KIND_BV_UGT");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_ULE = new BitwuzlaKind("BITWUZLA_KIND_BV_ULE");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_ULT = new BitwuzlaKind("BITWUZLA_KIND_BV_ULT");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_UMUL_OVERFLOW = new BitwuzlaKind("BITWUZLA_KIND_BV_UMUL_OVERFLOW");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_UREM = new BitwuzlaKind("BITWUZLA_KIND_BV_UREM");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_USUB_OVERFLOW = new BitwuzlaKind("BITWUZLA_KIND_BV_USUB_OVERFLOW");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_XNOR = new BitwuzlaKind("BITWUZLA_KIND_BV_XNOR");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_XOR = new BitwuzlaKind("BITWUZLA_KIND_BV_XOR");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_EXTRACT = new BitwuzlaKind("BITWUZLA_KIND_BV_EXTRACT");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_REPEAT = new BitwuzlaKind("BITWUZLA_KIND_BV_REPEAT");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_ROLI = new BitwuzlaKind("BITWUZLA_KIND_BV_ROLI");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_RORI = new BitwuzlaKind("BITWUZLA_KIND_BV_RORI");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_SIGN_EXTEND = new BitwuzlaKind("BITWUZLA_KIND_BV_SIGN_EXTEND");
  public final static BitwuzlaKind BITWUZLA_KIND_BV_ZERO_EXTEND = new BitwuzlaKind("BITWUZLA_KIND_BV_ZERO_EXTEND");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_ABS = new BitwuzlaKind("BITWUZLA_KIND_FP_ABS");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_ADD = new BitwuzlaKind("BITWUZLA_KIND_FP_ADD");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_DIV = new BitwuzlaKind("BITWUZLA_KIND_FP_DIV");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_EQUAL = new BitwuzlaKind("BITWUZLA_KIND_FP_EQUAL");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_FMA = new BitwuzlaKind("BITWUZLA_KIND_FP_FMA");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_FP = new BitwuzlaKind("BITWUZLA_KIND_FP_FP");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_GEQ = new BitwuzlaKind("BITWUZLA_KIND_FP_GEQ");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_GT = new BitwuzlaKind("BITWUZLA_KIND_FP_GT");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_IS_INF = new BitwuzlaKind("BITWUZLA_KIND_FP_IS_INF");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_IS_NAN = new BitwuzlaKind("BITWUZLA_KIND_FP_IS_NAN");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_IS_NEG = new BitwuzlaKind("BITWUZLA_KIND_FP_IS_NEG");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_IS_NORMAL = new BitwuzlaKind("BITWUZLA_KIND_FP_IS_NORMAL");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_IS_POS = new BitwuzlaKind("BITWUZLA_KIND_FP_IS_POS");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_IS_SUBNORMAL = new BitwuzlaKind("BITWUZLA_KIND_FP_IS_SUBNORMAL");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_IS_ZERO = new BitwuzlaKind("BITWUZLA_KIND_FP_IS_ZERO");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_LEQ = new BitwuzlaKind("BITWUZLA_KIND_FP_LEQ");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_LT = new BitwuzlaKind("BITWUZLA_KIND_FP_LT");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_MAX = new BitwuzlaKind("BITWUZLA_KIND_FP_MAX");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_MIN = new BitwuzlaKind("BITWUZLA_KIND_FP_MIN");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_MUL = new BitwuzlaKind("BITWUZLA_KIND_FP_MUL");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_NEG = new BitwuzlaKind("BITWUZLA_KIND_FP_NEG");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_REM = new BitwuzlaKind("BITWUZLA_KIND_FP_REM");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_RTI = new BitwuzlaKind("BITWUZLA_KIND_FP_RTI");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_SQRT = new BitwuzlaKind("BITWUZLA_KIND_FP_SQRT");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_SUB = new BitwuzlaKind("BITWUZLA_KIND_FP_SUB");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_TO_FP_FROM_BV = new BitwuzlaKind("BITWUZLA_KIND_FP_TO_FP_FROM_BV");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_TO_FP_FROM_FP = new BitwuzlaKind("BITWUZLA_KIND_FP_TO_FP_FROM_FP");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_TO_FP_FROM_SBV = new BitwuzlaKind("BITWUZLA_KIND_FP_TO_FP_FROM_SBV");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_TO_FP_FROM_UBV = new BitwuzlaKind("BITWUZLA_KIND_FP_TO_FP_FROM_UBV");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_TO_SBV = new BitwuzlaKind("BITWUZLA_KIND_FP_TO_SBV");
  public final static BitwuzlaKind BITWUZLA_KIND_FP_TO_UBV = new BitwuzlaKind("BITWUZLA_KIND_FP_TO_UBV");
  public final static BitwuzlaKind BITWUZLA_KIND_NUM_KINDS = new BitwuzlaKind("BITWUZLA_KIND_NUM_KINDS");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static BitwuzlaKind swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + BitwuzlaKind.class + " with value " + swigValue);
  }

  private BitwuzlaKind(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private BitwuzlaKind(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private BitwuzlaKind(String swigName, BitwuzlaKind swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static BitwuzlaKind[] swigValues = { BITWUZLA_KIND_CONSTANT, BITWUZLA_KIND_CONST_ARRAY, BITWUZLA_KIND_VALUE, BITWUZLA_KIND_VARIABLE, BITWUZLA_KIND_AND, BITWUZLA_KIND_DISTINCT, BITWUZLA_KIND_EQUAL, BITWUZLA_KIND_IFF, BITWUZLA_KIND_IMPLIES, BITWUZLA_KIND_NOT, BITWUZLA_KIND_OR, BITWUZLA_KIND_XOR, BITWUZLA_KIND_ITE, BITWUZLA_KIND_EXISTS, BITWUZLA_KIND_FORALL, BITWUZLA_KIND_APPLY, BITWUZLA_KIND_LAMBDA, BITWUZLA_KIND_ARRAY_SELECT, BITWUZLA_KIND_ARRAY_STORE, BITWUZLA_KIND_BV_ADD, BITWUZLA_KIND_BV_AND, BITWUZLA_KIND_BV_ASHR, BITWUZLA_KIND_BV_COMP, BITWUZLA_KIND_BV_CONCAT, BITWUZLA_KIND_BV_DEC, BITWUZLA_KIND_BV_INC, BITWUZLA_KIND_BV_MUL, BITWUZLA_KIND_BV_NAND, BITWUZLA_KIND_BV_NEG, BITWUZLA_KIND_BV_NOR, BITWUZLA_KIND_BV_NOT, BITWUZLA_KIND_BV_OR, BITWUZLA_KIND_BV_REDAND, BITWUZLA_KIND_BV_REDOR, BITWUZLA_KIND_BV_REDXOR, BITWUZLA_KIND_BV_ROL, BITWUZLA_KIND_BV_ROR, BITWUZLA_KIND_BV_SADD_OVERFLOW, BITWUZLA_KIND_BV_SDIV_OVERFLOW, BITWUZLA_KIND_BV_SDIV, BITWUZLA_KIND_BV_SGE, BITWUZLA_KIND_BV_SGT, BITWUZLA_KIND_BV_SHL, BITWUZLA_KIND_BV_SHR, BITWUZLA_KIND_BV_SLE, BITWUZLA_KIND_BV_SLT, BITWUZLA_KIND_BV_SMOD, BITWUZLA_KIND_BV_SMUL_OVERFLOW, BITWUZLA_KIND_BV_SREM, BITWUZLA_KIND_BV_SSUB_OVERFLOW, BITWUZLA_KIND_BV_SUB, BITWUZLA_KIND_BV_UADD_OVERFLOW, BITWUZLA_KIND_BV_UDIV, BITWUZLA_KIND_BV_UGE, BITWUZLA_KIND_BV_UGT, BITWUZLA_KIND_BV_ULE, BITWUZLA_KIND_BV_ULT, BITWUZLA_KIND_BV_UMUL_OVERFLOW, BITWUZLA_KIND_BV_UREM, BITWUZLA_KIND_BV_USUB_OVERFLOW, BITWUZLA_KIND_BV_XNOR, BITWUZLA_KIND_BV_XOR, BITWUZLA_KIND_BV_EXTRACT, BITWUZLA_KIND_BV_REPEAT, BITWUZLA_KIND_BV_ROLI, BITWUZLA_KIND_BV_RORI, BITWUZLA_KIND_BV_SIGN_EXTEND, BITWUZLA_KIND_BV_ZERO_EXTEND, BITWUZLA_KIND_FP_ABS, BITWUZLA_KIND_FP_ADD, BITWUZLA_KIND_FP_DIV, BITWUZLA_KIND_FP_EQUAL, BITWUZLA_KIND_FP_FMA, BITWUZLA_KIND_FP_FP, BITWUZLA_KIND_FP_GEQ, BITWUZLA_KIND_FP_GT, BITWUZLA_KIND_FP_IS_INF, BITWUZLA_KIND_FP_IS_NAN, BITWUZLA_KIND_FP_IS_NEG, BITWUZLA_KIND_FP_IS_NORMAL, BITWUZLA_KIND_FP_IS_POS, BITWUZLA_KIND_FP_IS_SUBNORMAL, BITWUZLA_KIND_FP_IS_ZERO, BITWUZLA_KIND_FP_LEQ, BITWUZLA_KIND_FP_LT, BITWUZLA_KIND_FP_MAX, BITWUZLA_KIND_FP_MIN, BITWUZLA_KIND_FP_MUL, BITWUZLA_KIND_FP_NEG, BITWUZLA_KIND_FP_REM, BITWUZLA_KIND_FP_RTI, BITWUZLA_KIND_FP_SQRT, BITWUZLA_KIND_FP_SUB, BITWUZLA_KIND_FP_TO_FP_FROM_BV, BITWUZLA_KIND_FP_TO_FP_FROM_FP, BITWUZLA_KIND_FP_TO_FP_FROM_SBV, BITWUZLA_KIND_FP_TO_FP_FROM_UBV, BITWUZLA_KIND_FP_TO_SBV, BITWUZLA_KIND_FP_TO_UBV, BITWUZLA_KIND_NUM_KINDS };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

