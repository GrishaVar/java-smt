<?xml version="1.0" encoding="UTF-8" ?>

<!--
This file is part of JavaSMT,
an API wrapper for a collection of SMT solvers:
https://github.com/sosy-lab/java-smt

SPDX-FileCopyrightText: 2024 Dirk Beyer <https://www.sosy-lab.org>

SPDX-License-Identifier: Apache-2.0
-->

<!-- vim: set tabstop=8 shiftwidth=4 expandtab sts=4 filetype=ant fdm=marker: -->
<project name="publish-solvers-bitwuzla" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <import file="macros.xml"/>

    <!-- This file is split into four parts:
    * Target build-bitwuzla checks that all required options were used on the command line.
      We need the paths to gmp and the Bitwuzla source, along with an option that specified which
      version tag to use with the compiled binaries. In addition, we require the user to specify
      whether the JNI bindings should be recreated or not. This step is necessary if the API of
      Bitwuzla has changed since the last release, but it requires SWIG to be installed on the
      local machine.
    * After that build-wrapper is run if -Dbitwuzla.rebuildWrapper was set to "true".
      In this build step we execute SWIG to automatically generate Java bindings for Bitwuzla from
      our SWIG interface script. The bindings are then patched to handle some phantom reference
      issues, and to add copyright headers to all generated files.
    * If the option -Dbitwuzla.rebuildWrapper was set to "false" instead, the target skip-wrapper
      is run and simply outputs a warning message about having to rebuild the bindings after API
      changes.
    * Either way the next step is package-bitwuzla, which continues the build by compiling the
      autogenerated code and then patching the dependencies in the final library files with
      patchelf.

    After all these steps are executed target publish-bitwuzla is used to copy the files to the
    repository.
    -->

    <target name="check-properties-for-bitwuzla">
        <fail unless="bitwuzla.path">
            Please specify the path to Bitwuzla with the flag -Dbitwuzla.path=/path/to/bitwuzla.
            The path has to point to the root Bitwuzla folder, i.e.,
            a checkout of the official git repository from 'https://github.com/bitwuzla/bitwuzla'.
        </fail>
        <fail unless="bitwuzla.customRev">
            Please specify a custom revision with the flag -Dbitwuzla.customRev=XXX.
            The custom revision should be a version number of Bitwuzla.
            The script will append the git revision.
        </fail>
        <fail unless="bitwuzla.rebuildWrapper">
            Please specify if the Bitwuzla wrapper should be rebuild with the flag
            -Dbitwuzla.rebuildWrapper=BOOL. Rebuilding the wrapper is necessary if the Bitwuzla API
            has changed since the last release, but requires the SWIG tool to be installed on
            this machine.
        </fail>
    </target>

    <target name="build-bitwuzla" depends="check-properties-for-bitwuzla">
        <!-- get a naive version -->
        <exec executable="git" dir="${bitwuzla.path}" outputproperty="bitwuzla.revision"
              failonerror="true">
            <arg value="show"/>
            <arg value="-s"/>
            <arg value="--format=%h"/>
        </exec>

        <!-- set properties for the next steps -->
        <property name="bitwuzla.version" value="${bitwuzla.customRev}-g${bitwuzla.revision}"/>
        <property name="bitwuzla.installPath" location="${bitwuzla.path}/install"/>
        <property name="source.path" location="lib/native/source/libbitwuzla"/>
        <property name="source.installPath" location="lib/native/source/libbitwuzla/install"/>

        <echo message="Building Bitwuzla in version '${bitwuzla.version}'"/>

        <!-- configure and build Bitwuzla -->
        <exec executable="./configure.py" dir="${bitwuzla.path}" failonerror="true">
            <arg value="--static"/>
            <arg value="--wipe"/>
            <arg value="--prefix"/>
            <arg value="${bitwuzla.installPath}"/>
        </exec>
        <exec executable="meson" dir="${bitwuzla.path}/build/" failonerror="true">
            <arg value="compile"/>
        </exec>
        <exec executable="meson" dir="${bitwuzla.path}/build/" failonerror="true">
            <arg value="install"/>
        </exec>

        <!-- copy Bitwuzla include files to JavaSMT -->
        <delete dir="${source.installPath}" quiet="true"/>
        <copy todir="${source.installPath}">
            <fileset dir="${bitwuzla.installPath}"/>
        </copy>
    </target>

    <!-- Run swig to generate a new wrapper. Only executed if rebuildWrapper was specified. -->
    <!-- Depends on build-bitwuzla for generating the API files. -->
    <target name="build-wrapper" if="${bitwuzla.rebuildWrapper}" depends="build-bitwuzla">
        <!-- create output directory for the swig proxies -->
        <delete dir="${source.path}/src" quiet="true"/>
        <mkdir dir="${source.path}/src/org/sosy_lab/java_smt/solvers/bitwuzla/api"/>

        <!-- run swig to generate java files and the c wrapper -->
        <exec executable="swig" dir="${source.path}" failonerror="true">
            <arg value="-java"/>
            <arg value="-c++"/>
            <arg value="-Iinstall"/>
            <arg value="-package"/>
            <arg value="org.sosy_lab.java_smt.solvers.bitwuzla.api"/>
            <arg value="-outdir"/>
            <arg value="src/org/sosy_lab/java_smt/solvers/bitwuzla/api"/>
            <arg value="-o"/>
            <arg value="bitwuzla_wrap.cpp"/>
            <arg value="bitwuzla.i"/>
        </exec>

        <!-- apply patch for the phantom reference issue -->
        <!-- FIXME: This will lead to memory leaks. We should look for a proper fix. -->
        <!-- Update: the TermManger introduced in 0.4.0 handles memory of Terms/Sorts 
             now and should clean up everything when we destroy it. -->
        <exec executable="patch" failonerror="true">
            <arg value="-p0"/>
            <arg value="--no-backup-if-mismatch"/>
            <arg value="-i"/>
            <arg value="lib/native/source/libbitwuzla/swigWrapper.patch"/>
        </exec>
    </target>

    <!-- Skip rebuilding the swig header if rebuildWrapper was not specified -->
    <target name="skip-wrapper" unless="${bitwuzla.rebuildWrapper}" depends="build-bitwuzla">
        <echo>WARNING: Skipping the build step for the SWIG wrapper.
        If the Bitwuzla API has changed since the last release, the wrapper should be updated.
        Use option -Dbitwuzla.rebuildWrapper to run SWIG and automatically generate a new wrapper.</echo>
    </target>

    <target name="package-bitwuzla" depends="build-bitwuzla, build-wrapper, skip-wrapper">
        <!-- compile java proxies and create jar file -->
        <delete dir="${source.path}/build"/>
        <mkdir dir="${source.path}/build"/>
        <javac release="11" srcdir="${source.path}/src/" destdir="${source.path}/build" includeantruntime="false" failonerror="true">
            <include name="org/sosy_lab/java_smt/solvers/bitwuzla/api/*.java"/>
        </javac>
        <jar destfile="bitwuzla-${bitwuzla.version}.jar" basedir="${source.path}/build"/>

        <!-- generate and package javadoc documentation -->
        <delete dir="${source.path}/doc"/>
        <mkdir dir="${source.path}/doc"/>
        <javadoc sourcepath="${source.path}/src" destdir="${source.path}/doc"/>
        <jar destfile="bitwuzla-${bitwuzla.version}-javadoc.jar" basedir="${source.path}/doc"/>

        <!-- package swig generated source code -->
        <jar destfile="bitwuzla-${bitwuzla.version}-sources.jar" basedir="${source.path}/src"/>

        <!-- compile the swig wrapper -->
        <exec executable="g++" dir="${source.path}" failonerror="true">
            <arg value="-fPIC"/>
            <arg value="-c"/>
            <arg value="bitwuzla_wrap.cpp"/>
            <arg value="-I${source.path}/include"/>
            <arg value="-I${bitwuzla.installPath}/include"/>
            <arg value="-I${java.home}/include"/>
            <arg value="-I${java.home}/include/linux"/>
        </exec>

        <!-- link the wrapper to create libbitwuzlaJNI.so -->
        <exec executable="g++" dir="${source.path}" failonerror="true">
            <arg value="-shared"/>
            <arg value="-o"/>
            <arg value="libbitwuzlaj.so"/>
            <arg value="bitwuzla_wrap.o"/>
            <arg value="-Wl,--whole-archive"/>
            <arg value="${bitwuzla.installPath}/lib/x86_64-linux-gnu/libbitwuzla.a"/>
            <arg value="${bitwuzla.installPath}/lib/x86_64-linux-gnu/libbitwuzlabb.a"/>
            <arg value="${bitwuzla.installPath}/lib/x86_64-linux-gnu/libbitwuzlabv.a"/>
            <arg value="${bitwuzla.installPath}/lib/x86_64-linux-gnu/libbitwuzlals.a"/>
            <arg value="${bitwuzla.installPath}/lib/x86_64-linux-gnu/libgmp.a"/>
            <arg value="${bitwuzla.installPath}/lib/x86_64-linux-gnu/libgmpxx.a"/>
            <arg value="-Wl,--no-whole-archive,--allow-multiple-definition"/>
            <arg value="-Wl,-z,defs"/>
        </exec>

        <!-- copy library files into directory to be published for Ivy -->
        <move file="${source.path}/libbitwuzlaj.so" tofile="libbitwuzlaj-${bitwuzla.version}.so" failonerror="true"/>
    </target>

    <target name="publish-bitwuzla" depends="package-bitwuzla, load-ivy"
            description="Publish Bitwuzla binaries to Ivy repository.">
        <ivy:resolve conf="solver-bitwuzla" file="solvers_ivy_conf/ivy_bitwuzla.xml"/>
        <publishToRepository solverName="Bitwuzla" solverVersion="${bitwuzla.version}"/>
    </target>
</project>