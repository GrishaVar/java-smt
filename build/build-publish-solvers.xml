<?xml version="1.0" encoding="UTF-8" ?>

<!--
This file is part of JavaSMT,
an API wrapper for a collection of SMT solvers:
https://github.com/sosy-lab/java-smt

SPDX-FileCopyrightText: 2020 Dirk Beyer <https://www.sosy-lab.org>

SPDX-License-Identifier: Apache-2.0
-->

<!-- vim: set tabstop=8 shiftwidth=4 expandtab sts=4 filetype=ant fdm=marker: -->
<project name="publish-solvers" basedir="."
        xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- SECTION: Publishing Z3 {{{1
         ===============================================================
    -->
    <property name="z3.project.name" value="Java Bindings for Z3"/>
    <property name="z3.javadoc.dir" value="Javadoc-z3"/>

    <target name="package-z3" depends="get-z3-version, package-z3-sources, package-z3-javadoc">
        <!-- Copy Z3 binaries to the root folder along with the version postfix.
             This package provides the JNI for direct usage. -->
        <fail unless="z3.path">
            Please specify the path to Z3 with the flag -Dz3.path=/path/to/z3 (e.g. `bin` directory).
            The path has to point to the root Z3 folder (i.e., the path is ending with '/bin') and can be relative or absolute.
            Note that shell substitutions do not work.
            Please provide all releases (Linux64, MacOS, and Windows64) together in the same root directory,
            e.g., copy the releases (especially the content of their `bin` directories) together into one directory.
            The only overlap between those releases is the JAR file, which should be equal anyway.
            Additionally, make the Java sources available in this directory.
            This can be done by:
            - copying the content of sources-zip into the current directory (or vice versa)
            - executing `python scripts/mk_make.py --java` to generate all Java related files. Executing `make` is not required.
        </fail>
        <exec executable="readelf" dir="${z3.path}" outputproperty="z3.elf_details" logError="true" failonerror="true">
            <arg value="-d"/>
            <arg value="libz3.so"/>
        </exec>
        <fail>
            <condition>
                <not><contains string="${z3.elf_details}" substring="(SONAME)"/></not>
            </condition>
            libz3.so has missing SONAME property.
            Please run 'patchelf --set-soname libz3.so ${z3.path}/libz3.so'.
        </fail>
        <!-- Linux64 files -->
        <copy file="${z3.path}/libz3.so" tofile="libz3-${z3.version}.so"/>
        <copy file="${z3.path}/libz3java.so" tofile="libz3java-${z3.version}.so"/>
        <!-- Windows64 files -->
        <copy file="${z3.path}/libz3.dll" tofile="libz3-${z3.version}.dll"/>
        <copy file="${z3.path}/libz3java.dll" tofile="libz3java-${z3.version}.dll"/>
        <!-- MacOS files -->
        <copy file="${z3.path}/libz3.dylib" tofile="libz3-${z3.version}.dylib"/>
        <copy file="${z3.path}/libz3java.dylib" tofile="libz3java-${z3.version}.dylib"/>
        <!-- common Java file, Java is platform independent -->
        <copy file="${z3.path}/com.microsoft.z3.jar" tofile="com.microsoft.z3-${z3.version}.jar"/>
    </target>

    <target name="get-z3-version" unless="z3.version">
        <fail unless="z3.path">
            Please specify the path to Z3 with the flag -Dz3.path=/path/to/z3 (e.g. `bin` directory).
            The path has to point to the root Z3 folder and can be relative or absolute.
            Note that shell substitutions do not work.
            Please provide all releases (Linux64, MacOS, and Windows64) together in the same root directory,
            e.g., copy the releases (especially the content of their `bin` directories) together into one directory.
            The only overlap between those releases is the JAR file, which should be equal anyway.
            Additionally, make the Java sources available in this directory.
            This can be done by:
            - copying the content of sources-zip into the current directory (or vice versa)
            - executing `python scripts/mk_make.py --java` to generate all Java related files. Executing `make` is not required.
        </fail>
        <echo>Option -Dz3.version=... not specified. Trying to determine z3.version from git repository. This will fail if git repository is not available.</echo>
        <exec executable="git" dir="${z3.path}" outputproperty="z3.version" failonerror="true">
            <arg value="describe" />
        </exec>
    </target>

    <target name="publish-z3" depends="package-z3, load-ivy"
        description="Publish Z3 binaries to Ivy repo.">

        <ivy:resolve conf="solver-z3" file="solvers_ivy_conf/ivy_z3.xml" />
        <available property="ivy.hasrepository" file="repository/${ivy.organisation}/${ivy.module}" />
        <fail unless="ivy.hasrepository"
            message="Cannot publish without 'repository' dir, please run 'svn co https://svn.sosy-lab.org/software/ivy/repository/${ivy.organisation}/${ivy.module} repository/${ivy.organisation}/${ivy.module}'." />

        <ivy:publish
            pubrevision="${z3.version}"
            resolver="Sosy-Lab-Publish"
            artifactspattern="[artifact]-[revision](-[classifier]).[ext]"
            status="release"
            />
        <echo>
            You now want to run
            svn add repository/${ivy.organisation}/${ivy.module}/*-${z3.version}*
            svn ci repository/${ivy.organisation}/${ivy.module} -m"publish version ${z3.version} of Z3 Solver"
            to make the new version publicly available.</echo>
    </target>

    <target name="check-z3-sources">
        <!-- check for prepared Java sources -->
        <available file="${z3.path}/../src/api/java/Expr.java" property="isZ3NativeExprAvailable" />
        <fail unless="isZ3NativeExprAvailable" message="The sources of Z3 (Java bindings) can not be found." />
        <available file="${z3.path}/../src/api/java/Native.java" property="isZ3NativeApiFileAvailable" />
        <fail unless="isZ3NativeApiFileAvailable" message="The sources of Z3 are not yet prepared. Please execute `python scripts/mk_make.py --java` to generate all Java related files. Executing `make` is not required." />
    </target>

    <target name="package-z3-sources" depends="get-z3-version, check-z3-sources">
        <jar destfile="com.microsoft.z3-${z3.version}-sources.jar" whenmanifestonly="fail">
            <zipfileset dir="${z3.path}/../src/api/java" includes="**/*.java" prefix="com/microsoft/z3"/>
            <zipfileset dir="${z3.path}/../" includes="LICENSE.txt" prefix="META-INF"/>
            <manifest>
                <attribute name="Implementation-Title" value="${z3.project.name}"/>
                <attribute name="Implementation-Version" value="${z3.version}"/>
            </manifest>
        </jar>
    </target>

    <target name="z3-javadoc" depends="get-z3-version, check-z3-sources">
        <!-- cleanup -->
        <delete dir="${z3.javadoc.dir}" quiet="true"/>
        <!-- then write new files.
             Lets ignore minor issues, e.g. using html tag <tt> instead of <code> -->
        <javadoc
            destdir="${z3.javadoc.dir}"
            classpathref="classpath"
            locale="en_US"
            encoding="utf-8"
            windowtitle="${z3.project.name}"
            failonerror="false"
            failonwarning="false"
            overview="doc/javadoc_overview.html"
            >
            <fileset dir="${z3.path}/../src/api/java">
                <include name="**/*.java"/>
            </fileset>
            <link href="https://docs.oracle.com/en/java/javase/11/docs/api/"/>
            <doctitle><![CDATA[<h1>${z3.project.name}</h1>]]></doctitle>
            <tag name="apiNote" description="API Note:"/>
            <tag name="implSpec" description="Implementation Requirements:"/>
            <tag name="implNote" description="Implementation Note:"/>
            <arg line="${javadoc.doclint}"/>
        </javadoc>
    </target>

    <target name="package-z3-javadoc" depends="z3-javadoc">
        <jar jarfile="com.microsoft.z3-${z3.version}-javadoc.jar" whenmanifestonly="fail">
            <zipfileset dir="${z3.path}/../" includes="LICENSE.txt" prefix="META-INF"/>
            <fileset dir="${z3.javadoc.dir}" />
        </jar>
    </target>

    <!-- SECTION: Publishing CVC4 {{{1
         ==================================================================
    -->
    <target name="package-cvc4" depends="">
        <!-- Copy CVC4 binaries to the root folder along with the version postfix. -->
        <fail unless="cvc4.path">
            Please specify the path to CVC4 with the flag -Dcvc4.path=/path/to/cvc4.
            The path has to point to the root CVC4 folder, i.e.,
            a checkout of the official git repositoy from 'https://github.com/CVC4/CVC4.git'.
            Note that shell substitutions do not work and a full absolute path has to be specified.
        </fail>
        <fail unless="cvc4.customRev">
            Please specify a custom revision with the flag -Dcvc4.customRev=XXX.
            The custom revision has to be unique amongst the already known version
            numbers from the ivy repository. The script will append the git revision.
        </fail>

        <!-- get a naive version -->
        <exec executable="git" dir="${cvc4.path}" outputproperty="cvc4.revision" failonerror="true">
            <arg value="show"/>
            <arg value="-s"/>
            <arg value="--format=%h"/>
        </exec>
        <property name="cvc4.version" value="${cvc4.customRev}-g${cvc4.revision}"/>
        <echo message="Building CVC4 in version '${cvc4.version}'"/>

        <!-- build CVC4 -->
        <exec executable="rm" dir="${cvc4.path}" failonerror="true">
            <arg value="-rf"/>
            <arg value="symfpu-CVC4"/>
        </exec>
        <exec executable="./contrib/get-symfpu" dir="${cvc4.path}" failonerror="true"/>
        <exec executable="./configure.sh" dir="${cvc4.path}" failonerror="true">
            <arg value="--symfpu"/>
            <arg value="--language-bindings=java"/>
        </exec>
        <exec executable="make" dir="${cvc4.path}/build/" failonerror="true">
            <arg value="-j4" />
        </exec>

        <!-- remove unneeded symbols -->
        <exec executable="strip" dir="${cvc4.path}/build/src/bindings/java/" failonerror="true">
            <arg value="libcvc4jni.so" />
        </exec>
        <exec executable="strip" dir="${cvc4.path}/build/src/" failonerror="true">
            <arg value="libcvc4.so" />
        </exec>
        <exec executable="strip" dir="${cvc4.path}/build/src/parser/" failonerror="true">
            <arg value="libcvc4parser.so" />
        </exec>

        <!-- fix RPATH and library dependencies -->
        <exec executable="patchelf" dir="${cvc4.path}/build/src/parser/" failonerror="true">
            <arg value="--set-rpath"/><arg value="$ORIGIN"/>
            <arg value="--replace-needed"/><arg value="libcvc4.so.6"/><arg value="libcvc4.so"/>
            <arg value="libcvc4parser.so"/>
        </exec>
        <exec executable="patchelf" dir="${cvc4.path}/build/src/bindings/java/" failonerror="true">
            <arg value="--set-rpath"/><arg value="$ORIGIN"/>
            <arg value="--replace-needed"/><arg value="libcvc4.so.6"/><arg value="libcvc4.so"/>
            <arg value="--replace-needed"/><arg value="libcvc4parser.so.6"/><arg value="libcvc4parser.so"/>
            <arg value="libcvc4jni.so"/>
        </exec>

        <!-- copy library files into directory to be published for IVY -->
        <copy file="${cvc4.path}/build/src/libcvc4.so" tofile="libcvc4-${cvc4.version}.so"/>
        <copy file="${cvc4.path}/build/src/parser/libcvc4parser.so" tofile="libcvc4parser-${cvc4.version}.so"/>
        <copy file="${cvc4.path}/build/src/bindings/java/libcvc4jni.so" tofile="libcvc4jni-${cvc4.version}.so"/>
        <copy file="${cvc4.path}/build/src/bindings/java/CVC4.jar" tofile="CVC4-${cvc4.version}.jar"/>
    </target>

    <target name="publish-cvc4" depends="package-cvc4, load-ivy"
        description="Publish CVC4 binaries to Ivy repository.">

        <ivy:resolve conf="solver-cvc4" file="solvers_ivy_conf/ivy_cvc4.xml" />
        <available property="ivy.hasrepository" file="repository/${ivy.organisation}/${ivy.module}" />
        <fail unless="ivy.hasrepository"
            message="Cannot publish without 'repository' dir, please run 'svn co https://svn.sosy-lab.org/software/ivy/repository/${ivy.organisation}/${ivy.module} repository/${ivy.organisation}/${ivy.module}'." />

        <ivy:publish
            pubrevision="${cvc4.version}"
            resolver="Sosy-Lab-Publish"
            artifactspattern="[artifact]-[revision].[ext]"
            status="release"
            />
        <echo>
            You now want to run
            svn add repository/${ivy.organisation}/${ivy.module}/*-${cvc4.version}*
            svn ci repository/${ivy.organisation}/${ivy.module} -m"publish version ${cvc4.version} of CVC4 Solver"
            to make the new version publicly available.</echo>
    </target>

    <!-- Build options for CVC5, Reasoning:
          - 'auto-download' loads all dependencies automatically,
          - 'statistics' for the new statistics stuff,
          - 'prefix' because i don't want it to use system installed or install systemwide,
          - 'fPIC' for position-independent code, required for shared libraries.
          The full cmdline for building CVC5 is (note the double-dashes!):
            ./configure.sh production - -java-bindings - -auto-download - -statistics - -prefix=$WORKSPACE/cvc5-main/build/install -DVAR=fPIC
          Theoretically CVC5s performance should be improveable by using -best (uses the best
          known general performance/dependencies) but this can not be combined with auto-download.
    -->
    <!-- SECTION: Publishing CVC5
         ==================================================================
    -->
    <target name="package-cvc5" depends="">
        <!-- Copy CVC5 binaries to the root folder along with the version postfix. -->
        <fail unless="cvc5.path">
            Please specify the path to CVC5 with the flag -Dcvc5.path=/path/to/cvc5.
            The path has to point to the root CVC5 folder, i.e.,
            a checkout of the official git repositoy from 'https://github.com/cvc5/cvc5'.
            Note that shell substitutions do not work and a full absolute path has to be specified.
        </fail>
        <fail unless="cvc5.customRev">
            Please specify a custom revision with the flag -Dcvc5.customRev=XXX.
            The custom revision has to be unique amongst the already known version
            numbers from the ivy repository. The script will append the git revision.
        </fail>

        <!-- get the short commit hash of the cvc5 version used -->
        <exec executable="git" dir="${cvc5.path}" outputproperty="cvc5.revision" failonerror="true">
            <arg value="show"/>
            <arg value="-s"/>
            <arg value="--format=%h"/>
        </exec>
        <property name="cvc5.version" value="${cvc5.customRev}-g${cvc5.revision}"/>
        <echo message="Building CVC5 in version '${cvc5.version}'"/>

        <!-- build CVC5 -->
        <echo message="Cleaning old build files"/>
        <exec executable="rm" dir="${cvc5.path}" failonerror="true">
            <arg value="-rf"/>
            <arg value="build"/>
        </exec>

        <echo message="Configuring and building CVC5 in version '${cvc5.version}'"/>
        <exec executable="./configure.sh" dir="${cvc5.path}" failonerror="true">
            <!--<arg value="production"/>-->
            <arg value="--java-bindings"/>
            <arg value="--auto-download"/>
            <arg value="--statistics"/>
            <arg value="--prefix=${cvc5.path}/build/install"/>
            <arg value="-DVAR=fPIC"/>
        </exec>
        <exec executable="make" dir="${cvc5.path}/build/" failonerror="true">
            <arg value="-j4" />
        </exec>

        <!-- get the actual jar location as cvc5.jar is just a link -->
        <exec executable="readlink" dir="${cvc5.path}/build/src/api/java" outputproperty="cvc5.jar" failonerror="true">
            <arg value="-f"/>
            <arg value="cvc5.jar"/>
        </exec>

        <!-- copy library files into directory to be published for IVY -->
        <echo message="Copying artifact files into current directory"/>
        <copy file="${cvc5.path}/build/src/libcvc5.so" tofile="libcvc5-${cvc5.version}.so"/>
        <copy file="${cvc5.path}/build/src/parser/libcvc5parser.so" tofile="libcvc5parser-${cvc5.version}.so"/>
        <copy file="${cvc5.path}/build/src/api/java/libcvc5jni.so" tofile="libcvc5jni-${cvc5.version}.so"/>
        <copy file="${cvc5.jar}" tofile="cvc5-${cvc5.version}.jar"/>
        <copy file="${cvc5.path}/build/deps/lib/libpolyxx.so" tofile="libpolyxx-${cvc5.version}.so"/>
        <copy file="${cvc5.path}/build/deps/lib/libpoly.so" tofile="libpoly-${cvc5.version}.so"/>

        <!-- remove unneeded symbols -->
        <echo message="Strip unneeded symbols"/>
        <exec executable="strip" dir="./" failonerror="true">
            <arg value="libcvc5-${cvc5.version}.so"/>
        </exec>
        <exec executable="strip" dir="./" failonerror="true">
            <arg value="libcvc5jni-${cvc5.version}.so"/>
        </exec>
        <exec executable="strip" dir="./" failonerror="true">
            <arg value="libcvc5parser-${cvc5.version}.so"/>
        </exec>
        <exec executable="strip" dir="./" failonerror="true">
            <arg value="libpoly-${cvc5.version}.so"/>
        </exec>
        <exec executable="strip" dir="./" failonerror="true">
            <arg value="libpolyxx-${cvc5.version}.so"/>
        </exec>

        <!-- fix RPATH and library dependencies -->
        <echo message="Fixing library path for all artifact libraries"/>
        <exec executable="patchelf" dir="./" failonerror="true">
            <arg value="--set-rpath"/><arg value="$ORIGIN"/>
            <arg value="--replace-needed"/><arg value="libpolyxx.so.0"/><arg value="libpolyxx.so"/>
            <arg value="--replace-needed"/><arg value="libpoly.so.0"/><arg value="libpoly.so"/>
            <arg value="libcvc5-${cvc5.version}.so"/>
        </exec>
        <exec executable="patchelf" dir="./" failonerror="true">
            <arg value="--set-rpath"/><arg value="$ORIGIN"/>
            <arg value="--replace-needed"/><arg value="libcvc5.so.1"/><arg value="libcvc5.so"/>
            <arg value="libcvc5jni-${cvc5.version}.so"/>
        </exec>
        <exec executable="patchelf" dir="./" failonerror="true">
            <arg value="--set-rpath"/><arg value="$ORIGIN"/>
            <arg value="--replace-needed"/><arg value="libcvc5.so.1"/><arg value="libcvc5.so"/>
            <arg value="libcvc5parser-${cvc5.version}.so"/>
        </exec>
        <!-- patchelf finds two dependencies and needs to be called twice for libpolyxx.so -->
        <exec executable="patchelf" dir="./" failonerror="true">
            <arg value="--set-rpath"/><arg value="$ORIGIN"/>
            <arg value="--replace-needed"/><arg value="libpoly.so.0"/><arg value="libpoly.so"/>
            <arg value="libpolyxx-${cvc5.version}.so"/>
        </exec>
        <exec executable="patchelf" dir="./" failonerror="true">
            <arg value="--replace-needed"/><arg value="libpoly.so.0"/><arg value="libpoly.so"/>
            <arg value="libpolyxx-${cvc5.version}.so"/>
        </exec>
        <exec executable="patchelf" dir="./" failonerror="true">
            <arg value="--set-rpath"/><arg value="$ORIGIN"/>
            <arg value="libpoly-${cvc5.version}.so"/>
        </exec>
    </target>

    <target name="publish-cvc5" depends="package-cvc5, load-ivy"
        description="Publish CVC5 binaries to Ivy repository.">

        <ivy:resolve conf="solver-cvc5" file="solvers_ivy_conf/ivy_cvc5.xml" />
        <available property="ivy.hasrepository" file="repository/${ivy.organisation}/${ivy.module}" />
        <fail unless="ivy.hasrepository"
            message="Cannot publish without 'repository' dir, please run 'svn co https://svn.sosy-lab.org/software/ivy/repository/${ivy.organisation}/${ivy.module} repository/${ivy.organisation}/${ivy.module}'." />

        <ivy:publish
            pubrevision="${cvc5.version}"
            resolver="Sosy-Lab-Publish"
            artifactspattern="[artifact]-[revision].[ext]"
            status="release"
            />
        <echo>
            You now want to run
            svn add repository/${ivy.organisation}/${ivy.module}/*-${cvc5.version}*
            svn ci repository/${ivy.organisation}/${ivy.module} -m"publish version ${cvc5.version} of CVC5 Solver"
            to make the new version publicly available.</echo>
    </target>

    <!-- SECTION: Publishing Boolector {{{1
         ==================================================================
    -->
    <target name="package-boolector" depends="">
        <!-- Copy Boolector repository to the root folder along with the version postfix. -->
        <fail unless="boolector.path">
            Please specify the path to Boolector with the flag -Dboolector.path=/path/to/boolector.
            The path has to point to the root Boolector folder, i.e.,
            a checkout of the official git repositoy from 'https://github.com/boolector/boolector'.
            Note that shell substitutions do not work and a full absolute path has to be specified.
        </fail>
        <fail unless="boolector.customRev">
            Please specify a custom revision with the flag -Dboolector.customRev=XXX.
            The custom revision has to be unique amongst the already known version
            numbers from the ivy repository. The script will append the git revision.
        </fail>

        <!-- get a nive version -->
        <exec executable="git" dir="${boolector.path}" outputproperty="boolector.revision" failonerror="true">
            <arg value="show"/>
            <arg value="-s"/>
            <arg value="--format=%h"/>
        </exec>
        <property name="boolector.version" value="${boolector.customRev}-g${boolector.revision}"/>
        <echo message="Building Boolector in version '${boolector.version}'"/>

        <!-- add JNI wrapper before compiling Boolector -->
        <copy file="lib/native/source/libboolector/interface_wrap.c"                tofile="${boolector.path}/src/interface_wrap.c"/>
        <copy file="lib/native/source/libboolector/include_interface_and_jni.patch" tofile="${boolector.path}/src/include_interface_and_jni.patch"/>
        <exec executable="git" dir="${boolector.path}" failonerror="true">
            <arg value="apply"/>
            <arg value="src/include_interface_and_jni.patch"/>
        </exec>

        <!-- build Boolector -->
        <exec executable="./contrib/setup-picosat.sh"    dir="${boolector.path}" failonerror="true"/>
        <exec executable="./contrib/setup-minisat.sh"    dir="${boolector.path}" failonerror="true"/>
    	<exec executable="./contrib/setup-cms.sh"    	 dir="${boolector.path}" failonerror="true"/>
        <exec executable="./contrib/setup-lingeling.sh"  dir="${boolector.path}" failonerror="true"/>
        <exec executable="./contrib/setup-cadical.sh"    dir="${boolector.path}" failonerror="true"/>
        <exec executable="./contrib/setup-btor2tools.sh" dir="${boolector.path}" failonerror="true"/>
        <exec executable="./configure.sh" dir="${boolector.path}" failonerror="true">
            <arg value="-fno-strict-aliasing"/>
            <arg value="-fpic"/>
            <arg value="--shared"/>
        </exec>
        <exec executable="make" dir="${boolector.path}/build/" failonerror="true">
            <arg value="-j4" />
        </exec>

        <!-- remove unneeded symbols -->
        <exec executable="strip" dir="${boolector.path}/deps/install/lib/" failonerror="true">
            <arg value="libpicosat.so" />
        </exec>
        <exec executable="strip" dir="${boolector.path}/deps/install/lib/" failonerror="true">
            <arg value="libminisat.so" />
        </exec>
        <exec executable="strip" dir="${boolector.path}/build/lib/" failonerror="true">
            <arg value="libboolector.so" />
        </exec>

        <!-- fix RPATH and library dependencies -->
        <exec executable="patchelf" dir="${boolector.path}/build/lib/" failonerror="true">
            <arg value="--set-rpath"/><arg value="$ORIGIN"/>
            <arg value="--replace-needed"/><arg value="libminisat.so.2"/><arg value="libminisat.so"/>
            <arg value="libboolector.so"/>
        </exec>

        <!-- copy library files into directory to be published for IVY -->
        <copy file="${boolector.path}/deps/install/lib/libminisat.so" tofile="libminisat-${boolector.version}.so"/>
        <copy file="${boolector.path}/deps/install/lib/libpicosat.so" tofile="libpicosat-${boolector.version}.so"/>
        <copy file="${boolector.path}/build/lib/libboolector.so"      tofile="libboolector-${boolector.version}.so"/>
    </target>

    <target name="publish-boolector" depends="package-boolector, load-ivy"
        description="Publish Boolector binaries to Ivy repository.">

        <ivy:resolve conf="solver-boolector" file="solvers_ivy_conf/ivy_boolector.xml" />
        <available property="ivy.hasrepository" file="repository/${ivy.organisation}/${ivy.module}" />
        <fail unless="ivy.hasrepository"
            message="Cannot publish without 'repository' dir, please run 'svn co https://svn.sosy-lab.org/software/ivy/repository/${ivy.organisation}/${ivy.module} repository/${ivy.organisation}/${ivy.module}'." />

        <ivy:publish
            pubrevision="${boolector.version}"
            resolver="Sosy-Lab-Publish"
            artifactspattern="[artifact]-[revision].[ext]"
            status="release"
            />
        <echo>
            You now want to run
            svn add repository/${ivy.organisation}/${ivy.module}/*-${boolector.version}*
            svn ci repository/${ivy.organisation}/${ivy.module} -m"publish version ${boolector.version} of Boolector Solver"
            to make the new version publicly available.</echo>
    </target>

    <!-- SECTION: Publishing [Opti-]MathSAT {{{1
         ===============================================================
    -->
    <target name="compile-mathsat-bindings-linux">
        <compile-mathsatlike-bindings-linux flag="mathsat"/>
    </target>

    <target name="compile-mathsat-bindings-windows">
        <compile-mathsatlike-bindings-windows flag="mathsat"/>
    </target>

    <target name="compile-optimathsat-bindings">
        <compile-mathsatlike-bindings-linux flag="optimathsat"/>
    </target>

    <macrodef name="compile-mathsatlike-bindings-linux">
       <attribute name="flag" default="mathsat"/>
       <sequential>
            <checkPathOption pathOption="mathsat.path" defaultPath="/path/to/mathsat" targetName="Mathsat5 source folder (Linux version)"/>
            <checkPathOption pathOption="gmp.path" defaultPath="/path/to/gmp" targetName="GMP source folder (Linux version)"/>
           <exec executable="lib/native/source/libmathsat5j/compile.sh" failonerror="true">
               <arg value="${mathsat.path}" />
               <arg value="${gmp.path}" />
               <arg value="-@{flag}" />
           </exec>
       </sequential>
    </macrodef>

    <macrodef name="compile-mathsatlike-bindings-windows">
        <attribute name="flag" default="mathsat"/> <!-- unused, OptiMathSAT not yet build for Windows -->
        <sequential>
            <checkPathOption pathOption="mathsat-windows.path" defaultPath="/path/to/mathsat" targetName="Mathsat5 source folder (Windows version)"/>
            <checkPathOption pathOption="mpir-windows.path" defaultPath="/path/to/mpir" targetName="MPIR source folder (Windows version)"/>
            <checkPathOption pathOption="jdk-windows.path" defaultPath="/path/to/jdk" targetName="JDK source folder (Windows version)"/>
            <exec executable="lib/native/source/libmathsat5j/compileForWindows.sh" failonerror="true">
                <arg value="${mathsat-windows.path}" />
                <arg value="${mpir-windows.path}" />
                <arg value="${jdk-windows.path}" />
            </exec>
        </sequential>
    </macrodef>

    <target name="publish-mathsat" depends="compile-mathsat-bindings-linux, compile-mathsat-bindings-windows, load-ivy"
        description="Publish MathSAT binaries to Ivy repo.">
        <fail unless="mathsat.version">
            Please specify the MathSAT5 version with the flag -Dmathsat.version=... .
        </fail>

        <copy file="lib/native/source/libmathsat5j/libmathsat5j.so" tofile="libmathsat5j-${mathsat.version}.so"/>
        <copy file="lib/native/source/libmathsat5j/mathsat5j.dll" tofile="mathsat5j-${mathsat.version}.dll"/>
        <copy file="${mathsat-windows.path}/lib/mathsat.dll" tofile="mathsat-${mathsat.version}.dll"/>
        <copy file="${mathsat-windows.path}/bin/mpir.dll" tofile="mpir-${mathsat.version}.dll"/>

        <ivy:resolve conf="solver-mathsat" file="solvers_ivy_conf/ivy_mathsat.xml" />
        <available property="ivy.hasrepository" file="repository/${ivy.organisation}/${ivy.module}" />
        <fail unless="ivy.hasrepository"
            message="Cannot publish without 'repository' dir, please run 'svn co https://svn.sosy-lab.org/software/ivy/repository/${ivy.organisation}/${ivy.module} repository/${ivy.organisation}/${ivy.module}'." />

        <ivy:publish
            pubrevision="${mathsat.version}"
            resolver="Sosy-Lab-Publish"
            artifactspattern="[artifact]-[revision].[ext]"
            status="release"
            />
        <echo>
            You now want to run
            svn add repository/${ivy.organisation}/${ivy.module}/*-${mathsat.version}*
            svn ci repository/${ivy.organisation}/${ivy.module} -m"publish version ${mathsat.version} of MathSAT5"
            to make the new version publicly available.</echo>
    </target>

    <target name="publish-optimathsat" depends="compile-optimathsat-bindings, load-ivy"
        description="Publish OptiMathSAT binaries to Ivy repo.">
        <fail unless="mathsat.version">
            Please specify the @{flag} version with the flag -Dmathsat.version=... .
        </fail>

        <copy file="lib/native/source/libmathsat5j/liboptimathsat5j.so" tofile="liboptimathsat5j-${mathsat.version}.so"/>

        <ivy:resolve conf="solver-optimathsat" file="solvers_ivy_conf/ivy_optimathsat.xml" />
        <available property="ivy.hasrepository" file="repository/${ivy.organisation}/${ivy.module}" />
        <fail unless="ivy.hasrepository"
            message="Cannot publish without 'repository' dir, please run 'svn co https://svn.sosy-lab.org/software/ivy/repository/${ivy.organisation}/${ivy.module} repository/${ivy.organisation}/${ivy.module}'." />

        <ivy:publish
            pubrevision="${mathsat.version}"
            resolver="Sosy-Lab-Publish"
            artifactspattern="[artifact]-[revision].[ext]"
            status="release"
            />
        <echo>
            You now want to run
            svn add repository/${ivy.organisation}/${ivy.module}/*-${mathsat.version}*
            svn ci repository/${ivy.organisation}/${ivy.module} -m"publish version ${mathsat.version} of OptiMathSAT"
            to make the new version publicly available.</echo>
    </target>
    <!-- }}} -->

    <!-- SECTION: Publishing Yices2 {{{1
         ===============================================================
    -->
    <target name="compile-yices2-bindings"
        description="Compile Yices2 bindings">
        <sequential>
            <checkPathOption pathOption="yices2.path" defaultPath="/path/to/yices2" targetName="Yices2 source folder"/>
            <checkPathOption pathOption="gmp.path" defaultPath="/path/to/gmp" targetName="GMP source folder"/>
            <checkPathOption pathOption="gperf.path" defaultPath="/path/to/gperf" targetName="GPERF source folder"/>
           <exec executable="lib/native/source/yices2j/compile.sh" failonerror="true">
               <arg value="${yices2.path}" />
               <arg value="${gmp.path}" />
               <arg value="${gperf.path}" />
           </exec>
       </sequential>
    </target>

    <target name="publish-yices2" depends="compile-yices2-bindings, load-ivy"
        description="Publish Yices2 binaries to Ivy repo.">
        <sequential>
            <fail unless="yices2.version">
                Please specify the Yices2 version with the flag -Dyices2.version=... .
            </fail>

            <copy file="lib/native/source/yices2j/libyices2j.so" tofile="libyices2j-${yices2.version}.so"/>

            <ivy:resolve conf="solver-yices2" file="solvers_ivy_conf/ivy_yices2.xml" />
            <available property="ivy.hasrepository" file="repository/${ivy.organisation}/${ivy.module}" />
            <fail unless="ivy.hasrepository"
                message="Cannot publish without 'repository' dir, please run 'svn co https://svn.sosy-lab.org/software/ivy/repository/${ivy.organisation}/${ivy.module} repository/${ivy.organisation}/${ivy.module}'." />

            <ivy:publish
                pubrevision="${yices2.version}"
                resolver="Sosy-Lab-Publish"
                artifactspattern="[artifact]-[revision].[ext]"
                status="release"
                />
            <echo>
                You now want to run
                svn add repository/${ivy.organisation}/${ivy.module}/*-${yices2.version}*
                svn ci repository/${ivy.organisation}/${ivy.module} -m"publish version ${yices2.version} of Yices2 Solver"
                to make the new version publicly available.</echo>
        </sequential>
    </target>

    <import file="build-jar-yices2.xml"/>
    <target name="dist-yices2" depends="jar-yices2, sources-yices2" description="Make a distributable release with yices2 only"/>

    <target name="publish-artifacts-yices2" depends="load-ivy, determine-version, dist-yices2"
         description="Publish Java bindings for Yices2 to Ivy repo.">
        <sequential>
            <ivy:resolve conf="runtime" file="solvers_ivy_conf/ivy_javasmt_yices2.xml" />
            <available property="ivy.hasrepository" file="repository/${ivy.organisation}/${ivy.module}" />
            <fail unless="ivy.hasrepository"
                message="Cannot publish without 'repository' dir, please run 'svn co https://svn.sosy-lab.org/software/ivy/repository/${ivy.organisation}/${ivy.module} repository/${ivy.organisation}/${ivy.module}'." />
            <fail unless="version.publishable"
                message="Cannot publish version ${version}, only unmodified working copies may be published." />

            <ivy:publish
                pubrevision="${version}"
                resolver="Sosy-Lab-Publish"
                status="release"
                artifactspattern="[artifact]-[revision](-[classifier]).[ext]">
            </ivy:publish>
            <echo>
                You now want to run
                svn add repository/${ivy.organisation}/${ivy.module}/*-${version}*
                svn ci repository/${ivy.organisation}/${ivy.module} -m"publish version ${version} of ${ant.project.name}"
                to make the new version publicly available.</echo>
        </sequential>
    </target>

    <!-- SECTION: Publishing Apron {{{1
     ==================================================================
-->
    <target name="package-apron" depends="">
        <!-- Copy Apron repository to the root folder along with the version postfix. -->
        <fail unless="apron.path">
            Please specify the path to Boolector with the flag -Dapron.path=/path/to/apron.
            The path has to point to the root Apron folder, i.e.,
            a checkout of the official git repositoy from 'https://github.com/antoinemine/apron'.
            Note that shell substitutions do not work and a full absolute path has to be specified.
        </fail>
        <fail unless="apron.customRev">
            Please specify a custom revision with the flag -Dboolector.customRev=XXX.
            The custom revision has to be unique amongst the already known version
            numbers from the ivy repository. The script will append the git revision.
        </fail>

        <!-- get a naive version -->
        <exec executable="git" dir="${apron.path}" outputproperty="apron.revision"
              failonerror="true">
            <arg value="show"/>
            <arg value="-s"/>
            <arg value="--format=%h"/>
        </exec>
        <property name="apron.version" value="${apron.customRev}-g${apron.revision}"/>
        <echo message="Building Apron in version '${apron.version}'"/>

        <!-- build Apron -->
        <exec executable="./configure" dir="${boolector.path}" failonerror="true">
            <arg value="--no-cxx"/>
            <arg value="--no-ocaml"/>
            <arg value="--prefix"/>
            <arg value="~/git/apron/build"/>
            <arg value="--no-ocaml-plugins"/>
            <arg value="--no-ocamlfind"/>
        </exec>
        <exec executable="make" dir="${boolector.path}/build/" failonerror="true">
        </exec>

        <!-- fix RPATH and library dependencies -->
        <exec executable="patchelf" dir="${apron.path}/japron/" failonerror="true">
            <arg value="--set-rpath"/><arg value="$ORIGIN"/>
            <arg value="apron.jar"/>
            <arg value="gmp.jar"/>
            <arg value="libapron.so"/>
            <arg value="libboxD.so"/>
            <arg value="libjapron.so"/>
            <arg value="libjgmp.so"/>
            <arg value="liboctD.so"/>
            <arg value="libpolkaMPQ.so"/>
        </exec>

        <!-- copy library files into directory to be published for IVY -->
        <copy file="${apron.path}/japron/libapron.so"
              tofile="libapron-${apron.version}.so"/>
        <copy file="${apron.path}/japron/libboxD.so"
              tofile="libboxD-${apron.version}.so"/>
        <copy file="${apron.path}/japron/libjapron.so"
              tofile="libjapron-${apron.version}.so"/>
        <copy file="${apron.path}/japron/libjgmp.so"
              tofile="libjgmp-${apron.version}.so"/>
        <copy file="${apron.path}/japron/liboctD.so"
              tofile="liboctD-${apron.version}.so"/>
        <copy file="${apron.path}/japron/libpolkaMPQ.so"
              tofile="libpolkaMPQ-${apron.version}.so"/>
    </target>

    <target name="publish-apron" depends="package-apron, load-ivy"
            description="Publish Apron binaries to Ivy repository.">

        <ivy:resolve conf="solver-apron" file="solvers_ivy_conf/ivy_apron.xml" />
        <available property="ivy.hasrepository" file="repository/${ivy.organisation}/${ivy.module}" />
        <fail unless="ivy.hasrepository"
              message="Cannot publish without 'repository' dir, please run 'svn co https://svn.sosy-lab.org/software/ivy/repository/${ivy.organisation}/${ivy.module} repository/${ivy.organisation}/${ivy.module}'." />

        <ivy:publish
                pubrevision="${apron.version}"
                resolver="Sosy-Lab-Publish"
                artifactspattern="[artifact]-[revision].[ext]"
                status="release"
        />
        <echo>
            You now want to run
            svn add repository/${ivy.organisation}/${ivy.module}/*-${apron.version}*
            svn ci repository/${ivy.organisation}/${ivy.module} -m"publish version ${apron.version}
            of Apron Solver"
            to make the new version publicly available.</echo>
    </target>

    <!-- }}} -->

    <macrodef name="checkPathOption">
        <attribute name="pathOption"/>
        <attribute name="defaultPath"/>
        <attribute name="targetName"/>
        <sequential>
            <fail unless="@{pathOption}">-
    Please specify the path to the @{targetName} with the following flag:
        -D@{pathOption}=@{defaultPath}
    The path has to point to the root of the @{targetName}.
    Note that shell substitutions do not work and a full absolute path is preferred.
            </fail>
        </sequential>
    </macrodef>
</project>
